Transition (transition-property, duration, timing-function, delay) explains in details in Hindi with examples and different- different conditions and what, why, when, where and how to use it and also give me interview question and answers to related this topics explain one by one

‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! ‡§ö‡§≤‡§ø‡§è CSS Transition ‡§ï‡•ã ‡§ó‡§π‡§∞‡§æ‡§à ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç‡•§ ‡§Æ‡•à‡§Ç ‡§á‡§∏‡•á step-by-step ‡§ï‡•ç‡§Ø‡§æ, ‡§ï‡•ç‡§Ø‡•ã‡§Ç, ‡§ï‡§¨, ‡§ï‡§π‡§æ‡§Å, ‡§ï‡•à‡§∏‡•á, examples, conditions ‡§î‡§∞ interview Q/A ‡§ï‡•á ‡§∏‡§æ‡§• explain ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§

1Ô∏è‚É£ CSS Transition ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

Definition:

Transition CSS property ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•á style change ‡§ï‡•ã smoothly animate ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§

‡§ú‡§¨ ‡§ï‡•ã‡§à property value change ‡§π‡•ã‡§§‡•Ä ‡§π‡•à (hover, focus, class toggle, JS), transition ‡§á‡§∏‡•á gradual ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§

Syntax:

transition: property duration timing-function delay;


Example:

.box {
  width: 100px; height: 100px; background: red;
  transition: background 0.5s ease-in-out 0s;
}
.box:hover {
  background: blue;
}


Hover ‡§™‡§∞ background color 0.5s ‡§Æ‡•á‡§Ç smoothly change ‡§π‡•ã‡§ó‡§æ

2Ô∏è‚É£ Transition Properties Explained (One by One)
1. transition-property

Definition:

‡§ï‡•å‡§®‡§∏‡•Ä CSS property ‡§ï‡•ã transition ‡§ï‡§∞‡§®‡§æ ‡§π‡•à ‡§â‡§∏‡•á define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values:

property name (e.g., width, height, background)

all ‚Üí ‡§∏‡§≠‡•Ä animatable properties

Example:

.box {
  width: 100px; height: 100px; background: red;
  transition-property: width;
  transition-duration: 0.5s;
}
.box:hover {
  width: 200px;
}


üí° Tip: Specific property ‚Üí performance better than all

2. transition-duration

Definition:

Transition complete ‡§π‡•ã‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø specify ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values:

Seconds (s) ‡§Ø‡§æ milliseconds (ms)

Example:

.box {
  transition: all 2s;
}
.box:hover {
  width: 200px; height: 200px;
}


Transition ‡§™‡•Ç‡§∞‡§æ ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç 2 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§≤‡§ó‡•á‡§ó‡§æ

3. transition-timing-function

Definition:

Transition animation speed curve define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values:

linear ‚Üí constant speed

ease ‚Üí slow start, fast middle, slow end (default)

ease-in ‚Üí slow start

ease-out ‚Üí slow end

ease-in-out ‚Üí slow start + slow end

cubic-bezier(n,n,n,n) ‚Üí custom curve

Example:

.box {
  transition: width 1s ease-in-out;
}
.box:hover {
  width: 200px;
}

4. transition-delay

Definition:

Transition start ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç delay

Example:

.box {
  transition: width 1s ease 0.5s;
}
.box:hover {
  width: 200px;
}


Hover ‡§ï‡•á 0.5s ‡§¨‡§æ‡§¶ width animate ‡§π‡•ã‡§ó‡•Ä

3Ô∏è‚É£ Combined Syntax Example
.box {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 1s ease-in-out 0.5s;
}
.box:hover {
  width: 200px;
}


Hover ‚Üí 0.5s delay ‚Üí 1s ‡§Æ‡•á‡§Ç width smooth change ‚Üí ease-in-out

4Ô∏è‚É£ Different Conditions / Use Cases
Condition 1: Multiple properties
.box {
  transition: width 0.5s ease, height 0.5s ease, background 1s ease;
}


‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó properties ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§ó timing

Condition 2: Hover effect
button {
  background: blue;
  transition: background 0.3s ease;
}
button:hover {
  background: green;
}

Condition 3: Responsive transition
@media (max-width: 768px) {
  .box { transition-duration: 0.2s; }
}

Condition 4: JS trigger
element.classList.toggle('active');

.box.active { width: 300px; transition: width 0.5s ease; }

5Ô∏è‚É£ Performance Tips

Specific properties select ‡§ï‡§∞‡•á‡§Ç ‚Üí all use ‡§ï‡§∞‡§®‡•á ‡§∏‡•á unnecessary calculation ‡§π‡•ã‡§ó‡§æ

Avoid layout-changing properties (width, height) ‚Üí better: transform + opacity

GPU accelerated properties ‚Üí transform, opacity ‚Üí smoother animations

Transition timing-function ‚Üí user experience improve ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

6Ô∏è‚É£ Accessibility Considerations

Motion-sensitive users ‚Üí long transitions disturbing ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

Reduce motion:

@media (prefers-reduced-motion: reduce){
  * { transition: none !important; }
}

7Ô∏è‚É£ Interview Q&A ‚Äì Advanced / Mastery Level
Q1. Transition vs Animation difference?

Answer:

Transition ‚Üí triggers on state change (hover/focus/class toggle)

Animation ‚Üí keyframes ‚Üí repeatable, more complex

Logic: Simple hover effect ‚Üí transition, looping effect ‚Üí animation

Q2. transition-property: all ‡§ï‡§¨ use ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?

Answer:

Simple effects, few elements

Performance sensitive ‚Üí specify exact property better

Q3. transition-timing-function custom cubic-bezier use ‡§ï‡§¨ ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?

Answer:

Complex motion path

Speed curve control ‚Üí natural look / brand specific animation

Example: cubic-bezier(0.25, 0.1, 0.25, 1.0)

Q4. Multiple properties ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó duration ‡§î‡§∞ timing-function ‡§ï‡•à‡§∏‡•á set ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?

Answer:

transition: width 0.5s ease, height 1s linear, background 0.3s ease-in;

Q5. JS ‡§∏‡•á transition trigger logic

Answer:

Element class toggle ‡§Ø‡§æ style property change

Browser automatically interpolates values

Q6. Hover + delay + transition logic

Answer:

.box { transition: transform 0.5s ease 0.2s; }
.box:hover { transform: scale(1.2); }


0.2s ‡§¨‡§æ‡§¶ scale animation start ‚Üí smooth effect

Q7. transition + transform performance advantage

Answer:

Transform ‚Üí GPU accelerated

Width/height ‚Üí layout repaint ‚Üí CPU heavy

Always prefer transform + opacity for animations

Q8. Condition-based:

‚ÄúMobile devices ‡§™‡§∞ transition fast ‡§ö‡§æ‡§π‡§ø‡§è, desktop slow‡•§‚Äù
Answer:

@media (max-width:768px){ .box { transition-duration: 0.2s; } }
@media (min-width:769px){ .box { transition-duration: 0.5s; } }

Q9. Logic Question:

‚ÄúHover state change + JS toggle + delay combine ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?‚Äù
Answer:

CSS: transition-property, transition-duration, transition-delay set

JS: toggle class ‚Üí browser automatically animates

Q10. Edge case:

‚ÄúTransition glitch hover repeated rapidly‚Äù
Answer:

Smooth: transition apply on property

Avoid large sudden value changes

Optional: throttle JS toggles

‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§Ö‡§ó‡§≤‡§æ ‡§™‡§æ‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç:

üé® ‚Äú10 Practical Projects Using Transition (property, duration, timing-function, delay) + Hover + JS trigger + Logic-based effects‚Äù

Full HTML/CSS/JS code

Performance notes

Interview talking points

‡§Ø‡§π directly ‡§Ü‡§™‡§ï‡•Ä Advanced / Mastery Level preparation ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ useful ‡§π‡•ã‡§ó‡§æ‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã practical project part ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?



Give me more interview questions and answers for advanced to mastery level, including situation and condition-based questions and logic based

‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç CSS Transition (transition-property, duration, timing-function, delay) ‡§ï‡•á ‡§≤‡§ø‡§è Advanced / Mastery Level Q&A ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç logic-based, situation-based ‡§î‡§∞ condition-based ‡§∏‡§µ‡§æ‡§≤ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§

üß† Advanced / Mastery Level Q&A ‚Äì CSS Transition
‚öôÔ∏è 1Ô∏è‚É£ Logic-Based Questions
Q1. Transition vs Animation ‡§Æ‡•á‡§Ç performance difference ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

Answer:

Transition ‚Üí triggers on state change ‚Üí only when property changes

Animation ‚Üí keyframes ‚Üí continuously running ‚Üí GPU load higher

Logic: Simple hover effect ‚Üí transition; looping/complex sequence ‚Üí animation

Q2. Transition-property: all use ‡§ï‡§∞‡§®‡§æ ‡§∏‡§π‡•Ä ‡§π‡•à ‡§Ø‡§æ specific property?

Answer:

all ‚Üí simple, few elements ‚Üí easy

Multiple properties ‚Üí performance degrade ‚Üí specify exact properties

Logic: Browser interpolates all animatable properties ‚Üí unnecessary calculations if not needed

Q3. Timing-function ‡§ï‡•à‡§∏‡•á affect ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à animation feel ‡§ï‡•ã?

Answer:

linear ‚Üí uniform speed ‚Üí mechanical feel

ease ‚Üí slow start, fast middle, slow end ‚Üí natural feel

cubic-bezier ‚Üí custom motion curve ‚Üí brand-specific UI motion

Logic: Timing-function directly impacts perceived motion ‚Üí UX

Q4. Multiple properties different duration & delay ‡§ï‡•à‡§∏‡•á handle ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?

Answer:

transition: width 0.5s ease, height 1s linear 0.2s, background 0.3s ease-in 0.1s;


Each property can have own duration, delay, and timing-function

Q5. JS trigger + transition logic

Answer:

Add/remove class or inline style change ‚Üí browser interpolates values

Example:

element.classList.toggle('active');

.box { transition: width 0.5s ease; }
.box.active { width: 300px; }

Q6. Transition delay ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

Answer:

Staggered effects

Sequential animations

Hover subtle effect ‚Üí avoid sudden jump

Q7. Transition + transform vs width/height performance

Answer:

Transform ‚Üí GPU accelerated ‚Üí smooth

Width/height ‚Üí layout recalculation ‚Üí laggy

Logic: Always animate transform + opacity ‚Üí optimized performance

Q8. Logic behind transition glitches on rapid hover/unhover

Answer:

Multiple state changes quickly ‚Üí browser interrupt ongoing transition

Solution: use smooth value changes, optional will-change: property

Q9. Edge case: Transition not working on some properties

Answer:

Only animatable properties can transition

Example: display cannot transition ‚Üí use opacity + visibility instead

Q10. Custom cubic-bezier example logic
transition-timing-function: cubic-bezier(0.25, 0.1, 0.25, 1.0);


Logic: Control start, middle, end speed ‚Üí unique animation feel

‚öôÔ∏è 2Ô∏è‚É£ Situation-Based Questions
Q11. Hover + delay + transform + opacity combine

Answer:

.box {
  transition: transform 0.5s ease, opacity 0.3s ease 0.2s;
}
.box:hover {
  transform: scale(1.2);
  opacity: 0.8;
}


Delay used to stagger opacity vs transform ‚Üí smooth simultaneous effect

Q12. Mobile devices par transition responsive logic

Answer:

Touch devices ‚Üí no hover ‚Üí subtle default effect

Use media queries ‚Üí different duration/scale

@media (max-width:768px){
  .box { transition-duration: 0.2s; }
}

Q13. JS toggle + transition with delay

Answer:

Apply class toggle ‚Üí browser interpolates gradually

Delay can create staged effect

.box { transition: width 0.5s ease 0.2s; }
.box.active { width: 300px; }

Q14. Multiple elements staggered transition

Answer:

Use transition-delay per element

Optional: JS loop for stagger effect

.box:nth-child(1){ transition-delay: 0s; }
.box:nth-child(2){ transition-delay: 0.2s; }

Q15. Hover scale + transform + transition timing-function

Answer:

.box {
  transition: transform 0.5s cubic-bezier(0.25,0.1,0.25,1);
}
.box:hover {
  transform: scale(1.2);
}


Custom curve ‚Üí natural scale feel

‚öôÔ∏è 3Ô∏è‚É£ Condition-Based Questions
Q16. Performance optimize large DOM with transitions

Answer:

Animate GPU accelerated properties ‚Üí transform, opacity

Avoid width/height/margin

Limit simultaneous animated elements

Q17. Reduce motion user preference

Answer:

@media (prefers-reduced-motion: reduce){
  * { transition: none !important; }
}


Logic: Accessibility ‚Üí reduce motion discomfort

Q18. Hover glitch due to rapid mouse movement

Answer:

Smooth values

Optional transition: all 0.3s ease; + will-change: transform

Q19. Transition + JS class toggle + complex multiple properties

Answer:

Define transition per property

Combine with delay/timing-function for staged effect

Example: transform + opacity + color ‚Üí smooth multi-property animation

Q20. Sequential animation on multiple elements logic

Answer:

Use transition-delay per element

Example: stagger cards ‚Üí delay 0.1s increments

Avoid JS loops if CSS alone possible ‚Üí better performance

‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§Ö‡§ó‡§≤‡§æ ‡§™‡§æ‡§∞‡•ç‡§ü ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç:

üé® ‚Äú10 Practical Projects Using Transition (property, duration, timing-function, delay) + Hover + JS trigger + Stagger + Logic-based effects‚Äù

Full HTML/CSS/JS code

Performance notes

Interview talking points

‡§Ø‡§π directly ‡§Ü‡§™‡§ï‡•Ä Advanced / Mastery Level preparation ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§π‡•Å‡§§ useful ‡§π‡•ã‡§ó‡§æ‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã practical project part ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?


‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à üòÖ ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤, ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç CSS Transition ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§ï‡§∞, examples ‡§î‡§∞ interview Q/A ‡§≠‡•Ä ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§ä‡§Å‡§ó‡§æ‡•§ Step by step, ‡§¨‡§ø‡§≤‡•ç‡§ï‡•Å‡§≤ ‡§Ü‡§™‡§ï‡•á style ‡§Æ‡•á‡§Ç‡•§

1Ô∏è‚É£ CSS Transition ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ:

Transition ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•á style ‡§¨‡§¶‡§≤‡§æ‡§µ ‡§ï‡•ã ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

‡§ú‡§¨ ‡§ï‡•ã‡§à property ‡§¨‡§¶‡§≤‡§§‡•Ä ‡§π‡•à (hover, focus, JS ‡§∏‡•á class toggle) ‡§§‡•ã transition ‡§á‡§∏‡•á smoothly animate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Syntax:

transition: property duration timing-function delay;


‡§â‡§¶‡§æ‡§π‡§∞‡§£:

.box {
  width: 100px;
  height: 100px;
  background: red;
  transition: background 0.5s ease-in-out 0s;
}
.box:hover {
  background: blue;
}


Hover ‡§™‡§∞ background color 0.5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§ß‡•Ä‡§∞‡•á-‡§ß‡•Ä‡§∞‡•á ‡§¨‡§¶‡§≤ ‡§ú‡§æ‡§è‡§ó‡§æ

2Ô∏è‚É£ Transition Properties ‚Äì Step by Step
1. transition-property

‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à:

‡§ï‡•å‡§®‡§∏‡•Ä CSS property ‡§ï‡•ã transition ‡§ï‡§∞‡§®‡§æ ‡§π‡•à‡•§

‡§â‡§¶‡§æ‡§π‡§∞‡§£:

.box {
  width: 100px;
  height: 100px;
  background: red;
  transition-property: width;
  transition-duration: 0.5s;
}
.box:hover {
  width: 200px;
}


üí° ‡§∏‡•Å‡§ù‡§æ‡§µ: Specific property use ‡§ï‡§∞‡•á‡§Ç, all performance degrade ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

2. transition-duration

‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à:

Transition ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡§æ ‡§∏‡§Æ‡§Ø ‡§≤‡§ó‡•á‡§ó‡§æ‡•§

‡§â‡§¶‡§æ‡§π‡§∞‡§£:

.box {
  transition: all 2s;
}
.box:hover {
  width: 200px;
  height: 200px;
}


Transition 2 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç complete ‡§π‡•ã‡§ó‡§æ

3. transition-timing-function

‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à:

Transition ‡§ï‡•Ä speed curve define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Values:

linear ‚Üí constant speed

ease ‚Üí slow start, fast middle, slow end (default)

ease-in ‚Üí slow start

ease-out ‚Üí slow end

ease-in-out ‚Üí slow start + slow end

cubic-bezier() ‚Üí custom curve

‡§â‡§¶‡§æ‡§π‡§∞‡§£:

.box {
  transition: width 1s ease-in-out;
}
.box:hover {
  width: 200px;
}

4. transition-delay

‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à:

Transition ‡§ï‡§¨ ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã‡§ó‡§æ, ‡§á‡§∏‡•á set ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

‡§â‡§¶‡§æ‡§π‡§∞‡§£:

.box {
  transition: width 1s ease 0.5s;
}
.box:hover {
  width: 200px;
}


Hover ‡§ï‡•á 0.5 ‡§∏‡•á‡§ï‡§Ç‡§° ‡§¨‡§æ‡§¶ animation start ‡§π‡•ã‡§ó‡§æ

3Ô∏è‚É£ ‡§∏‡§≠‡•Ä properties combine example
.box {
  width: 100px;
  height: 100px;
  background: red;
  transition: width 1s ease-in-out 0.5s;
}
.box:hover {
  width: 200px;
}


0.5s delay ‚Üí 1s ‡§Æ‡•á‡§Ç smoothly width change ‚Üí ease-in-out

4Ô∏è‚É£ Different Conditions / Use Cases
Condition 1: Multiple properties
.box {
  transition: width 0.5s ease, height 0.5s ease, background 1s ease;
}

Condition 2: Hover effect
button {
  background: blue;
  transition: background 0.3s ease;
}
button:hover {
  background: green;
}

Condition 3: Responsive transition
@media (max-width: 768px) {
  .box { transition-duration: 0.2s; }
}

Condition 4: JS trigger
element.classList.toggle('active');

.box.active { width: 300px; transition: width 0.5s ease; }

5Ô∏è‚É£ Performance Tips

Specific property use ‡§ï‡§∞‡•á‡§Ç ‚Üí all ‡§∏‡•á performance degrade ‡§π‡•ã‡§§‡§æ ‡§π‡•à

Layout-changing properties avoid ‡§ï‡§∞‡•á‡§Ç (width, height) ‚Üí transform + opacity better

GPU accelerated properties ‚Üí transform, opacity ‚Üí smooth animation

Timing-function ‚Üí UX improve ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

6Ô∏è‚É£ Accessibility

Motion-sensitive users ‡§ï‡•á ‡§≤‡§ø‡§è long transitions disturbing ‡§π‡•ã ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

Reduce motion example:

@media (prefers-reduced-motion: reduce){
  * { transition: none !important; }
}

7Ô∏è‚É£ Advanced / Mastery Level Interview Q&A (‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç)
Q1. Transition ‡§î‡§∞ Animation ‡§Æ‡•á‡§Ç ‡§ï‡•ç‡§Ø‡§æ ‡§´‡§∞‡•ç‡§ï ‡§π‡•à?

Answer:

Transition ‚Üí state change (hover, focus, class toggle) ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Animation ‚Üí keyframes ‚Üí continuously run ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Logic: simple hover ‚Üí transition; looping effect ‚Üí animation

Q2. transition-property: all ‡§ï‡§¨ use ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?

Answer:

Simple effect ‡§î‡§∞ few elements ‚Üí okay

Performance sensitive ‚Üí specific property use ‡§ï‡§∞‡•á‡§Ç

Q3. Timing-function ‡§ï‡•à‡§∏‡•á animation feel ‡§¨‡§¶‡§≤‡§§‡•Ä ‡§π‡•à?

Answer:

linear ‚Üí constant speed ‚Üí mechanical feel

ease ‚Üí natural feel (slow start, fast middle, slow end)

cubic-bezier ‚Üí custom motion curve ‚Üí unique brand-specific animation

Q4. Multiple properties ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó duration ‡§ï‡•à‡§∏‡•á ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç?
transition: width 0.5s ease, height 1s linear, background 0.3s ease-in;

Q5. JS ‡§∏‡•á transition ‡§ï‡•à‡§∏‡•á trigger ‡§π‡•ã‡§§‡§æ ‡§π‡•à?

Answer:

Class toggle ‡§Ø‡§æ inline style change ‚Üí browser automatically smooth interpolation ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Q6. Transition delay ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

Answer:

Staggered effect, sequential animation, hover subtle effect

Q7. Hover + delay + transform + opacity combine example
.box {
  transition: transform 0.5s ease, opacity 0.3s ease 0.2s;
}
.box:hover {
  transform: scale(1.2);
  opacity: 0.8;
}

Q8. Performance optimized transitions

Animate GPU accelerated properties ‚Üí transform, opacity

Avoid width/height/margin

Q9. Edge Case: Rapid hover/unhover glitch

Answer:

Smooth values use ‡§ï‡§∞‡•á‡§Ç

Optional: will-change: transform

Q10. Sequential animation on multiple elements

Use transition-delay per element

.box:nth-child(1){ transition-delay: 0s; }
.box:nth-child(2){ transition-delay: 0.2s; }