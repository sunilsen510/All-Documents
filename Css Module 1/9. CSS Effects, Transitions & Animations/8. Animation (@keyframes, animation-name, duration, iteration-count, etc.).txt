Animation (@keyframes, animation-name, duration, iteration-count, etc.) explains in details in Hindi with examples and different- different conditions and what, why, when, where and how to use it and also give me interview question and answers to related this topics

‡§†‡•Ä‡§ï ‡§π‡•à ‡§≠‡§æ‡§à, ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç CSS Animation ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç, step by step, ‡§∏‡§Æ‡§ù‡§æ‡§ä‡§Å‡§ó‡§æ, ‡§§‡§æ‡§ï‡§ø ‡§Ü‡§™‡§ï‡•ã ‡§Ø‡§π ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π clear ‡§π‡•ã ‡§ú‡§æ‡§è ‡§ï‡§ø ‡§ï‡§¨, ‡§ï‡•ç‡§Ø‡§æ, ‡§ï‡•ç‡§Ø‡•ã‡§Ç, ‡§ï‡•à‡§∏‡•á ‡§î‡§∞ ‡§ï‡§π‡§æ‡§Å use ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§ ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç examples, conditions ‡§î‡§∞ interview Q/A ‡§≠‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§

1Ô∏è‚É£ CSS Animation ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ:

CSS Animation element ‡§ï‡•Ä style properties ‡§ï‡•ã ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§§‡§ï‡§®‡•Ä‡§ï ‡§π‡•à‡•§

Transition ‡§∏‡§ø‡§∞‡•ç‡§´ state change ‡§™‡§∞ work ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® Animation keyframes ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è continuous ‡§Ø‡§æ looping motion create ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

Basic Syntax:

.element {
  animation-name: slide;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes slide {
  0% { transform: translateX(0); }
  50% { transform: translateX(100px); }
  100% { transform: translateX(0); }
}


Explanation:

Element 0 ‚Üí 100px ‚Üí 0 position ‡§Æ‡•á‡§Ç continuously move ‡§π‡•ã‡§ó‡§æ

animation-iteration-count: infinite ‚Üí loop ‡§ö‡§≤‡§§‡§æ ‡§∞‡§π‡•á‡§ó‡§æ

2Ô∏è‚É£ Key Animation Properties Explained
1. @keyframes

Animation ‡§ï‡§æ main structure ‡§π‡•à

Define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡§ø‡§∏ frame ‡§™‡§∞ ‡§ï‡•å‡§®‡§∏‡•Ä property value ‡§π‡•ã‡§ó‡•Ä

Syntax:

@keyframes animation-name {
  0% { property: value; }
  50% { property: value; }
  100% { property: value; }
}


Example:

@keyframes move {
  0% { transform: translateX(0); }
  100% { transform: translateX(200px); }
}

2. animation-name

‡§ï‡§ø‡§∏ keyframes ‡§ï‡•ã apply ‡§ï‡§∞‡§®‡§æ ‡§π‡•à

.box { animation-name: move; }

3. animation-duration

Animation complete ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§Ø

.box { animation-duration: 2s; }

4. animation-timing-function

Motion curve define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values: linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier()

.box { animation-timing-function: ease-in-out; }

5. animation-delay

Animation ‡§ï‡§¨ start ‡§π‡•ã‡§ó‡§æ

.box { animation-delay: 1s; }

6. animation-iteration-count

Animation ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§ö‡§≤‡•á‡§ó‡§æ

Values: number or infinite

.box { animation-iteration-count: infinite; }

7. animation-direction

Animation direction define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values: normal, reverse, alternate, alternate-reverse

.box { animation-direction: alternate; }


Example: left ‚Üí right ‚Üí left repeat

8. animation-fill-mode

Animation end ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ element ‡§ï‡•Ä state

Values: none, forwards, backwards, both

.box { animation-fill-mode: forwards; }


Animation end ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ last frame maintain ‡§π‡•ã‡§ó‡§æ

9. animation-play-state

Pause ‡§Ø‡§æ running

Values: running, paused

.box { animation-play-state: paused; }

3Ô∏è‚É£ Example ‚Äì Full Animation
.box {
  width: 100px; height: 100px; background: red;
  animation-name: slide;
  animation-duration: 3s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

@keyframes slide {
  0% { transform: translateX(0); background: red; }
  50% { transform: translateX(200px); background: blue; }
  100% { transform: translateX(0); background: green; }
}


Element continuously left ‚Üí right ‚Üí left move ‡§π‡•ã‡§ó‡§æ

Color ‡§≠‡•Ä change ‡§π‡•ã‡§ó‡§æ

4Ô∏è‚É£ Different Conditions / Use Cases
Condition 1: Hover trigger animation
.box:hover {
  animation-name: jump;
  animation-duration: 0.5s;
}
@keyframes jump {
  0% { transform: translateY(0); }
  50% { transform: translateY(-50px); }
  100% { transform: translateY(0); }
}

Condition 2: Delay + Stagger multiple elements
.box:nth-child(1) { animation-delay: 0s; }
.box:nth-child(2) { animation-delay: 0.2s; }

Condition 3: Infinite animation
.loader {
  animation-name: spin;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}
@keyframes spin { 0%{transform:rotate(0);}100%{transform:rotate(360deg);} }

Condition 4: Pause / Resume animation
.box:hover { animation-play-state: paused; }

5Ô∏è‚É£ Performance Tips

GPU accelerated properties use ‡§ï‡§∞‡•á‡§Ç ‚Üí transform, opacity

Avoid layout-changing properties ‚Üí width, height, margin

Animation continuous loop ‚Üí will-change: transform optimize ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à

Multiple elements stagger animation ‚Üí smoother performance

6Ô∏è‚É£ Accessibility

Motion-sensitive users ‡§ï‡•á ‡§≤‡§ø‡§è slow ‡§Ø‡§æ reduced motion option

@media (prefers-reduced-motion: reduce){
  * { animation: none !important; }
}

7Ô∏è‚É£ Advanced / Mastery Level Interview Questions (‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç)
Q1. Transition ‡§î‡§∞ Animation ‡§Æ‡•á‡§Ç ‡§´‡§∞‡•ç‡§ï ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

Answer:

Transition ‚Üí state change (hover, focus, JS)

Animation ‚Üí keyframes ‚Üí continuous ‡§Ø‡§æ repeated animation

Q2. animation-iteration-count infinite ‡§î‡§∞ number value ‡§ï‡§æ ‡§´‡§∞‡•ç‡§ï

Answer:

infinite ‚Üí loop continuous

number ‚Üí fixed times

Q3. animation-direction alternate ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

Answer:

Forward ‚Üí backward repeat effect

Natural oscillation animation

Q4. animation-fill-mode forwards/backwards ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§π‡•ã‡§§‡§æ ‡§π‡•à?

Answer:

Forwards ‚Üí animation end ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ last frame maintain

Backwards ‚Üí delay ‡§Æ‡•á‡§Ç initial frame apply

Q5. Multiple animations single element ‡§™‡§∞ ‡§ï‡•à‡§∏‡•á apply ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?
.box {
  animation: slide 2s linear infinite, colorChange 3s ease-in-out infinite;
}
@keyframes colorChange { 0%{background:red;}100%{background:blue;} }

Q6. Performance optimized animation logic

Transform + opacity ‚Üí GPU accelerated

Width/height/margin ‚Üí layout repaint ‚Üí slow

Q7. Hover + animation delay + iteration-count combine
.box:hover {
  animation-name: jump;
  animation-duration: 0.5s;
  animation-iteration-count: 2;
  animation-delay: 0.2s;
}

Q8. JS trigger animation logic
element.classList.add('animate');


CSS ‡§Æ‡•á‡§Ç .animate { animation-name: slide; ... } define ‡§π‡•ã‡§ó‡§æ

Browser automatically smoothly animate ‡§ï‡§∞‡•á‡§ó‡§æ

Q9. Sequential animation on multiple elements

Use animation-delay per element

Staggered effect without JS

Q10. Edge case: animation glitch on rapid hover/unhover

Answer:

Smooth values, optional animation-fill-mode: forwards, will-change: transform

Avoid abrupt large value jumps

‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§Ö‡§ó‡§≤‡§æ part ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç:

üé® ‚Äú10 Practical Projects Using CSS Animation (@keyframes, animation-name, duration, iteration-count, delay, direction, fill-mode) + Hover + JS trigger + Stagger + Logic-based effects‚Äù

Full HTML/CSS/JS code

Performance notes

Interview talking points

‡§Ø‡•á Advanced / Mastery Level ‡§ï‡•á ‡§≤‡§ø‡§è ‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤ perfect ‡§π‡•ã‡§ó‡§æ‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã practical projects ‡§µ‡§æ‡§≤‡§æ part ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?



‡§Ö‡§∞‡•á ‡§≠‡§æ‡§à, ‡§∏‡§Æ‡§ù ‡§ó‡§Ø‡§æ! üòÖ ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç ‡§™‡•Ç‡§∞‡•Ä ‡§ö‡•Ä‡§ú‡§º ‡§¨‡§π‡•Å‡§§ ‡§π‡•Ä ‡§Ü‡§∏‡§æ‡§®, step-by-step ‡§î‡§∞ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§æ‡§ä‡§Å‡§ó‡§æ ‡§§‡§æ‡§ï‡§ø ‡§Ü‡§™ ‡§è‡§ï ‡§¨‡§æ‡§∞ ‡§Æ‡•á‡§Ç ‡§∏‡§¨ ‡§∏‡§Æ‡§ù ‡§ú‡§æ‡§è‡§Å‡•§ ‡§π‡§Æ ‡§¨‡§æ‡§§ ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á:

CSS Effects, Transitions & Animations

Opacity & Visibility

Box-shadow / Text-shadow

Transform (translate, rotate, scale, skew)

Transition (property, duration, timing-function, delay)

Animation (@keyframes, duration, iteration, etc.)

‡§Æ‡•à‡§Ç ‡§á‡§∏‡•á ‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤ practical, examples ‡§ï‡•á ‡§∏‡§æ‡§• ‡§î‡§∞ ‡§ï‡§¨-‡§ï‡•à‡§∏‡•á-use ‡§ï‡§∞‡•á‡§Ç style ‡§Æ‡•á‡§Ç explain ‡§ï‡§∞‡•Ç‡§Å‡§ó‡§æ‡•§

1Ô∏è‚É£ CSS Effects, Transitions & Animations

CSS Effects:

Web element ‡§ï‡•ã visually attractive ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

Examples: hover effect, gradient, shadow, filter, blur, glow‡•§

Transition:

‡§ú‡§¨ ‡§ï‡•ã‡§à property change ‡§π‡•ã‡§§‡•Ä ‡§π‡•à (hover, focus, class change) ‡§§‡•ã transition ‡§â‡§∏‡•á smoothly animate ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Example:

.box {
  width: 100px;
  background: red;
  transition: width 0.5s ease;
}
.box:hover {
  width: 200px;
}


Logic: Hover ‚Üí width gradually 100 ‚Üí 200

Animation:

Keyframes ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§∏‡•á continuous ‡§Ø‡§æ repeated motion create ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

@keyframes move {
  0% { transform: translateX(0); }
  100% { transform: translateX(200px); }
}
.box {
  animation-name: move;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}


Logic: element 0 ‚Üí 200px ‚Üí 0 repeat

2Ô∏è‚É£ Opacity & Visibility

Opacity: element ‡§ï‡•Ä transparency control ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

.box { opacity: 1; }
.box:hover { opacity: 0.5; }


Visibility: element ‡§¶‡§ø‡§ñ‡•á ‡§Ø‡§æ ‡§®‡§æ ‡§¶‡§ø‡§ñ‡•á

.box { visibility: visible; }
.box.hidden { visibility: hidden; }


Difference:

opacity: 0 ‚Üí element hidden ‡§®‡§π‡•Ä‡§Ç ‡§π‡•ã‡§§‡§æ, space ‡§∞‡§π‡§§‡§æ ‡§π‡•à

visibility: hidden ‚Üí element disappear + space occupied

Logic in Animation: hover fade effect ‚Üí opacity best

3Ô∏è‚É£ Box-shadow / Text-shadow

Box-shadow: element ‡§ï‡•á ‡§ö‡§æ‡§∞‡•ã‡§Ç ‡§ì‡§∞ shadow add ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

.box {
  box-shadow: 5px 5px 10px rgba(0,0,0,0.5);
}


Text-shadow: text ‡§ï‡•ã shadow ‡§¶‡•á‡§§‡§æ ‡§π‡•à

h1 {
  text-shadow: 2px 2px 5px rgba(0,0,0,0.7);
}


Logic: Depth, 3D feel, hover highlight

4Ô∏è‚É£ Transform (translate, rotate, scale, skew)

Translate ‚Üí move element X/Y

Rotate ‚Üí element rotate

Scale ‚Üí size change

Skew ‚Üí element tilt

Example:

.box {
  transition: transform 0.5s;
}
.box:hover {
  transform: translateX(50px) rotate(20deg) scale(1.2) skewX(10deg);
}


Logic: Animate element on hover ‚Üí visually attractive

5Ô∏è‚É£ Transition (property, duration, timing-function, delay)

Property: ‡§ï‡•å‡§® ‡§∏‡•Ä property animate ‡§π‡•ã‡§ó‡•Ä
Duration: time length
Timing-function: speed curve
Delay: animation ‡§ï‡§¨ start ‡§π‡•ã‡§ó‡§æ

Example:

.box {
  width: 100px;
  transition: width 0.5s ease 0.2s;
}
.box:hover { width: 200px; }


Logic: 0.2s delay ‚Üí width smoothly 100 ‚Üí 200 over 0.5s

6Ô∏è‚É£ Animation (@keyframes, duration, iteration-count, etc.)

Keyframes: define steps
Duration: total time
Iteration-count: ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ repeat ‡§π‡•ã‡§ó‡§æ
Direction: normal / reverse / alternate

Example:

@keyframes slide {
  0% { transform: translateX(0); }
  50% { transform: translateX(200px); }
  100% { transform: translateX(0); }
}
.box {
  animation-name: slide;
  animation-duration: 2s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}


Logic: Left ‚Üí Right ‚Üí Left continuously, color ‡§Ø‡§æ size ‡§≠‡•Ä animate ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

üîë Key Takeaways (Logic ‡§∏‡§Æ‡§ù‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è)

Transition: hover/class/state change ‚Üí smooth motion

Animation: repeatable / continuous motion ‚Üí keyframes

Opacity vs Visibility: fade vs hide

Shadow: depth + highlight

Transform: move, rotate, scale, tilt ‚Üí hover effects

Performance: animate GPU accelerated properties ‚Üí transform + opacity

Delay/Direction/Iteration: control timing & sequence

‚úÖ Next Step

‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§è‡§ï‡§¶‡§Æ practical ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§¶‡§ø‡§ñ‡§æ‡§ä‡§Å:

‚Äú10 Projects ‚Äì Hover + Transform + Transition + Animation + Shadow + Opacity Effects‚Äù

Full code (HTML/CSS)

Step by step logic explain

Advanced tips & interview points

‡§Ø‡•á ‡§¶‡•á‡§ñ‡§ï‡§∞ ‡§Ü‡§™‡§ï‡•ã ‡§∏‡§¨ topics ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∏‡§Æ‡§ù ‡§Ü ‡§ú‡§æ‡§è‡§Ç‡§ó‡•á‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã practical projects ‡§µ‡§æ‡§≤‡§æ part ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?


‡§†‡•Ä‡§ï ‡§π‡•à ‡§≠‡§æ‡§à! ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç CSS Effects, Transitions, Animations, Opacity, Shadow, Transform ‡§∏‡•á ‡§ú‡•Å‡§°‡§º‡•á Advanced ‚Üí Mastery Level Interview Questions & Answers ‡§¨‡§®‡§æ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Å, ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π logic-based, situation-based ‡§î‡§∞ condition-based‡•§

üß† Advanced / Mastery CSS Interview Q&A
1Ô∏è‚É£ CSS Effects / Shadow / Opacity / Visibility

Q1. Box-shadow ‡§î‡§∞ Text-shadow ‡§Æ‡•á‡§Ç performance difference ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
Answer:

Box-shadow ‚Üí layout redraw ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‚Üí performance impact

Text-shadow ‚Üí mostly GPU accelerated ‚Üí smoother

Logic: Heavy blur ‚Üí repaint expensive ‚Üí subtle shadows preferred

Q2. Opacity 0 ‡§î‡§∞ visibility hidden ‡§Æ‡•á‡§Ç difference?
Answer:

Opacity 0 ‚Üí element transparent, space remain

Visibility hidden ‚Üí element invisible, space remain

Display:none ‚Üí element invisible, space gone

Condition-based: Fade hover ‚Üí use opacity, completely hide ‚Üí visibility/display

Q3. Multiple shadows combine ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?

box-shadow: 2px 2px 5px rgba(0,0,0,0.5), -2px -2px 5px rgba(0,0,0,0.3);


Logic: multiple layers ‚Üí depth illusion

Q4. Situation: Hover + shadow + transition glitch
Answer:

Use transition: box-shadow 0.3s ease

Large sudden changes ‚Üí avoid ‚Üí smooth small values

2Ô∏è‚É£ Transform (translate, rotate, scale, skew)

Q5. Transform order matter ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?
Answer:

Matrix multiplication ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‚Üí translate ‚Üí rotate ‚Üí scale ‚Üí skew sequence affects final visual

Q6. Hover scale + rotate + skew combined glitch
Answer:

Skew exaggerates ‚Üí apply last

Sequence example: translate ‚Üí scale ‚Üí rotate ‚Üí skew

Q7. 3D transform + perspective + backface-visibility logic
Answer:

Parent ‚Üí perspective

Child ‚Üí transform-style: preserve-3d

Backface hidden ‚Üí backside hide

Q8. Mobile friendly transform design logic

Touch devices ‚Üí no hover ‚Üí subtle transform

Media queries ‚Üí responsive scaling

3Ô∏è‚É£ Transition (property, duration, timing-function, delay)

Q9. Why avoid width/height in transition?
Answer:

Layout repaint triggers ‚Üí CPU heavy

Use transform: scale/translate ‚Üí GPU accelerated

Q10. Multiple properties different duration & delay

transition: width 0.5s ease, height 1s linear 0.2s, background 0.3s ease-in 0.1s;


Logic: Each property ‚Üí own timing ‚Üí stagger effect

Q11. Rapid hover/unhover glitch
Answer:

Smooth values + will-change: property

Optional: throttle JS triggers

Q12. Condition-based: Responsive duration

@media(max-width:768px){ .box { transition-duration:0.2s; } }

4Ô∏è‚É£ Animation (@keyframes, duration, iteration, direction, fill-mode)

Q13. Transition vs Animation difference?
Answer:

Transition ‚Üí state change only

Animation ‚Üí keyframes ‚Üí continuous/looping

Q14. animation-direction alternate ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡•á‡§Ç?
Answer:

Forward ‚Üí backward repeat ‚Üí natural oscillation

Q15. animation-fill-mode forwards/backwards

Forwards ‚Üí last frame retain

Backwards ‚Üí delay phase initial frame apply

Q16. Multiple animations single element

animation: slide 2s linear infinite, colorChange 3s ease-in-out infinite;


Logic: combine multiple visual effects

Q17. Performance optimized animation

Animate GPU properties ‚Üí transform + opacity

Avoid layout-changing properties ‚Üí width/height/margin

Q18. JS trigger animation

element.classList.add('animate');

.animate { animation-name: slide; animation-duration: 1s; }


Browser smoothly interpolates

Q19. Sequential animation multiple elements

Use animation-delay per element

Stagger without JS ‚Üí better performance

Q20. Edge case: Hover + delay + rapid interaction glitch
Answer:

Use smooth value changes, animation-fill-mode forwards, will-change transform

Avoid abrupt large jumps

‚úÖ Logic Summary

Shadow: depth + highlight, subtle for performance

Opacity vs Visibility: fade vs hide

Transform: order matters ‚Üí translate ‚Üí scale ‚Üí rotate ‚Üí skew

Transition: GPU properties ‚Üí smooth motion

Animation: Keyframes ‚Üí loop / continuous / multiple properties

Performance: transform + opacity, stagger, avoid layout changes

Mobile/Responsive: subtle effects, adjust duration/delay


1Ô∏è‚É£ CSS Animation ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ:

CSS Animation element ‡§ï‡•Ä style properties ‡§ï‡•ã ‡§∏‡§Æ‡§Ø ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•Ä ‡§§‡§ï‡§®‡•Ä‡§ï ‡§π‡•à‡•§

Transition ‡§∏‡§ø‡§∞‡•ç‡§´ state change ‡§™‡§∞ work ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® Animation keyframes ‡§ï‡•á ‡§ú‡§º‡§∞‡§ø‡§è continuous ‡§Ø‡§æ looping motion create ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

Basic Syntax:

.element {
  animation-name: slide;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}

@keyframes slide {
  0% { transform: translateX(0); }
  100% { transform: translateX(200px); }
}


Logic:

Element 0 ‚Üí 200px ‚Üí 0 continuously move ‡§π‡•ã‡§ó‡§æ

infinite ‚Üí loop ‡§ö‡§≤‡§§‡§æ ‡§∞‡§π‡•á‡§ó‡§æ

2Ô∏è‚É£ Important Animation Properties
1. @keyframes

Animation ‡§ï‡§æ main structure ‡§π‡•à

Define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ï‡•å‡§®‡§∏‡•Ä frame ‡§™‡§∞ ‡§ï‡•å‡§®‡§∏‡•Ä property value ‡§π‡•ã‡§ó‡•Ä

@keyframes move {
  0% { transform: translateX(0); }
  50% { transform: translateX(100px); }
  100% { transform: translateX(0); }
}

2. animation-name

‡§ï‡§ø‡§∏ keyframes ‡§ï‡•ã apply ‡§ï‡§∞‡§®‡§æ ‡§π‡•à

.box { animation-name: move; }

3. animation-duration

Animation complete ‡§π‡•ã‡§®‡•á ‡§Æ‡•á‡§Ç ‡§ï‡§ø‡§§‡§®‡§æ time ‡§≤‡§ó‡•á‡§ó‡§æ

.box { animation-duration: 2s; }

4. animation-timing-function

Motion curve define ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values: linear, ease, ease-in, ease-out, ease-in-out, cubic-bezier()

.box { animation-timing-function: ease-in-out; }

5. animation-delay

Animation ‡§ï‡§¨ start ‡§π‡•ã‡§ó‡§æ

.box { animation-delay: 1s; }

6. animation-iteration-count

Animation ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§ö‡§≤‡•á‡§ó‡§æ

.box { animation-iteration-count: infinite; }  /* infinite loop */

7. animation-direction

Animation ‡§ï‡§æ direction control ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Values: normal, reverse, alternate, alternate-reverse

.box { animation-direction: alternate; }  


Example: left ‚Üí right ‚Üí left repeat

8. animation-fill-mode

Animation end ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ element ‡§ï‡•Ä state

Values: none, forwards, backwards, both

.box { animation-fill-mode: forwards; }

9. animation-play-state

Pause ‡§Ø‡§æ running

.box { animation-play-state: paused; }

3Ô∏è‚É£ Full Animation Example
.box {
  width: 100px;
  height: 100px;
  background: red;
  animation-name: slide;
  animation-duration: 3s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  animation-direction: alternate;
}

@keyframes slide {
  0% { transform: translateX(0); background: red; }
  50% { transform: translateX(200px); background: blue; }
  100% { transform: translateX(0); background: green; }
}


Logic:

Element left ‚Üí right ‚Üí left continuously move ‡§π‡•ã‡§ó‡§æ

Color ‡§≠‡•Ä change ‡§π‡•ã‡§ó‡§æ

Direction alternate ‚Üí smooth back and forth motion

4Ô∏è‚É£ Use Cases / Conditions

Hover Trigger Animation

.box:hover {
  animation-name: jump;
  animation-duration: 0.5s;
}
@keyframes jump {
  0% { transform: translateY(0); }
  50% { transform: translateY(-50px); }
  100% { transform: translateY(0); }
}


Delay + Stagger multiple elements

.box:nth-child(1) { animation-delay: 0s; }
.box:nth-child(2) { animation-delay: 0.2s; }


Infinite animation

.loader {
  animation-name: spin;
  animation-duration: 2s;
  animation-iteration-count: infinite;
}
@keyframes spin { 0%{transform:rotate(0);}100%{transform:rotate(360deg);} }


Pause / Resume animation

.box:hover { animation-play-state: paused; }

5Ô∏è‚É£ Advanced / Mastery Level Interview Questions (‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç)

Q1. Transition ‡§î‡§∞ Animation ‡§Æ‡•á‡§Ç difference?
Answer:

Transition ‚Üí state change ‡§™‡§∞ work ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (hover/focus/class toggle)

Animation ‚Üí keyframes ‚Üí continuous / repeatable motion

Q2. animation-iteration-count infinite ‡§î‡§∞ number value ‡§ï‡§æ difference
Answer:

infinite ‚Üí continuous loop

Number ‚Üí fixed times

Q3. animation-direction alternate ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡•á‡§Ç?
Answer:

Forward ‚Üí backward repeat ‚Üí natural oscillation effect

Q4. animation-fill-mode forwards/backwards ‡§ï‡§¨ use ‡§π‡•ã‡§§‡§æ ‡§π‡•à?
Answer:

Forwards ‚Üí last frame retain after animation ends

Backwards ‚Üí delay period ‡§Æ‡•á‡§Ç initial frame apply

Q5. Multiple animations single element ‡§™‡§∞ ‡§ï‡•à‡§∏‡•á apply ‡§ï‡§∞‡•á‡§Ç?

.box {
  animation: slide 2s linear infinite, colorChange 3s ease-in-out infinite;
}
@keyframes colorChange { 0%{background:red;}100%{background:blue;} }


Q6. Performance optimized animation

Animate GPU accelerated properties ‚Üí transform + opacity

Avoid width/height/margin ‚Üí repaint heavy

Q7. Hover + animation delay + iteration-count combine example

.box:hover {
  animation-name: jump;
  animation-duration: 0.5s;
  animation-iteration-count: 2;
  animation-delay: 0.2s;
}


Q8. JS trigger animation

element.classList.add('animate');

.animate { animation-name: slide; animation-duration: 1s; }


Browser automatically smoothly animates

Q9. Sequential animation on multiple elements

Use animation-delay per element ‚Üí staggered effect without JS

Q10. Edge case: rapid hover/unhover glitch
Answer:

Smooth value changes

animation-fill-mode: forwards

Optional: will-change: transform

6Ô∏è‚É£ Logic Summary

Animation ‚Üí repeatable, keyframes-based motion

Direction + Fill-mode ‚Üí control back/forth & final state

Delay + Iteration-count ‚Üí stagger + loop

Performance ‚Üí transform + opacity best

JS + Hover trigger ‚Üí class toggle ‚Üí smooth animation


‡§†‡•Ä‡§ï ‡§π‡•à ‡§≠‡§æ‡§à, ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç CSS Animation (@keyframes, animation-name, duration, iteration-count, etc.) ‡§ï‡•á ‡§≤‡§ø‡§è Advanced ‚Üí Mastery Level Q/A ‡§î‡§∞ situation / condition / logic-based questions ‡§î‡§∞ ‡§â‡§®‡§ï‡•á detailed answers ‡§¶‡•Ç‡§Å‡§ó‡§æ‡•§

üß† Advanced / Mastery Level CSS Animation Interview Q&A
1Ô∏è‚É£ General Logic-Based Questions

Q1. Transition ‡§î‡§∞ Animation ‡§Æ‡•á‡§Ç fundamental difference ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
Answer:

Transition ‚Üí state change ‡§™‡§∞ trigger ‡§π‡•ã‡§§‡§æ ‡§π‡•à (hover, focus, class toggle)

Animation ‚Üí keyframes ‡§™‡§∞ continuous motion create ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, loop possible

Logic: simple hover ‚Üí transition; continuous movement ‚Üí animation

Q2. animation-direction ‡§ï‡•á options ‡§ï‡§¨ use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç?
Answer:

normal ‚Üí start ‚Üí end

reverse ‚Üí end ‚Üí start

alternate ‚Üí start ‚Üí end ‚Üí start ‚Üí end‚Ä¶

alternate-reverse ‚Üí end ‚Üí start ‚Üí end ‚Üí start‚Ä¶

Situation: Oscillation effect (ex: bouncing ball) ‚Üí alternate

Q3. animation-fill-mode ‡§ï‡•á options ‡§ï‡§æ logic

none ‚Üí end state revert

forwards ‚Üí last frame retain

backwards ‚Üí initial frame during delay retain

both ‚Üí combine forwards + backwards

Example: Loader animation ‚Üí last frame retain ‚Üí forwards

Q4. animation-timing-function logic

linear ‚Üí constant speed ‚Üí mechanical feel

ease ‚Üí slow start + fast middle + slow end ‚Üí natural feel

cubic-bezier ‚Üí custom curve ‚Üí brand specific motion

Q5. Multiple animations single element ‡§™‡§∞ ‡§ï‡•à‡§∏‡•á combine ‡§ï‡§∞‡•á‡§Ç?

animation: slide 2s linear infinite, colorChange 3s ease-in-out infinite;


Logic: simultaneous effects without JS

2Ô∏è‚É£ Situation-Based Questions

Q6. Hover trigger + animation + delay + iteration

.box:hover {
  animation-name: jump;
  animation-duration: 0.5s;
  animation-iteration-count: 2;
  animation-delay: 0.2s;
}


Logic: Hover ‡§ï‡•á ‡§¨‡§æ‡§¶ delay ‚Üí smooth start ‚Üí 2 times repeat

Q7. Sequential animation on multiple elements

.box:nth-child(1){ animation-delay:0s; }
.box:nth-child(2){ animation-delay:0.2s; }


Logic: stagger effect ‚Üí multiple elements sequentially animate

Q8. JS trigger animation logic

element.classList.add('animate');

.animate { animation-name: slide; animation-duration:1s; }


Browser smoothly animates without manual JS animation

Q9. Mobile / responsive animation considerations

Hover unavailable ‚Üí subtle default animation

Media queries ‚Üí adjust duration, delay

@media(max-width:768px){ .box { animation-duration:0.5s; } }

3Ô∏è‚É£ Condition-Based Questions

Q10. Rapid hover/unhover glitch

Problem: abrupt start ‚Üí stop ‚Üí animation interrupt

Solution: smooth value changes + animation-fill-mode: forwards + will-change: transform

Q11. Performance optimization logic

Animate GPU accelerated properties ‚Üí transform, opacity

Avoid width/height/margin ‚Üí layout repaint ‚Üí slow performance

Multiple elements ‚Üí stagger delays instead of simultaneous animation

Q12. Infinite loop vs finite iterations

Infinite ‚Üí loader, spinner, background effects

Finite ‚Üí hover effects, attention animation (ex: bounce 2 times)

Q13. Backwards delay logic

animation-fill-mode: backwards ‚Üí animation delayÊúüÈó¥ initial frame apply

Useful: Sequential animation delay + visual consistency

Q14. Complex motion curve logic

animation-timing-function: cubic-bezier(0.25,0.1,0.25,1)

Logic: control speed start, middle, end ‚Üí brand-specific feel

Q15. Multiple keyframes for one animation

@keyframes bounceColor {
  0% { transform: translateY(0); background:red; }
  50% { transform: translateY(-50px); background:blue; }
  100% { transform: translateY(0); background:green; }
}


Logic: combine position + color ‚Üí richer animation

Q16. Combining transition + animation

Transition ‚Üí hover smooth change

Animation ‚Üí continuous motion

Example: hover color change + continuous bouncing element

Q17. Accessibility considerations

Motion-sensitive users ‚Üí prefers-reduced-motion

@media (prefers-reduced-motion: reduce){ * { animation: none !important; } }


Q18. Transform order impact in animation

transform: translateX(50px) scale(1.2) rotate(20deg);


Logic: matrix multiplication ‚Üí order affects final visual ‚Üí always test sequence

Q19. Staggered multi-property animation

animation: moveX 1s ease 0s, colorChange 1s ease 0.2s;


Logic: each property has independent timing ‚Üí sophisticated effect

Q20. Edge case: large abrupt value changes

Solution: break into smaller steps in keyframes ‚Üí smooth interpolation