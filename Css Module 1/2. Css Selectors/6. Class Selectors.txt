
Class Selector .classname     explains in details with examples and why when where and how to use it.


‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤ ‚Äî ‡§ö‡§≤‡§ø‡§è Class Selector (.classname) ‡§ï‡•ã ‡§∏‡§æ‡§´‡§º, ‡§∏‡§∞‡§≤ ‡§î‡§∞ ‡§ó‡§π‡§∞‡§æ‡§à ‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç ‚Äî ‡§ú‡§π‡§æ‡§Å ‡§§‡§ï ‡§ú‡§º‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã ‡§â‡§¶‡§æ‡§π‡§∞‡§£, best-practices ‡§î‡§∞ ‡§õ‡•ã‡§ü‡•Ä-‡§õ‡•ã‡§ü‡•Ä tips ‡§≠‡•Ä ‡§¶‡•Ç‡§Å‡§ó‡§æ‡•§

üîµ Class Selector ( .classname ) ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

Class Selector CSS ‡§ï‡§æ ‡§è‡§ï selector ‡§π‡•à ‡§ú‡•ã ‡§â‡§® HTML elements ‡§ï‡•ã target ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§ú‡§ø‡§®‡§ï‡•á class attribute ‡§Æ‡•á‡§Ç ‡§¶‡§ø‡§è ‡§®‡§æ‡§Æ ‡§Æ‡§ø‡§≤‡§§‡•á ‡§π‡•à‡§Ç‡•§
Syntax: .classname { property: value; }

‡§â‡§¶‡§æ‡§π‡§∞‡§£: .card { padding: 16px; } ‚Äî ‡§Ø‡§π ‡§∏‡§≠‡•Ä elements ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç class="card" ‡§π‡•ã‡§ó‡§æ, ‡§â‡§®‡§™‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§ó‡§æ‡•§

‚úÖ ‡§ï‡•ç‡§Ø‡•ã‡§Ç (Why) use ‡§ï‡§∞‡•á‡§Ç?

Reusable styles: ‡§è‡§ï class ‡§ï‡•ã ‡§ï‡§à elements ‡§™‡§∞ reuse ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

Low coupling: HTML structure ‡§¨‡§¶‡§≤‡§®‡•á ‡§™‡§∞ ‡§≠‡•Ä styling ‡§¨‡§∞‡•ò‡§∞‡§æ‡§∞ ‡§∞‡§ñ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

Better maintainability: style rules ‡§ï‡•ã logical components/roles ‡§Æ‡•á‡§Ç ‡§¨‡§æ‡§Å‡§ü‡§®‡§æ ‡§Ü‡§∏‡§æ‡§® ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Higher specificity than element selectors: element selector (p) ‡§∏‡•á override ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à ‡§≤‡•á‡§ï‡§ø‡§® id ‡§∏‡•á ‡§®‡§π‡•Ä‡§Ç (ID higher specificity).

üìç ‡§ï‡§π‡§æ‡§Å/‡§ï‡§¨ (Where & When) use ‡§ï‡§∞‡•á‡§Ç?

‡§ú‡§¨ ‡§ï‡§ø‡§∏‡•Ä styling ‡§ï‡•ã ‡§ï‡§à ‡§ú‡§ó‡§π reuse ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã (buttons, cards, alerts)‡•§

‡§ú‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•ã state-based (e.g., .is-active, .hidden) style ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã‡•§

Component-based design ‡§Æ‡•á‡§Ç ‚Äî ‡§π‡§∞ component ‡§ï‡•ã class ‡§¶‡•á‡§ï‡§∞ style ‡§¶‡•á‡§Ç‡•§

Avoid: ‡§∏‡§ø‡§∞‡•ç‡§´ presentational purposes ‡§ï‡•á ‡§≤‡§ø‡§è semantic name ‡§® ‡§¶‡•á‡§Ç (e.g., .red vs .error-message ‚Äî semantic ‡§¨‡•á‡§π‡§§‡§∞ ‡§π‡•à)‡•§

üõ†Ô∏è ‡§ï‡•à‡§∏‡•á (How) use ‡§ï‡§∞‡•á‡§Ç ‚Äî Examples
1) Basic usage

HTML:

<button class="btn">Click</button>


CSS:

.btn {
  padding: 10px 18px;
  border-radius: 6px;
  background: #007bff;
  color: white;
  border: none;
  cursor: pointer;
}

2) Multiple classes on one element (common pattern)

HTML:

<button class="btn primary large">Save</button>


CSS:

.btn { padding: 8px 12px; border-radius:4px; }
.primary { background: #007bff; color: white; }
.large { padding: 12px 20px; font-size: 18px; }


‚û°Ô∏è .btn.primary.large ‡§Æ‡•á‡§Ç ‡§π‡§∞ class ‡§Ö‡§™‡§®‡•Ä responsibility ‡§∞‡§ñ‡§§‡•Ä ‡§π‡•à ‚Äî reusability ‡§¨‡•ù‡§§‡•Ä ‡§π‡•à.

3) Component + modifier pattern (BEM-like)

HTML:

<div class="card card--featured">
  <h3 class="card__title">Title</h3>
</div>


CSS:

.card { padding: 16px; background: #fff; border-radius:8px; }
.card--featured { border: 2px solid gold; }
.card__title { margin: 0 0 8px; font-size: 20px; }


‚û°Ô∏è BEM style ‡§∏‡•á readability ‡§î‡§∞ scaling ‡§Ü‡§∏‡§æ‡§® ‡§π‡•ã‡§§‡•Ä ‡§π‡•à.

4) Combined selectors (scoped styling)
.card .card__title { color: #333; }      /* title inside .card */
.nav .btn { margin-right: 8px; }         /* .btn when inside .nav */

5) State classes & JS toggling

HTML:

<button class="btn" id="menuBtn">Menu</button>


JS:

const btn = document.getElementById('menuBtn');
btn.classList.toggle('is-open'); // adds/removes .is-open


CSS:

.btn.is-open { background: #333; color: white; }

üìê Specificity (‡§ï‡§ø‡§∏‡§ï‡§æ weight ‡§ï‡§ø‡§§‡§®‡§æ?)

Element selector (e.g., p) ‚Äî lowest specificity

Class selector (.class) ‚Äî medium

ID selector (#id) ‚Äî higher

Inline styles ‚Äî highest

‡§Æ‡§§‡§≤‡§¨: ‡§Ö‡§ó‡§∞ ‡§¶‡•ã‡§®‡•ã‡§Ç conflicting rules ‡§π‡•ã‡§Ç ‚Äî .btn { color: red } ‡§î‡§∞ button { color: blue } ‚Äî .btn ‡§ö‡§≤‡•á‡§ó‡§æ ‡§ï‡•ç‡§Ø‡•ã‡§Ç‡§ï‡§ø class ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ specific ‡§π‡•à‡•§

‚ö†Ô∏è Best Practices / Tips

Semantic names ‡§∞‡§ñ‡•ã: .error, .nav-item ‚Äî ‡§® ‡§ï‡§ø .red, .big (presentational)‡•§

Reusability ‡§™‡§∞ ‡§ú‡•ã‡§∞: ‡§õ‡•ã‡§ü‡•á, single-responsibility classes ‡§¨‡§®‡§æ‡§ì (utility classes) + component classes‡•§

Avoid over-qualifying: ‡§≤‡§ø‡§ñ‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡•ã div.card ‡§Ö‡§ó‡§∞ ‡§∏‡§ø‡§∞‡•ç‡§´ .card ‡§ï‡§æ‡§´‡•Ä ‡§π‡•à ‚Äî unnecessary specificity avoid ‡§ï‡§∞‡•ã‡•§

Prefer composition over deep nesting: .card .title ‡§Ö‡§ö‡•ç‡§õ‡•á ‡§π‡•à‡§Ç, ‡§™‡§∞ ‡§¨‡§π‡•Å‡§§ deep nested selectors (e.g., .a .b .c .d) ‡§∏‡•á performance ‡§î‡§∞ maintainability ‡§ñ‡§∞‡§æ‡§¨ ‡§π‡•ã‡§§‡•Ä ‡§π‡•à.

BEM ‡§Ø‡§æ similar convention ‡§Ö‡§™‡§®‡§æ‡§ì ‡§Ö‡§ó‡§∞ project ‡§¨‡§°‡§º‡§æ ‡§π‡•à ‚Äî ‡§Æ‡§¶‡§¶ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à collisions ‡§î‡§∞ ambiguity ‡§∏‡•á ‡§¨‡§ö‡§®‡•á ‡§Æ‡•á‡§Ç‡•§

Use modifiers for states: .btn--disabled, .is-active ‚Äî ‡§∏‡§æ‡§´‡§º ‡§î‡§∞ predictable‡•§

Avoid styling by tag + class unnecessarily ‚Äî .btn ‡§™‡§∞‡•ç‡§Ø‡§æ‡§™‡•ç‡§§ ‡§π‡•à; button.btn ‡§ú‡§º‡•ç‡§Ø‡§æ‡§¶‡§æ specific ‡§π‡•ã‡§®‡•á ‡§∏‡•á override ‡§Æ‡•Å‡§∂‡•ç‡§ï‡§ø‡§≤ ‡§¨‡§® ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

üî¨ Small but practical examples
Example: Alert component

HTML:

<div class="alert alert--success">Saved successfully</div>
<div class="alert alert--error">Something went wrong</div>


CSS:

.alert { padding: 12px; border-radius: 6px; margin: 8px 0; }
.alert--success { background: #e6ffed; color: #0b7a3a; border: 1px solid #bfeac9; }
.alert--error { background: #fff0f0; color: #a51313; border: 1px solid #f0baba; }

Example: Utilities vs Components

Utilities:

.mt-1 { margin-top: 4px; }
.text-center { text-align: center; }
.hidden { display: none; }


Components:

.card { padding:16px; box-shadow: 0 2px 8px rgba(0,0,0,0.06); }


‚û°Ô∏è Utilities quick adjustments ‡§ï‡•á ‡§≤‡§ø‡§è; components structured blocks ‡§ï‡•á ‡§≤‡§ø‡§è‡•§

üëÄ Quick Summary Table
‡§™‡•ç‡§∞‡§∂‡•ç‡§®	‡§ú‡§µ‡§æ‡§¨
Selector	.classname
Selects	‡§∏‡§≠‡•Ä elements ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç ‡§µ‡§π class ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à
Use when	Reusable, component-based, state-based styling
Specificity	Higher than element selectors, lower than IDs
Best practice	Semantic names, composition, BEM, avoid over-qualifying

| ‡§™‡•ç‡§∞‡§∂‡•ç‡§®        | ‡§ú‡§µ‡§æ‡§¨                                                    |
| ------------- | ------------------------------------------------------- |
| Selector      | `.classname`                                            |
| Selects       | ‡§∏‡§≠‡•Ä elements ‡§ú‡§ø‡§®‡§Æ‡•á‡§Ç ‡§µ‡§π class ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§π‡•à                   |
| Use when      | Reusable, component-based, state-based styling          |
| Specificity   | Higher than element selectors, lower than IDs           |
| Best practice | Semantic names, composition, BEM, avoid over-qualifying |
