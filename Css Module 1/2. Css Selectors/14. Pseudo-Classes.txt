‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! üòé
‡§Ö‡§¨ ‡§π‡§Æ CSS Pseudo-Classes ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç detail ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡•á‡§Ç‡§ó‡•á‡•§
‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•ã step by step ‡§¨‡§§‡§æ‡§ä‡§Å‡§ó‡§æ: ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡•ã‡§Ç, ‡§ï‡§¨, ‡§ï‡§π‡§æ‡§Å ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§∏‡§æ‡§• ‡§π‡•Ä ‡§∏‡§≠‡•Ä major pseudo-classes ‡§ï‡•á examples + conditions‡•§

üü¢ Pseudo-Classes ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

Pseudo-classes CSS ‡§Æ‡•á‡§Ç use ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡§Ç ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•á special state ‡§Ø‡§æ position ‡§ï‡•ã target ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
Real class ‡§ï‡•Ä ‡§§‡§∞‡§π ‡§®‡§π‡•Ä‡§Ç, ‡§Ø‡§π element ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§Ø‡§æ behavior ‡§ï‡•ã identify ‡§ï‡§∞‡§§‡•Ä ‡§π‡•à‡•§

Syntax:

selector:pseudo-class {
  property: value;
}

üîπ Major Pseudo-Classes & Use Cases
1Ô∏è‚É£ :hover ‚Üí Mouse Hover State

Meaning:

Element ‡§™‡§∞ mouse pointer hover ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ style apply ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

Example:

<a href="#">Hover over me</a>

a:hover {
  color: red;
  text-decoration: underline;
}


‚úÖ Output:

‡§ú‡§¨ mouse link ‡§™‡§∞ ‡§Ü‡§è‡§ó‡§æ ‚Üí color red ‡§î‡§∞ underline ‡§≤‡§ó‡•á‡§ó‡§æ

Use Cases:

Buttons, links, images hover effect

Interactive UI

2Ô∏è‚É£ :focus ‚Üí Focused State (Input/Elements)

Meaning:

Element ‡§™‡§∞ focus ‡§π‡•ã‡§®‡•á ‡§™‡§∞ style apply ‡§π‡•ã‡§§‡•Ä ‡§π‡•à (‡§ú‡•à‡§∏‡•á input field ‡§Æ‡•á‡§Ç cursor)‡•§

Example:

<input type="text" placeholder="Enter name">

input:focus {
  border: 2px solid green;
  outline: none;
}


‚úÖ Output:

Input select ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ border green ‡§π‡•ã ‡§ú‡§æ‡§è‡§ó‡§æ

Use Cases:

Forms, accessibility, highlighting active inputs

3Ô∏è‚É£ :first-child ‚Üí First Child Element

Meaning:

Parent ‡§ï‡§æ ‡§™‡§π‡§≤‡§æ child element target ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Example:

<ul>
  <li>Item 1 ‚úÖ</li>
  <li>Item 2 ‚ùå</li>
</ul>

li:first-child {
  font-weight: bold;
  color: blue;
}


‚úÖ Output:

‡§ï‡•á‡§µ‡§≤ ‡§™‡§π‡§≤‡§æ <li> styled

4Ô∏è‚É£ :last-child ‚Üí Last Child Element

Meaning:

Parent ‡§ï‡§æ last child target ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Example:

li:last-child {
  color: red;
}


‡§ï‡•á‡§µ‡§≤ last <li> red

5Ô∏è‚É£ :nth-child(n) ‚Üí Specific Child Number

Meaning:

Parent ‡§ï‡•á n-th child ‡§ï‡•ã target ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Example:

li:nth-child(2) {
  background-color: yellow;
}


‡§ï‡•á‡§µ‡§≤ second <li> yellow background

Formula Example:

li:nth-child(odd) { background: #f0f0f0; }
li:nth-child(even) { background: #ddd; }


Odd/Even pattern for list or table rows

6Ô∏è‚É£ :nth-of-type(n) ‚Üí Specific Element Type

Meaning:

Parent ‡§Æ‡•á‡§Ç specific element type ‡§ï‡•á n-th occurrence ‡§ï‡•ã target ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

Example:

<p>Para 1</p>
<p>Para 2 ‚úÖ</p>
<p>Para 3</p>

p:nth-of-type(2) {
  color: green;
}


‚úÖ Output:

‡§ï‡•á‡§µ‡§≤ ‡§¶‡•Ç‡§∏‡§∞‡§æ paragraph green

7Ô∏è‚É£ :not(selector) ‚Üí Negation

Meaning:

Select elements except specified selector

Example:

li:not(.active) {
  color: gray;
}


‚úÖ Output:

‡§∏‡§≠‡•Ä <li> ‡§ú‡•ã .active class ‡§®‡§π‡•Ä‡§Ç ‡§∞‡§ñ‡§§‡•á, gray color

8Ô∏è‚É£ :disabled, :enabled ‚Üí Form State

Example:

<input type="text" disabled>
<input type="text">

input:disabled { background-color: #eee; }
input:enabled { border: 1px solid #333; }


‚úÖ Output:

Disabled inputs gray background

Enabled inputs normal

9Ô∏è‚É£ :checked ‚Üí Radio/Checkbox Checked

Example:

<input type="checkbox" id="check">
<label for="check">Accept</label>

input:checked + label {
  color: green;
  font-weight: bold;
}


‚úÖ Output:

Checkbox check ‡§π‡•ã‡§®‡•á ‡§™‡§∞ label green

10Ô∏è‚É£ :first-of-type, :last-of-type

Example:

<p>Para 1 ‚úÖ</p>
<p>Para 2 ‚ùå</p>
<p>Para 3 ‚ùå</p>

p:first-of-type { color: blue; }
p:last-of-type { color: red; }


‚úÖ Output:

First paragraph blue

Last paragraph red

11Ô∏è‚É£ :empty ‚Üí Empty Element

Example:

<div></div> <!-- Empty ‚úÖ -->
<div>Text</div> <!-- Not empty ‚ùå -->

div:empty {
  border: 2px dashed red;
}


‚úÖ Output:

‡§ï‡•á‡§µ‡§≤ empty div highlighted

12Ô∏è‚É£ :root ‚Üí Root Element (HTML)

Example:

:root {
  --primary-color: #009688;
  --secondary-color: #f0f0f0;
}


‚úÖ Output:

CSS variables define globally

13Ô∏è‚É£ :first-letter, :first-line ‚Üí Text Styling

Example:

p:first-letter {
  font-size: 30px;
  color: red;
}

p:first-line {
  font-weight: bold;
}


‚úÖ Output:

First letter ‡§¨‡§°‡§º‡§æ ‡§î‡§∞ red

First line bold

üîπ Project-Based Examples
Blog Layout:
h2 + p { font-style: italic; }  /* First paragraph after heading */
p:nth-child(odd) { background: #f9f9f9; }  /* Odd paragraphs */

Forms:
input:focus { border-color: blue; }
input:disabled { background: #eee; }
input:required { border: 1px solid red; }

Navigation:
nav a:hover { color: red; }
nav a:active { color: green; }

Cards:
.card:nth-child(2) { background: #f0f0f0; }
.card:first-child { border-top: 3px solid #009688; }
.card:last-child { border-bottom: 3px solid #009688; }

Interactive Buttons:
button:hover { background: #009688; color: #fff; }
button:disabled { opacity: 0.5; cursor: not-allowed; }

‚öñÔ∏è Pseudo-Classes vs Classes
Pseudo-Class	Use Case
:hover	Hover effect on links/buttons
:focus	Input fields focus
:nth-child(n)	Specific child styling
:first-child / :last-child	First/last elements
:checked	Radio/Checkbox selection
:disabled	Form element state
:not()	Negation for exclusion
:empty	Empty elements
:first-letter / :first-line	Text styling

| Pseudo-Class                | Use Case                      |
| --------------------------- | ----------------------------- |
| :hover                      | Hover effect on links/buttons |
| :focus                      | Input fields focus            |
| :nth-child(n)               | Specific child styling        |
| :first-child / :last-child  | First/last elements           |
| :checked                    | Radio/Checkbox selection      |
| :disabled                   | Form element state            |
| :not()                      | Negation for exclusion        |
| :empty                      | Empty elements                |
| :first-letter / :first-line | Text styling                  |


Difference:

Classes ‚Üí Manual assign

Pseudo-Classes ‚Üí Automatic, element state/position based

‚úÖ Why, When, Where & How

Why: Dynamic & interactive styling without extra classes

When: Hover, focus, checked, first/last child, nth-child, empty, text effect

Where: Blogs, forms, navbars, cards, lists, interactive UI

How: CSS selector syntax ‚Üí selector:pseudo-class { ... }