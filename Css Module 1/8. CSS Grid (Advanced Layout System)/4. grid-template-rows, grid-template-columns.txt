grid-template-rows, grid-template-columns explains in details in Hindi with examples and different- different conditions and what, why, when, where and how to use it and also give me interview question and answers to related this topics


рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯФе
рдЕрдм рд╣рдо grid-template-rows рдФрд░ grid-template-columns рдХреЛ step-by-step in Hindi, real examples, different-different conditions, рдФрд░ interview Q&A (basic тЖТ mastery + logic + scenario-based) рдХреЗ рд╕рд╛рде рд╕рдордЭреЗрдВрдЧреЗред

ЁЯОп Topic: grid-template-rows & grid-template-columns (Complete in Hindi)
ЁЯзй 1. Introduction (рдХреНрдпрд╛ рд╣реИ рдпрд╣ properties?)

grid-template-rows рдФрд░ grid-template-columns тАФ
CSS Grid Layout рдХреА рд╕рдмрд╕реЗ important properties рд╣реИрдВред

рдЗрдирдХрд╛ рдХрд╛рдо рд╣реИ тАФ рдпрд╣ define рдХрд░рдирд╛ рдХрд┐
ЁЯСЙ Grid container рдореЗрдВ рдХрд┐рддрдиреА rows рдФрд░ columns рд╣реЛрдВрдЧреА,
ЁЯСЙ рдФрд░ рдЙрдирдХреА size рдХреНрдпрд╛ рд╣реЛрдЧреАред

ЁЯТб 2. Syntax
.container {
  display: grid;
  grid-template-columns: <track-size> <track-size> ...;
  grid-template-rows: <track-size> <track-size> ...;
}


рдЬрд╣рд╛рдБ <track-size> тЖТ px, %, fr, auto, minmax(), etc. рд╣реЛ рд╕рдХрддрд╛ рд╣реИред

ЁЯза 3. Example 1 тАФ Simple 3-column Grid
.container {
  display: grid;
  grid-template-columns: 100px 100px 100px;
}


ЁЯОп рдорддрд▓рдм:
рддреАрди columns рд╣реИрдВ тАФ рд╣рд░ рдПрдХ рдХреА рдЪреМрдбрд╝рд╛рдИ 100pxред

ЁЯз▒ 4. Example 2 тАФ 3 Rows with Different Heights
.container {
  display: grid;
  grid-template-rows: 100px 200px 300px;
}


ЁЯОп рдорддрд▓рдм:
рдкрд╣рд▓реА row тЖТ 100px, рджреВрд╕рд░реА тЖТ 200px, рддреАрд╕рд░реА тЖТ 300pxред

тЪЦя╕П 5. Example 3 тАФ Mix of Fixed and Flexible Sizes
.container {
  display: grid;
  grid-template-columns: 200px 1fr 2fr;
}


ЁЯОп Explanation:

First column: fixed 200px

Second column: 1 part of remaining space

Third column: 2 parts of remaining space

ЁЯТб Total free space divides into 3 parts тАФ
1fr + 2fr = 3 parts тЖТ 33% + 67%

ЁЯУР 6. Example 4 тАФ Equal Column Grid (Responsive)
.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
}


ЁЯОп рдорддрд▓рдм:
рддреАрди equal columns, auto adjust on container width.

тЪЩя╕П 7. Example 5 тАФ Auto + Fixed Mix
.container {
  display: grid;
  grid-template-columns: auto 1fr 2fr;
}


ЁЯОп Explanation:

Auto тЖТ content size рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ

1fr & 2fr тЖТ remaining width divide рдХрд░рдХреЗред

ЁЯУП 8. Example 6 тАФ Using Percentage
.container {
  display: grid;
  grid-template-columns: 30% 70%;
}


ЁЯОп рдорддрд▓рдм:
2-column layout (sidebar + content)

тЬЕ Sidebar тЖТ 30%
тЬЕ Main content тЖТ 70%

ЁЯзй 9. Example 7 тАФ Using minmax() for Responsive
.container {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
}


ЁЯОп Explanation:
рд╣рд░ column рдХрд╛ min size 250px рдФрд░ max flexible (1fr)ред
Screen рдЫреЛрдЯреА рд╣реЛ рддреЛ columns wrap рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВред

тЪб 10. Example 8 тАФ grid-template-rows with auto height
.container {
  display: grid;
  grid-template-rows: auto 1fr auto;
}


ЁЯОп Example Use Case:
Header (auto height),
Main Content (fill remaining),
Footer (auto height)ред

ЁЯзо 11. Example 9 тАФ Fixed Height + Flexible Rows
.container {
  display: grid;
  grid-template-rows: 100px 1fr 50px;
}


тЬЕ Header тЖТ fixed 100px
тЬЕ Content тЖТ takes available space
тЬЕ Footer тЖТ fixed 50px

ЁЯТб Used in sticky footer layouts.

ЁЯзн 12. Example 10 тАФ Dynamic Columns (auto-fit)
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));


тЬЕ Automatically adjusts number of columns
тЬЕ Perfect for galleries and cards.

ЁЯУК 13. Example 11 тАФ 2 Equal Divs (50% + 50%)
.container {
  display: grid;
  grid-template-columns: 50% 50%;
}


ЁЯОп Both divs equal in width тЖТ 50% each.

ЁЯзй 14. Example 12 тАФ Using Implicit Rows
.container {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-auto-rows: 200px;
}


тЬЕ If rows not defined тЖТ auto rows of 200px are created.

ЁЯТм 15. Why, When, Where, How
Concept	Explanation
What	Define grid track sizes (rows & columns)
Why	To control structure & responsiveness easily
When	Whenever you need multiple sections side by side or stacked
Where	Dashboards, product cards, layouts, forms
How	Using px, %, fr, auto, minmax(), repeat(), auto-fit/fill

| Concept   | Explanation                                                 |
| --------- | ----------------------------------------------------------- |
| **What**  | Define grid track sizes (rows & columns)                    |
| **Why**   | To control structure & responsiveness easily                |
| **When**  | Whenever you need multiple sections side by side or stacked |
| **Where** | Dashboards, product cards, layouts, forms                   |
| **How**   | Using px, %, fr, auto, minmax(), repeat(), auto-fit/fill    |



ЁЯза Interview Questions and Answers (Basic тЖТ Mastery)
Q1.

grid-template-columns рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

Answer:
рдпрд╣ property рдмрддрд╛рддреА рд╣реИ рдХрд┐ container рдореЗрдВ columns рдХреА width рдФрд░ count рдХреНрдпрд╛ рд╣реЛрдЧрд╛ред

Q2.

1fr unit рдХреНрдпрд╛ рд╣реИ?

Answer:
fr рдХрд╛ рдорддрд▓рдм "fractional unit" рд╣реИ тАФ рдпрд╣ available free space рдХрд╛ рд╣рд┐рд╕реНрд╕рд╛ рд▓реЗрддрд╛ рд╣реИред

Example:
1fr 2fr тЖТ total 3 parts тЖТ 33% + 67%

Q3.

рдЕрдЧрд░ grid-template-columns: auto 1fr; рд╣реЛ рддреЛ рдХреМрдирд╕рд╛ column flexible рд╣реЛрдЧрд╛?

Answer:
рдкрд╣рд▓рд╛ column тЖТ content рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ auto,
рджреВрд╕рд░рд╛ тЖТ рдмрдЪреЗ рд╣реБрдП space рдХреЛ fill рдХрд░реЗрдЧрд╛ред

Q4.

repeat() function рдХреНрдпрд╛ рдХрд░рддрд╛ рд╣реИ?

Answer:
рдпрд╣ same value рдХреЛ рдмрд╛рд░-рдмрд╛рд░ repeat рдХрд░рддрд╛ рд╣реИред
Example:
repeat(3, 1fr) тЖТ 1fr 1fr 1fr

Q5.

grid-template-rows: 100px 1fr 100px; рдХрд╛ meaning?

Answer:
Header (100px) тЖТ main (flexible) тЖТ footer (100px) layout рдмрдирддрд╛ рд╣реИред

Q6.

рдЕрдЧрд░ total width 1200px рд╣реИ рдФрд░
grid-template-columns: 200px 1fr 1fr;
рддреЛ column widths рдХреНрдпрд╛ рд╣реЛрдВрдЧреА?

Answer:
200px fixed + remaining 1000px divided into 2 тЖТ 500px each.

Q7.

рдЖрдкрдХреЛ responsive gallery рдмрдирд╛рдиреА рд╣реИ рдЬрд╣рд╛рдБ рд╣рд░ box рдХрдо рд╕реЗ рдХрдо 250px рд╣реЛред
рдХреИрд╕реЗ рдХрд░реЗрдВрдЧреЗ?

Answer:

grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

Q8.

auto-fit рдФрд░ auto-fill рдореЗрдВ рдЕрдВрддрд░?

Property	Behavior
auto-fit	Empty columns collapse (shrink)
auto-fill	Empty columns remain (reserved space)

| Property      | Behavior                              |
| ------------- | ------------------------------------- |
| **auto-fit**  | Empty columns collapse (shrink)       |
| **auto-fill** | Empty columns remain (reserved space) |

Q9.

Logic-based:
grid-template-columns: 2fr 1fr 1fr;
рддреЛ layout рдХрд┐рд╕ ratio рдореЗрдВ divide рд╣реЛрдЧрд╛?

Answer:
Total = 4 parts тЖТ 2:1:1 тЖТ 50%, 25%, 25%

Q10.

рдЕрдЧрд░ height fix рдХрд░рдиреА рд╣реЛ рдФрд░ width flexible рд░рдЦрдиреА рд╣реЛ рддреЛ?

Answer:

grid-template-rows: 200px;
grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));

Q11.

Condition:
рдЖрдкрдХреЗ рдкрд╛рд╕ 6 items рд╣реИрдВ, рдФрд░ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ 3 items per rowред
рдХреИрд╕реЗ рдХрд░реЗрдВрдЧреЗ?

Answer:

grid-template-columns: repeat(3, 1fr);

Q12.

Responsive grid рдмрд┐рдирд╛ media query рдХреИрд╕реЗ рдмрдирд╛рдПрдБрдЧреЗ?

Answer:

grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));


тЬЕ Auto adjust as screen resizes.

Q13.

рдЕрдЧрд░ grid-template-rows define рди рд╣реЛ рддреЛ рдХреНрдпрд╛ рд╣реЛрдЧрд╛?

Answer:
Rows automatically content height рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдмрдирддреА рд╣реИрдВ (auto rows)ред

Q14.

Real-world:
рдЖрдкрдХреЛ header (80px), sidebar (250px), main content (auto), footer (60px) рдЪрд╛рд╣рд┐рдПред

Answer:

grid-template-columns: 250px 1fr;
grid-template-rows: 80px 1fr 60px;

Q15.

Logic:
grid-template-rows: repeat(2, 100px 200px);
рдХрд┐рддрдиреА rows рдмрдиреЗрдВрдЧреА?

Answer:
4 rows тЖТ 100px, 200px, 100px, 200px

Q16.

рдЖрдк рдЪрд╛рд╣реЗрдВ рдХрд┐ first row рдФрд░ last row equal рд╣реЛрдВ рдкрд░ рдмреАрдЪ рд╡рд╛рд▓реА row flexible рд╣реЛред
рдХреИрд╕реЗ рдХрд░реЗрдВрдЧреЗ?

Answer:

grid-template-rows: 100px 1fr 100px;

Q17.

minmax() function рдХрдм useful рд╣реЛрддрд╛ рд╣реИ?

Answer:
рдЬрдм рд╣рдореЗрдВ minimum рдФрд░ maximum width/height set рдХрд░рдиреА рд╣реЛред
Example:
minmax(200px, 1fr) тЖТ min 200px, max flexible.

Q18.

рдЕрдЧрд░ container width 800px рд╣реИ рдФрд░
grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
рддреЛ рдХрд┐рддрдиреЗ columns рдмрдиреЗрдВрдЧреЗ?

Answer:
2 columns (300 + 300 + gaps тЙИ 800px)

Q19.

Condition-based:
рдЖрдкрдХрд╛ grid layout рдЯреВрдЯ рдЬрд╛рддрд╛ рд╣реИ рдЬрдм content рд▓рдВрдмрд╛ рд╣реЛрддрд╛ рд╣реИред
Fix?

Answer:

.item {
  min-width: 0;
  min-height: 0;
}

Q20.

рдЖрдкрдХреЛ equal height рд╡рд╛рд▓реЗ cards рдЪрд╛рд╣рд┐рдП рдкрд░ dynamic width рдХреЗ рд╕рд╛рдеред
рдХреИрд╕реЗ рдХрд░реЗрдВрдЧреЗ?

Answer:

grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
grid-auto-rows: 300px;

ЁЯз▒ Where to Use

тЬЕ Page layout
тЬЕ Responsive cards
тЬЕ Dashboard panels
тЬЕ Gallery sections
тЬЕ Header-Sidebar-Footer structure



ЁЯЪА Conclusion
Property	Purpose	Example
grid-template-columns	Column width рдФрд░ count define рдХрд░рддрд╛ рд╣реИ	repeat(3, 1fr)
grid-template-rows	Row height define рдХрд░рддрд╛ рд╣реИ	100px 1fr 100px
When	Page рдпрд╛ component structure рдмрдирд╛рдирд╛ рд╣реЛ	Layouts, dashboards
Why	2D structure рдХреЛ easy рдФрд░ responsive рдмрдирд╛рдирд╛

| Property                | Purpose                                  | Example                    |
| ----------------------- | ---------------------------------------- | -------------------------- |
| `grid-template-columns` | Column width рдФрд░ count define рдХрд░рддрд╛ рд╣реИ     | `repeat(3, 1fr)`           |
| `grid-template-rows`    | Row height define рдХрд░рддрд╛ рд╣реИ                | `100px 1fr 100px`          |
| **When**                | Page рдпрд╛ component structure рдмрдирд╛рдирд╛ рд╣реЛ     | Layouts, dashboards        |
| **Why**                 | 2D structure рдХреЛ easy рдФрд░ responsive рдмрдирд╛рдирд╛ | Simplifies complex layouts |


Would you like me to create the next part тАФ
ЁЯзй тАЬAdvanced Interview & Logic-Based Questions on grid-template-rows/columnsтАЭ
ЁЯСЙ including real project-level challenges (like dashboard, pricing table, sidebar layout, gallery responsive logic)?



Give me more interview questions and answers for advanced to mastery level, including situation and condition-based questions and logic based


Perfect тАФ ab hum grid-template-rows & grid-template-columns ke Advanced тЖТ Mastery level interview questions karte hain тАФ jisme
тЬЕ situation-based,
тЬЕ condition-based,
тЬЕ logic-based,
тЬЕ aur real-world project scenarios included honge.

ЁЯОп Advanced + Mastery Level Interview Q&A on CSS Grid (grid-template-rows & columns)
ЁЯза 1. Scenario: Fixed header, sidebar, and responsive content

ЁЯзй Question:
Aapko ek layout banana hai jisme header 80px height ka ho, sidebar 250px fixed width ka, aur main content remaining space le.
Footer bhi 60px ka ho.
Kaise karoge?

Answer:

.container {
  display: grid;
  grid-template-columns: 250px 1fr;
  grid-template-rows: 80px 1fr 60px;
  height: 100vh;
}


ЁЯОп Logic:

2 columns тЖТ sidebar (fixed) + content (flexible)

3 rows тЖТ header, main, footer

Total = full viewport layout (100vh)

тЪб 2. Logic-Based Question

ЁЯзй Question:
Agar aap likhte ho:

grid-template-columns: 1fr 2fr 1fr;


Toh layout kis ratio me divide hoga?

Answer:
Total = 4 parts
тЖТ 1 : 2 : 1 тЖТ 25% : 50% : 25%
(Automatically adjust according to container width)

ЁЯзо 3. Calculation-Based Question

ЁЯзй Question:
Container width = 1200px
CSS:

grid-template-columns: 200px 2fr 1fr;


Each gap = 0px (no gap).
Toh actual pixel widths kya hongi?

Answer:
Total fr = 3fr = 1000px remaining after 200px.
1fr = 333.33px
So:

col1 тЖТ 200px

col2 тЖТ 666.67px

col3 тЖТ 333.33px

ЁЯзй 4. Condition-Based Question

ЁЯза Question:
Agar grid-template-columns define nahi kiya gaya, tab kya hota hai?

Answer:
Grid items ek hi column me stack ho jate hain vertically,
kyunki default implicit grid me ek hi column banta hai.

тЪЩя╕П 5. Real-World: Responsive Gallery

ЁЯзй Question:
Aapko ek image gallery banana hai jisme images minimum 250px hon aur screen chhoti hone par wrap ho jayein.
Media query ke bina kaise karoge?

Answer:

grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));


ЁЯОп Logic:

auto-fit columns ko collapse karta hai

minmax() ensures min width = 250px

1fr allows expansion to fill extra space

ЁЯзй 6. Tricky Logic Question

ЁЯза Question:
Agar likha hai:

grid-template-columns: repeat(2, 1fr 2fr);


Toh total kitne columns banenge aur layout ratio kya hoga?

Answer:
Repeat(2, 1fr 2fr) тЖТ expands to тЖТ 1fr 2fr 1fr 2fr
Total columns = 4
Ratios = 1:2:1:2

ЁЯзй 7. Dynamic Rows Challenge

ЁЯзй Question:
Aapke paas unknown number of items hain, par har row ki height 200px fix chahiye.
Kaise set karenge?

Answer:

grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
grid-auto-rows: 200px;


ЁЯОп Rows dynamically banti рд░рд╣реЗрдВрдЧреА 200px height ke рд╕рд╛рдеред

ЁЯзй 8. Logic + Behavior

ЁЯза Question:
Agar grid-template-rows aur grid-auto-rows dono likhe ho toh kya hota hai?

Answer:

grid-template-rows тЖТ explicitly defined rows ke liye.

grid-auto-rows тЖТ implicitly create hone wale extra rows ke liye.

ЁЯзй 9. Project-Based: Equal 4 Columns Layout

ЁЯзй Question:
Aapko 4 cards banana hai jinke width equal ho aur responsive ho.
Kaise karoge?

Answer:

grid-template-columns: repeat(4, 1fr);


ЁЯОп Responsive width = container ke width ke ratio me adjust hoti hai.

ЁЯзй 10. Condition-Based

ЁЯза Question:
Agar grid-template-columns: 100px auto 1fr; likha ho,
aur content 500px ka ho, toh columns kaise behave karenge?

Answer:

First = fixed 100px

Second = expand according to content (auto)

Third = take remaining free space (1fr)

ЁЯзй 11. Real UI Logic: Sidebar Collapse

ЁЯзй Question:
Agar aapka sidebar collapse hone par 250px se 80px ho jata hai,
toh grid kaise adjust karega?

Answer:

.container {
  display: grid;
  grid-template-columns: var(--sidebar-width, 250px) 1fr;
}


тЪЩя╕П Sidebar width dynamically update hoti rahegi via CSS variable.

ЁЯзй 12. Trick: Implicit Grid Rows

ЁЯза Question:
Agar aapne sirf grid-template-columns define kiya aur rows nahi,
par 6 items diye, kya hoga?

Answer:
Grid automatically implicit rows bana lega (auto height).
1st row me columns fill hone ke baad next row automatic banegi.

ЁЯзй 13. Debug Question

ЁЯза Question:
Kyu kabhi-kabhi grid-template-columns ka 1fr properly kaam nahi karta aur column shrink ho jata hai?

Answer:
Because of content overflow inside the grid item.
Fix тЖТ

.item {
  min-width: 0;
}

ЁЯзй 14. Scenario: Dashboard Layout

ЁЯзй Question:
Dashboard me chaar section chahiye:

Header (fixed)

Sidebar (fixed)

Main content (flexible)

Footer (fixed)

Kaise karoge?

Answer:

.container {
  display: grid;
  grid-template-columns: 240px 1fr;
  grid-template-rows: 70px 1fr 60px;
  height: 100vh;
}


ЁЯОп Common structure for real dashboards.

ЁЯзй 15. Logic Challenge

ЁЯза Question:
grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
aur
grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
рдореЗрдВ kya difference hai?

Answer:

Feature	auto-fit	auto-fill
Empty Tracks	Collapse ho jate hain	Space reserve karte hain
Responsive Behavior	More fluid	Fixed space feel
Use Case	Dynamic wrapping grids	Consistent grid with placeholders

| Feature             | auto-fit               | auto-fill                         |
| ------------------- | ---------------------- | --------------------------------- |
| Empty Tracks        | Collapse ho jate hain  | Space reserve karte hain          |
| Responsive Behavior | More fluid             | Fixed space feel                  |
| Use Case            | Dynamic wrapping grids | Consistent grid with placeholders |


ЁЯзй 16. Code Prediction

ЁЯзй Question:
Code:

grid-template-columns: 100px minmax(200px, 1fr) 2fr;


Explain the layout behavior.

Answer:

Column 1 тЖТ fixed 100px

Column 2 тЖТ between 200px and 1fr (depends on space)

Column 3 тЖТ takes 2 times remaining space than 2nd column

ЁЯзй 17. Real Problem: Layout Breaking

ЁЯза Question:
Aapka grid layout mobile par break ho raha hai.
Possible causes?

Answer:

Fixed width columns instead of fr or %

No minmax() used for responsive

Padding + border overflow

No box-sizing: border-box

Content overflow (no min-width: 0)

ЁЯзй 18. Logic: auto track sizing

ЁЯза Question:
Agar likha hai:

grid-template-columns: auto 1fr;


Aur first column ke content ki width 400px hai тАФ
toh kya hoga?

Answer:

First column expands to 400px (auto = content size)

Second column takes remaining width.

ЁЯзй 19. Visual Behavior

ЁЯза Question:
Agar total space bach gaya hai aur kisi column ka size auto hai, kya wo expand karega?

Answer:
рдирд╣реАрдВ тЭМ
auto sirf content ke size ke рдЕрдиреБрд╕рд╛рд░ hota hai, remaining space nahi letaред
For flexible expansion тЖТ fr unit use karni chahiyeред

ЁЯзй 20. Complex Scenario (Mastery)

ЁЯза Question:
You are designing a 3x3 grid.
Middle cell (2nd row, 2nd column) should take double space in both directions.
How will you define it?

Answer:

.container {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  grid-template-rows: repeat(3, 100px);
}
.item:nth-child(5) {
  grid-column: span 2;
  grid-row: span 2;
}


ЁЯОп Center box expands 2x2 grid area.

ЁЯзй Summary Table
Concept	Example	Use Case
Fixed Column	200px 200px	Sidebar + main
Flexible Column	1fr 2fr	Fluid layout
Repeat Function	repeat(3, 1fr)	Equal columns
Responsive Grid	auto-fit + minmax()	Gallery
Explicit vs Implicit	template vs auto-rows	Dynamic grids
Mix Units	100px 1fr 2fr	Hybrid layouts


| Concept              | Example               | Use Case       |
| -------------------- | --------------------- | -------------- |
| Fixed Column         | `200px 200px`         | Sidebar + main |
| Flexible Column      | `1fr 2fr`             | Fluid layout   |
| Repeat Function      | `repeat(3, 1fr)`      | Equal columns  |
| Responsive Grid      | `auto-fit + minmax()` | Gallery        |
| Explicit vs Implicit | template vs auto-rows | Dynamic grids  |
| Mix Units            | `100px 1fr 2fr`       | Hybrid layouts |
