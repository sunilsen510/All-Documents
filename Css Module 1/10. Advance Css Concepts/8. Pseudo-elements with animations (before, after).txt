Pseudo-elements with animations (::before, ::after) explains in details in Hindi with examples and different- different conditions and what, why, when, where and how to use it and also give me interview question and answers to related this topics


‡§†‡•Ä‡§ï ‡§π‡•à ‡§≠‡§æ‡§à! ‡§Ö‡§¨ ‡§Æ‡•à‡§Ç CSS Pseudo-elements (::before, ::after) + Animations ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç explain ‡§ï‡§∞‡•Ç‡§Ç‡§ó‡§æ‡•§ ‡§á‡§∏‡§Æ‡•á‡§Ç examples, ‡§Ö‡§≤‡§ó-‡§Ö‡§≤‡§ó conditions, ‡§ï‡§¨ ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡§®‡§æ ‡§π‡•à, ‡§î‡§∞ interview Q/A ‡§≠‡•Ä ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç‡§ó‡•á‡•§

1Ô∏è‚É£ Pseudo-elements ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

‡§™‡§∞‡§ø‡§≠‡§æ‡§∑‡§æ:

Pseudo-elements CSS feature ‡§π‡•à‡§Ç ‡§ú‡•ã ‡§ï‡§ø‡§∏‡•Ä element ‡§ï‡•á specific part ‡§ï‡•ã target ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

Most common pseudo-elements:

::before ‚Üí element ‡§ï‡•á content ‡§∏‡•á ‡§™‡§π‡§≤‡•á content insert ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

::after ‚Üí element ‡§ï‡•á content ‡§ï‡•á ‡§¨‡§æ‡§¶ content insert ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

Syntax:

.element::before {
  content: "";
  /* styling */
}


Logic / ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç:

Extra HTML tag ‡§ï‡•á ‡§¨‡§ø‡§®‡§æ decorative elements create ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

Hover effects, animations, background decorations, icons, tooltips ‡§Æ‡•á‡§Ç use

2Ô∏è‚É£ Basic Example of ::before and ::after
<div class="box">Hover me</div>

<style>
.box {
  width: 200px;
  height: 100px;
  background: #3498db;
  color: white;
  text-align: center;
  line-height: 100px;
  position: relative;
  overflow: hidden;
}

.box::before {
  content: "";
  position: absolute;
  width: 0;
  height: 100%;
  top: 0;
  left: 0;
  background: rgba(255,255,255,0.3);
  transition: width 0.5s ease;
}

.box:hover::before {
  width: 100%;
}
</style>


Logic / ‡§ï‡§¨ use ‡§ï‡§∞‡•á‡§Ç:

Decorative overlay

Hover animations

Condition: Card hover, button effects, gallery overlay

3Ô∏è‚É£ Animations with Pseudo-elements

Example 1 ‚Äì Sliding overlay

.box::after {
  content: "";
  position: absolute;
  width: 0;
  height: 100%;
  top: 0;
  right: 0;
  background: rgba(0,0,0,0.2);
  transition: width 0.5s ease;
}

.box:hover::after {
  width: 100%;
}


Logic:

Element hover ‚Üí pseudo-element animate

Condition: Button hover, card animation

Example 2 ‚Äì Keyframes animation

.box::before {
  content: "";
  position: absolute;
  width: 10px;
  height: 10px;
  background: #fff;
  top: 0;
  left: 0;
  border-radius: 50%;
  animation: move 2s infinite linear;
}

@keyframes move {
  0% { top: 0; left: 0; }
  25% { top: 0; left: 90%; }
  50% { top: 90%; left: 90%; }
  75% { top: 90%; left: 0; }
  100% { top: 0; left: 0; }
}


Logic / ‡§ï‡§¨ use ‡§ï‡§∞‡•á‡§Ç:

Decorative animations, loader effects, interactive elements

Condition: Cards, hero section, background effects

4Ô∏è‚É£ Combining ::before / ::after with Filters and Shapes
.box::after {
  content: "";
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  background: #fff;
  clip-path: circle(0% at 50% 50%);
  transition: clip-path 0.5s ease;
}

.box:hover::after {
  clip-path: circle(75% at 50% 50%);
}


Logic:

Shape animation on hover

Condition: Card animation, button hover, creative layouts

5Ô∏è‚É£ Common Use Cases

Hover overlay / highlight effects

Button background animation

Decorative icons without extra HTML

Loading spinners / moving dots / animation

Tooltips and badges

Glowing / pulse effect

6Ô∏è‚É£ Best Practices

content property mandatory

Positioning ‚Üí relative parent + absolute pseudo-element

Use z-index for layering

Transitions ‚Üí smooth hover effects

Animations ‚Üí keyframes for continuous effects

7Ô∏è‚É£ Interview Questions & Answers (Advanced / Mastery Level)

Q1. ::before ‡§î‡§∞ ::after ‡§Æ‡•á‡§Ç difference ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

::before ‚Üí content element ‡§ï‡•á ‡§™‡§π‡§≤‡•á insert ‡§π‡•ã‡§§‡§æ ‡§π‡•à

::after ‚Üí content element ‡§ï‡•á ‡§¨‡§æ‡§¶ insert ‡§π‡•ã‡§§‡§æ ‡§π‡•à

Logic: Decoration insert ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ

Q2. Pseudo-elements ‡§¨‡§ø‡§®‡§æ extra HTML ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

Extra div/span add ‡§ï‡§∞‡§®‡•á ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç

Cleaner, maintainable code

Q3. Pseudo-element ‡§Æ‡•á‡§Ç animation ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§∞‡•á‡§Ç?

Use keyframes

Use transition for hover animations

Condition: Card hover, button hover, loader

Q4. Pseudo-element ‡§ï‡§æ parent ‡§ï‡•ç‡§Ø‡•ã‡§Ç relative ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?

Child absolute positioning ‚Üí relative parent ‡§ï‡•á respect ‡§Æ‡•á‡§Ç position ‡§π‡•ã‡§ó‡§æ

Condition: Overlay / animation element

Q5. Hover overlay animation example?

.element::before { width: 0%; transition: width 0.5s; }
.element:hover::before { width: 100%; }


Logic: Smooth hover feedback

Q6. Multiple pseudo-elements ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡•á‡§Ç?

.box::before { /* top-left decoration */ }
.box::after { /* bottom-right decoration */ }


Logic: Multiple animated effects without extra HTML

Q7. Keyframes vs Transition with pseudo-elements

Transition ‚Üí hover-triggered changes

Keyframes ‚Üí continuous / infinite animation

Condition: Loader, moving dots, background animation

Q8. Performance considerations

Heavy animation + many pseudo-elements ‚Üí GPU intensive

Use transform/opacity for better performance

Q9. Real-world use case

Cards hover effect ‚Üí overlay using ::before

Button glow ‚Üí ::after animation

Loader animation ‚Üí multiple ::before elements

Interactive gallery ‚Üí pseudo-element hover effect

Q10. Creative combination examples

::before + clip-path + filter + keyframes

Condition: Hero section animation, card interaction, decorative overlays


‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§á‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‚Äú10 Practical Pseudo-elements Mini Projects with Animations‚Äù ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å, step by step code + live effect ‡§ï‡•á ‡§∏‡§æ‡§•‡•§

Hover overlay effect

Button glow animation

Loader animation

Moving background dots

Card entrance animation

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?


üß† Advanced / Mastery Level Interview Questions ‚Äì Pseudo-elements + Animations
1Ô∏è‚É£ Concept & Logic-Based Questions

Q1. ::before ‡§î‡§∞ ::after ‡§Æ‡•á‡§Ç ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Ö‡§Ç‡§§‡§∞ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?
Answer:

::before ‚Üí element content ‡§∏‡•á ‡§™‡§π‡§≤‡•á insert ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

::after ‚Üí element content ‡§ï‡•á ‡§¨‡§æ‡§¶ insert ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Logic: Decoration ‡§Ø‡§æ overlay insert ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§

Condition: Hover effect, card decoration, icon insertion‡•§

Q2. Pseudo-elements ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?
Answer:

Extra HTML elements (div/span) ‡§ï‡•Ä ‡§ú‡§∞‡•Ç‡§∞‡§§ ‡§®‡§π‡•Ä‡§Ç‡•§

Cleaner ‡§î‡§∞ maintainable code‡•§

Condition: Decorative effects, hover overlays, loaders‡•§

Q3. Parent element ‡§ï‡§æ position: relative ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§π‡•ã‡§®‡§æ ‡§ö‡§æ‡§π‡§ø‡§è?
Answer:

Pseudo-element absolute positioning parent ‡§ï‡•á respect ‡§Æ‡•á‡§Ç ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Condition: Overlay effect, hover animation, moving elements‡•§

Q4. Pseudo-element ‡§Æ‡•á‡§Ç animation ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à?

Keyframes ‚Üí continuous animation (infinite, linear)

Transition ‚Üí hover-triggered changes

Logic / Condition: Loader, hover overlay, moving background effects

Q5. Multiple pseudo-elements ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

.box::before { /* top-left decoration */ }
.box::after { /* bottom-right decoration */ }


Logic: Multiple decorations/animations without extra HTML

Condition: Cards, hero section, buttons

2Ô∏è‚É£ Situation / Condition-Based Questions

Q6. Hover overlay animation ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á?

.element::before {
  width: 0%; transition: width 0.5s ease;
}
.element:hover::before {
  width: 100%;
}


Logic: Smooth visual feedback

Condition: Card hover, button hover, gallery highlight

Q7. Keyframes animation pseudo-elements ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡•á‡§Ç?

.box::before {
  content:"";
  position:absolute;
  width:10px; height:10px;
  background:#fff;
  border-radius:50%;
  animation: move 2s infinite linear;
}
@keyframes move {
  0% {top:0; left:0;}
  25% {top:0; left:90%;}
  50% {top:90%; left:90%;}
  75% {top:90%; left:0;}
  100% {top:0; left:0;}
}


Logic: Decorative, interactive animation

Condition: Loader, moving background dots, hero section decoration

Q8. Clip-path + pseudo-elements animation ‡§ï‡•à‡§∏‡•á implement ‡§ï‡§∞‡•á‡§Ç?

.box::after {
  content:"";
  position:absolute;
  width:100%; height:100%;
  clip-path: circle(0% at 50% 50%);
  transition: clip-path 0.5s ease;
}
.box:hover::after {
  clip-path: circle(75% at 50% 50%);
}


Logic: Creative hover effect

Condition: Card hover, interactive buttons, hero section

Q9. Performance considerations pseudo-elements + animations

Heavy animation + multiple pseudo-elements ‚Üí GPU intensive

Optimize using transform, opacity, and minimal keyframes

Condition: Multiple cards, galleries, hero animations

Q10. Real-world scenario

Card hover ‚Üí overlay using ::before

Button glow ‚Üí ::after animation

Loader animation ‚Üí multiple ::before elements

Interactive gallery ‚Üí pseudo-element hover effect

3Ô∏è‚É£ Advanced / Edge Case Questions

Q11. Hover multiple pseudo-elements simultaneously

Use ::before for top-left highlight, ::after for bottom-right highlight

Logic: Dynamic interactive feedback

Condition: Cards, buttons, hero elements

Q12. Continuous background animation pseudo-elements

Infinite keyframes animation

Example: Moving dots, gradient overlay

Condition: Hero sections, loader, animated background

Q13. Combining filters + pseudo-elements animation

.box::after {
  content:"";
  width:100%; height:100%;
  backdrop-filter: blur(5px);
  animation: pulse 2s infinite;
}
@keyframes pulse {
  0%,100% {opacity:0.5;}
  50% {opacity:1;}
}


Logic: Subtle interactive overlay

Condition: Hero section, card hover, modal popup

Q14. Responsive pseudo-element animation

Media queries ‚Üí size, position, animation speed adjust

Condition: Mobile / tablet optimization

Q15. Combining clip-path + keyframes + pseudo-elements

Polygon hover animation using pseudo-elements

Logic: Interactive, dynamic UI

Condition: Gallery cards, hero overlays, creative layouts

Q16. Edge case: z-index issues

Pseudo-element overlaps parent content incorrectly

Solution: Use z-index appropriately (::before below content, ::after above content)

Q17. Loader with multiple pseudo-elements

Multiple ::before or ::after with different animation delays

Logic: Staggered animation ‚Üí smooth loader effect

Condition: Page loader, button loader, animated icons

Q18. Hover glow effect using pseudo-elements

button::after {
  content:"";
  position:absolute;
  top:0; left:0; width:100%; height:100%;
  box-shadow: 0 0 20px rgba(255,255,0,0.5);
  opacity:0;
  transition: opacity 0.3s ease;
}
button:hover::after { opacity:1; }


Logic: Visual feedback without extra HTML

Condition: Interactive buttons, cards, CTA elements

Q19. Cross-browser considerations

content property mandatory

Use relative parent for absolute pseudo-element

Mobile performance ‚Üí limit heavy animations

Q20. Professional project scenario

Hero banner ‚Üí animated background dots using ::before

Cards ‚Üí hover overlay + clip-path animation

Buttons ‚Üí glow + pulse effect using ::after

Loader ‚Üí multiple pseudo-elements with staggered keyframes

Gallery ‚Üí interactive hover using pseudo-elements + filter



‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§á‡§∏‡§ï‡•á ‡§≤‡§ø‡§è ‚Äú10 Practical Pseudo-elements Mini Projects with Animations‚Äù ‡§≠‡•Ä ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å, step by step code + live effect ‡§ï‡•á ‡§∏‡§æ‡§•‡•§

Hover overlay effect

Button glow animation

Loader animation

Moving background dots

Card entrance animation

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?