
Shorthand property flex explains in details in Hindi with examples and different- different conditions and what, why, when, where and how to use it and also give me interview question and answers to related this topics


बिलकुल! यहाँ मैं CSS Flexbox की shorthand property flex के बारे में पूरी डिटेल, हिंदी में explanation, examples, विभिन्न परिस्थितियों, और interview Q/A के साथ समझाऊँगा।

Flex Shorthand Property – flex
1. Introduction (परिचय)

flex shorthand property तीनों Flex properties को combine करती है:

flex-grow – item कितना available space में बढ़ सकता है

flex-shrink – item कितना shrink कर सकता है जब container छोटा हो

flex-basis – item का initial main size

Syntax:

.item {
  flex: <flex-grow> <flex-shrink> <flex-basis>;
}


Example:

.item { flex: 1 1 200px; }


flex-grow: 1 → grow allowed

flex-shrink: 1 → shrink allowed

flex-basis: 200px → initial size

2. Values Explanation (मानों का विवरण)
Property	Shorthand Value	Default	Description
flex-grow	number	0	Growth factor in available space
flex-shrink	number	1	Shrink factor when container smaller
flex-basis	length / auto	auto	Initial main size

| Property    | Shorthand Value | Default | Description                          |
| ----------- | --------------- | ------- | ------------------------------------ |
| flex-grow   | number          | 0       | Growth factor in available space     |
| flex-shrink | number          | 1       | Shrink factor when container smaller |
| flex-basis  | length / auto   | auto    | Initial main size                    |


Important:

अगर सिर्फ एक value लिखा है → flex-grow माना जाएगा, flex-shrink और flex-basis default होंगे।

auto → item intrinsic size

3. Examples
Example 1: Simple Flex
.item {
  flex: 1 1 200px;
}


Item start at 200px, grow/shrink allowed

Container resize → flex adjusts automatically

Example 2: Only Flex-Grow
.item {
  flex: 2; /* shorthand: grow=2, shrink=1 (default), basis=0% (default) */
}


Item grows twice as fast as others if space available

Shrink allowed by default

Example 3: Prevent Shrink
.item {
  flex: 1 0 150px;
}


Grow allowed, shrink disabled

Initial size 150px

Example 4: Equal Divs 50% Each
.div {
  flex: 1 1 50%;
}


Each div starts 50%

Grow/shrink equally

Example 5: Responsive Cards
.card {
  flex: 1 1 30%;
}


flex-basis 30%

Grow equally to fill extra space

Shrink equally on smaller screens

Example 6: Unequal Growth
.div1 { flex: 1 1 100px; }
.div2 { flex: 2 1 100px; }


Free space distributed 1:2 ratio

4. Why & When to Use Flex Shorthand?

Why (क्यों)

Shorter code → manage all 3 flex properties in one line

Better readability & maintainability

When (कब)

Responsive layouts

Card layouts

Navigation bars, dashboard widgets

Any situation where items need flexible sizing

Where (कहाँ)

Any flex container children (display:flex container)

How (कैसे)

Directly on flex items

Combination of numbers and basis

Use auto or percentage for responsive design

5. Real-World Scenarios

Dashboard Cards

.card-large { flex: 3 1 200px; }
.card-small { flex: 1 1 100px; }


Navigation Items

.nav-item { flex: 1 1 auto; }


Hero Section

.hero-image { flex: 2 1 300px; }
.hero-text { flex: 1 1 200px; }


Equal Flex Divs

.container div { flex: 1; } /* shorthand for 1 1 0% */

6. Interview Questions & Answers

Q1. flex shorthand क्या करता है?
A: Flex-grow, flex-shrink और flex-basis को एक साथ define करता है।

Q2. flex: 1 का मतलब क्या है?
A: flex-grow:1, flex-shrink:1 (default), flex-basis:0%

Q3. flex: auto का मतलब?
A: flex-grow:1, flex-shrink:1, flex-basis:auto → item grow/shrink based on content

Q4. flex: none का मतलब?
A: flex-grow:0, flex-shrink:0, flex-basis:auto → fixed size item

Q5. Difference between flex-basis and width in shorthand?

flex-basis → starting point for flex calculation

width → fixed value, overridden by flex-basis

Q6. Two divs, equal width, using shorthand

.div { flex: 1 1 50%; }


Each div starts 50%

Grow/shrink equally

Q7. Prevent shrinking

.div { flex: 1 0 200px; }


Div grows but never shrinks

Q8. Unequal growth

.div1 { flex: 2 1 100px; }
.div2 { flex: 1 1 100px; }


Free space distributed 2:1 ratio

Q9. Responsive scenario

.card { flex: 1 1 30%; }


30% width start, grows/shrinks equally

Q10. Dashboard widget with priority

.widget-large { flex: 3 1 200px; }
.widget-small { flex: 1 1 100px; }


Large widget gets more space visually

अगर आप चाहो तो मैं इसे Ultimate Flex Shorthand Mastery Cheat Sheet में consolidate कर दूँ:

All shorthand values explained

Equal divs, unequal divs, fixed+flexible, responsive cards

Advanced condition-based examples

Interview-ready Q/A with code

यह senior-level interview और real-world project reference के लिए perfect होगा।



बिलकुल! यहाँ मैं CSS Flex Shorthand (flex) के लिए Advanced से Mastery Level Interview Questions दूँगा, जिनमें situation-based, condition-based और logic/problem-solving वाले सवाल शामिल हैं।

Flex Shorthand – Advanced / Mastery Q&A
1. Question – Equal Width Divs Responsive

Scenario: 2 divs inside a flex container, each should take 50% width and grow/shrink equally.

Code:

.div { flex: 1 1 50%; }


Answer:

Initial width 50% each

flex-grow:1 → both grow equally if container larger

flex-shrink:1 → both shrink equally if container smaller

Perfect for responsive layouts

2. Question – Fixed + Flexible Divs

Scenario: Left sidebar fixed 300px, right content fills remaining space.

Code:

.sidebar { flex: 0 0 300px; }
.content { flex: 1 1 auto; }


Answer:

Sidebar fixed 300px, does not shrink/grow

Content div grows/shrinks according to remaining space

3. Question – Unequal Growth Ratios

Scenario: Two divs, container extra space should be distributed 1:3 ratio.

Code:

.div1 { flex: 1 1 100px; }
.div2 { flex: 3 1 100px; }


Answer:

Free space divided in 1:3 ratio

If 400px free → div1: 100 + 100 = 200px, div2: 100 + 300 = 400px

4. Question – Prevent Shrink

Scenario: Two divs, left div fixed 200px, right flexible, left should not shrink.

Code:

.left { flex: 0 0 200px; }
.right { flex: 1 1 auto; }


Answer:

Left div stays 200px

Right div adjusts according to remaining space

5. Question – flex: auto vs flex: 1

Scenario: What is difference between flex:auto and flex:1?

Answer:

flex: auto → flex-grow:1, flex-shrink:1, flex-basis:auto (based on content)

flex:1 → flex-grow:1, flex-shrink:1, flex-basis:0% (start from zero, then grow)

6. Question – Multi-row Flex Container

Scenario: 4 divs, wrap to multiple rows, each 50% initial width.

Code:

.container { display: flex; flex-wrap: wrap; }
.div { flex: 1 1 50%; }


Answer:

Each div starts 50% width

Shrink/grow proportionally

Wraps to next line if needed

7. Question – Unequal Flex-basis

Scenario: Two cards, one starts 100px, another 200px, both grow equally.

Code:

.card1 { flex: 1 1 100px; }
.card2 { flex: 1 1 200px; }


Answer:

Initial widths: 100px & 200px

Both grow equally based on flex-grow factor

8. Question – Logic-based Flex Distribution

Scenario: Three widgets, container extra space 600px, growth ratios 3:2:1

Code:

.widget1 { flex: 3 1 200px; }
.widget2 { flex: 2 1 150px; }
.widget3 { flex: 1 1 100px; }


Answer:

Total growth parts = 6 → 600px / 6 = 100px per part

widget1: 200 + (3*100) = 500px

widget2: 150 + (2*100) = 350px

widget3: 100 + (1*100) = 200px

9. Question – Responsive Hero Section

Scenario: Hero image and text, image should appear first on mobile, second on desktop

Code:

.hero-image { flex: 2 1 300px; }
.hero-text { flex: 1 1 200px; }

@media(max-width:768px) {
  .hero-image { order: -1; }
  .hero-text { order: 1; }
}


Answer:

Desktop → image second, text first

Mobile → image first, text second

Flex shorthand ensures proper growth and shrink

Order controls visual placement

10. Question – Fixed Widget + Growing Cards

Scenario: Sidebar fixed 250px, 3 cards grow equally in remaining space

Code:

.sidebar { flex: 0 0 250px; }
.card { flex: 1 1 200px; }


Answer:

Sidebar always 250px

Cards start 200px, grow/shrink equally to fill remaining container space

11. Question – Equal Divs with Min-Max Width

Scenario: Two divs, initial 50% width, grow but not less than 200px

Code:

.div { flex: 1 1 50%; min-width:200px; }


Answer:

Initial 50%

Grow equally if container larger

Shrink to min-width 200px

12. Question – Dashboard Priority Cards

Scenario: Large card should get more space than small card

Code:

.card-large { flex: 3 1 200px; }
.card-small { flex: 1 1 100px; }


Answer:

Large card gets 3x growth space

Shrink proportionally when container smaller

13. Question – Equal 2 Divs, Shrink Only

Scenario: Two divs, each 50%, grow disabled, shrink allowed

Code:

.div { flex: 0 1 50%; }


Answer:

Initial 50% width

Items do not grow

Items shrink equally on smaller container

14. Question – Fixed Left + Percentage Right

Scenario: Left sidebar 300px, right content 50% width initially, grow/shrink

Code:

.left { flex: 0 0 300px; }
.right { flex: 1 1 50%; }


Answer:

Left fixed 300px

Right starts 50% of remaining container

Shrinks and grows with container

15. Question – Advanced Logic-based Flex

Scenario: 3 items, container width 900px

Code:

.item1 { flex: 2 1 100px; }
.item2 { flex: 1 1 200px; }
.item3 { flex: 3 1 150px; }


Answer:

Total flex-basis = 100+200+150=450px

Remaining 450px → grow ratio 2:1:3 → 450/6=75px per part

item1: 100 + 2*75 = 250px

item2: 200 + 1*75 = 275px

item3: 150 + 3*75 = 375px

अगर आप चाहो तो मैं इसे Ultimate Flex Shorthand + Flex Grow/Shrink/Basis Mastery Interview Set में consolidate कर दूँ:

All advanced scenario-based examples

Equal divs, unequal divs, fixed + flexible, responsive cards

Multi-row, dashboard, hero-section, sidebar layouts

Interview-ready answers with code and calculation examples

यह senior-level interview + real-world project reference के लिए perfect होगा।