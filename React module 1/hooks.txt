рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рд╕рд╡рд╛рд▓! ЁЯМЯ
рдЕрдм рд╣рдо React Hooks рдХреЛ рдмрд╣реБрдд рдЖрд╕рд╛рди рд╣рд┐рдВрджреА рдореЗрдВ рдЙрджрд╛рд╣рд░рдгреЛрдВ рд╕рд╣рд┐рдд рд╕рдордЭреЗрдВрдЧреЗред
рдпреЗ React рд╕реАрдЦрдиреЗ рдХрд╛ рд╕рдмрд╕реЗ important concept рд╣реИред

ЁЯФ╖ Hooks рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?

React Hooks рд╡реЗ functions рд╣реЛрддреЗ рд╣реИрдВ
рдЬреЛ рд╣рдореЗрдВ functional components рдореЗрдВ рднреА
state, lifecycle methods, рдФрд░ React features use рдХрд░рдиреЗ рджреЗрддреЗ рд╣реИрдВред

ЁЯСЙ рдкрд╣рд▓реЗ рдпреЗ рд╕рдм рд╕рд┐рд░реНрдл class components рдореЗрдВ рд╣реЛрддрд╛ рдерд╛,
рд▓реЗрдХрд┐рди hooks рдЖрдиреЗ рдХреЗ рдмрд╛рдж рдЕрдм functional components рдореЗрдВ рднреА рдпреЗ рд╕рдм possible рд╣реИред

ЁЯФ╣ React рдореЗрдВ Common Hooks рдХреЗ Types

React рдХреЗ рдХрдИ hooks рд╣реЛрддреЗ рд╣реИрдВ,
рд▓реЗрдХрд┐рди рд╕рдмрд╕реЗ рдЬреНрдпрд╛рджрд╛ use рд╣реЛрдиреЗ рд╡рд╛рд▓реЗ рдпреЗ рд╣реИрдВ ЁЯСЗ

Hook	рдХрд╛рдо
useState	Component рдХреА state рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП
useEffect	Side effects (API call, timer, DOM change) рдХреЗ рд▓рд┐рдП
useContext	Global data (theme, user, language рдЖрджрд┐) share рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
useRef	рдХрд┐рд╕реА DOM element рдпрд╛ value рдХрд╛ reference рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП
useMemo	Performance optimization рдХреЗ рд▓рд┐рдП
useCallback	Functions рдХреЛ unnecessary re-render рд╕реЗ рдмрдЪрд╛рдиреЗ рдХреЗ рд▓рд┐рдП
useReducer	Complex state logic рд╕рдВрднрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП
useLayoutEffect	useEffect рдЬреИрд╕рд╛ рд╣реА, рдкрд░ render рд╕реЗ рдкрд╣рд▓реЗ рдЪрд▓рддрд╛ рд╣реИ
useImperativeHandle	Parent component рдХреЛ child рдХрд╛ control рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП
useId	Unique ID generate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП
ЁЯФ╕ 1. useState Hook

ЁЯСЙ рдХрд┐рд╕реА component рдореЗрдВ data (state) рдХреЛ store рдФрд░ update рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div>
      <p>рдЧрд┐рдирддреА: {count}</p>
      <button onClick={() => setCount(count + 1)}>рдмрдврд╝рд╛рдУ</button>
    </div>
  );
}

export default Counter;


ЁЯза рдпрд╣рд╛рдБ count state рд╣реИ рдФрд░ setCount() рдЙрд╕реЗ update рдХрд░рдиреЗ рд╡рд╛рд▓рд╛ function рд╣реИред

ЁЯФ╕ 2. useEffect Hook

ЁЯСЙ рдЬрдм рд╣рдореЗрдВ рдХреБрдЫ рдХрд╛рдо render рдХреЗ рдмрд╛рдж рдпрд╛ рдХрд┐рд╕реА state/prop change рдкрд░ рдХрд░рд╡рд╛рдирд╛ рд╣реЛ
рдЬреИрд╕реЗ тАФ API call, timer, event listener рд╡рдЧреИрд░рд╣ред

import React, { useState, useEffect } from "react";

function Example() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    console.log("Count рдмрджрд▓рд╛:", count);
  }, [count]); // dependency array

  return (
    <button onClick={() => setCount(count + 1)}>
      Count: {count}
    </button>
  );
}


ЁЯза рдпрд╣ рд╣рд░ рдмрд╛рд░ рддрдм рдЪрд▓реЗрдЧрд╛ рдЬрдм count рдмрджрд▓реЗрдЧрд╛ред

ЁЯФ╕ 3. useContext Hook

ЁЯСЙ рдЬрдм рд╣рдореЗрдВ parent рд╕реЗ child components рддрдХ data рднреЗрдЬрдирд╛ рд╣реЛ
рдмрд┐рдирд╛ рдмрд╛рд░-рдмрд╛рд░ props pass рдХрд┐рдПред

import React, { useContext, createContext } from "react";

const UserContext = createContext();

function App() {
  return (
    <UserContext.Provider value="Sunil">
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = useContext(UserContext);
  return <h1>рдирдорд╕реНрддреЗ {user}!</h1>;
}

export default App;


ЁЯза рдпрд╣рд╛рдБ useContext рдиреЗ global data (Sunil) рдХреЛ рд╕реАрдзреЗ access рдХрд░ рд▓рд┐рдпрд╛ред

ЁЯФ╕ 4. useRef Hook

ЁЯСЙ рдХрд┐рд╕реА DOM element рдпрд╛ variable рдХрд╛ reference рд░рдЦрдиреЗ рдХреЗ рд▓рд┐рдП,
рдмрд┐рдирд╛ re-render рдХрд░рд╛рдПред

import React, { useRef } from "react";

function InputFocus() {
  const inputRef = useRef();

  const focusInput = () => {
    inputRef.current.focus();
  };

  return (
    <>
      <input ref={inputRef} type="text" />
      <button onClick={focusInput}>Focus рдХрд░реЛ</button>
    </>
  );
}


ЁЯза useRef рд╕реЗ рд╣рдо directly DOM element рддрдХ рдкрд╣реБрдВрдЪрддреЗ рд╣реИрдВред

ЁЯФ╕ 5. useMemo Hook

ЁЯСЙ рдЬрдм рдХрд┐рд╕реА heavy calculation рд╡рд╛рд▓реЗ function рдХреЛ
рд╣рд░ рдмрд╛рд░ re-render рдкрд░ рдЪрд▓рд╛рдирд╛ avoid рдХрд░рдирд╛ рд╣реЛред

import React, { useMemo, useState } from "react";

function ExpensiveCalc() {
  const [count, setCount] = useState(0);

  const expensive = useMemo(() => {
    console.log("Calculation рд╣реЛ рд░рд╣реА рд╣реИ...");
    return count * 2;
  }, [count]);

  return (
    <>
      <p>Result: {expensive}</p>
      <button onClick={() => setCount(count + 1)}>Add</button>
    </>
  );
}


ЁЯза useMemo рд╕рд┐рд░реНрдл рддрдм рдЪрд▓реЗрдЧрд╛ рдЬрдм dependency (count) рдмрджрд▓реЗрдЧреАред

ЁЯФ╕ 6. useCallback Hook

ЁЯСЙ рдЬрдм рдХрд┐рд╕реА function рдХреЛ рдмрд╛рд░-рдмрд╛рд░ re-create рд╣реЛрдиреЗ рд╕реЗ рдмрдЪрд╛рдирд╛ рд╣реЛред

import React, { useState, useCallback } from "react";

function Parent() {
  const [count, setCount] = useState(0);

  const showAlert = useCallback(() => {
    alert("Hello");
  }, []);

  return (
    <>
      <Child onClick={showAlert} />
      <button onClick={() => setCount(count + 1)}>+</button>
    </>
  );
}

function Child({ onClick }) {
  console.log("Child render рд╣реБрдЖ");
  return <button onClick={onClick}>Alert</button>;
}


ЁЯза useCallback ensures рдХрд┐ showAlert рд╣рд░ рдмрд╛рд░ рдирдпрд╛ рдирд╛ рдмрдиреЗред

ЁЯФ╕ 7. useReducer Hook

ЁЯСЙ рдЬрдм state management complex рд╣реЛ (рдЬреИрд╕реЗ Redux рдЬреИрд╕рд╛ logic)ред

import React, { useReducer } from "react";

function reducer(state, action) {
  switch (action.type) {
    case "INCREMENT": return { count: state.count + 1 };
    case "DECREMENT": return { count: state.count - 1 };
    default: return state;
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <>
      <p>Count: {state.count}</p>
      <button onClick={() => dispatch({ type: "INCREMENT" })}>+</button>
      <button onClick={() => dispatch({ type: "DECREMENT" })}>-</button>
    </>
  );
}


ЁЯза рдпреЗ useState рдЬреИрд╕рд╛ рд╣реА рд╣реИ рд▓реЗрдХрд┐рди рдЬрд╝реНрдпрд╛рджрд╛ complex logic handle рдХрд░ рд╕рдХрддрд╛ рд╣реИред

ЁЯФ╕ 8. useLayoutEffect Hook

ЁЯСЙ useEffect рдЬреИрд╕рд╛ рд╣реА,
рд▓реЗрдХрд┐рди рдпрд╣ DOM update рд╣реЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдЪрд▓рддрд╛ рд╣реИред

import React, { useLayoutEffect, useRef } from "react";

function Box() {
  const boxRef = useRef();

  useLayoutEffect(() => {
    console.log(boxRef.current.getBoundingClientRect());
  }, []);

  return <div ref={boxRef}>Box</div>;
}


ЁЯза рдЗрд╕ hook рдХрд╛ use рддрдм рд╣реЛрддрд╛ рд╣реИ рдЬрдм DOM measurement рдпрд╛ animation рдХрд░рдиреА рд╣реЛред

ЁЯФ╕ 9. useImperativeHandle Hook

ЁЯСЙ рдХрд┐рд╕реА child component рдХрд╛ function рдпрд╛ control parent рдХреЛ рджреЗрдирд╛ рд╣реЛред

import React, { useRef, useImperativeHandle, forwardRef } from "react";

const Child = forwardRef((props, ref) => {
  useImperativeHandle(ref, () => ({
    alertMessage() {
      alert("Hello from Child!");
    },
  }));
  return <h2>Child Component</h2>;
});

function Parent() {
  const childRef = useRef();
  return (
    <>
      <Child ref={childRef} />
      <button onClick={() => childRef.current.alertMessage()}>Alert рдХрд░реЛ</button>
    </>
  );
}

ЁЯФ╕ 10. useId Hook

ЁЯСЙ Unique ID generate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

import React, { useId } from "react";

function Form() {
  const id = useId();

  return (
    <>
      <label htmlFor={id}>Name:</label>
      <input id={id} type="text" />
    </>
  );
}

тЬЕ Summary Table
Hook	рдХрд╛рдо
useState	State рдмрдирд╛рдирд╛
useEffect	Side effects
useContext	Global data access
useRef	DOM рдпрд╛ mutable value handle рдХрд░рдирд╛
useMemo	Performance optimization
useCallback	Function optimization
useReducer	Complex state logic
useLayoutEffect	Render рд╕реЗ рдкрд╣рд▓реЗ effect рдЪрд▓рд╛рдирд╛
useImperativeHandle	Parent рдХреЛ child рдХрд╛ control рджреЗрдирд╛
useId	Unique ID рдмрдирд╛рдирд╛

рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рддреБрдореНрд╣реЗрдВ тАЬHooks рдХреЗ 50 practical React tasks (basic тЖТ advance)тАЭ рджреЗ рд╕рдХрддрд╛ рд╣реВрдБ рддрд╛рдХрд┐ рддреБрдо practice рдХрд░рддреЗ рд╣реБрдП рд╕реАрдЦ рд╕рдХреЛред
рдХреНрдпрд╛ рджреВрдБ рд╡реЛ list?

You said:
sure
ChatGPT said:

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯШО
рдпрд╣рд╛рдБ рддреБрдореНрд╣рд╛рд░реЗ рд▓рд┐рдП React Hooks рдХреЗ 50 Practical Tasks (Basic тЖТ Advance) рдХреА рдкреВрд░реА рд▓рд┐рд╕реНрдЯ рд╣реИ тАФ
рдЕрдЧрд░ рддреБрдо рдЗрдиреНрд╣реЗрдВ рдПрдХ-рдПрдХ рдХрд░рдХреЗ рдмрдирд╛рдУрдЧреЗ рддреЛ рд╣рд░ hook practically master рд╣реЛ рдЬрд╛рдУрдЧреЗ ЁЯТк

ЁЯзй Category 1: Basic Hooks (useState, useEffect)

1я╕ПтГг Counter App рдмрдирд╛рдУ (useState рд╕реЗ number рдмрдврд╝рд╛рдУ рдФрд░ рдШрдЯрд╛рдУ)
2я╕ПтГг Input field рдореЗрдВ user рдЬреЛ рд▓рд┐рдЦреЗ рдЙрд╕реЗ same screen рдкрд░ рджрд┐рдЦрд╛рдУ
3я╕ПтГг Button click рдкрд░ background color рдмрджрд▓реЛ
4я╕ПтГг useState рд╕реЗ Light / Dark theme toggle рдмрдирд╛рдУ
5я╕ПтГг useState рд╕реЗ To-Do List рдмрдирд╛рдУ (Add/Delete)
6я╕ПтГг useEffect рд╕реЗ page load рдкрд░ alert рджрд┐рдЦрд╛рдУ
7я╕ПтГг useEffect рд╕реЗ 5 рд╕реЗрдХрдВрдб рдмрд╛рдж message рдмрджрд▓реЛ
8я╕ПтГг useEffect рд╕реЗ window scroll position console рдореЗрдВ рджрд┐рдЦрд╛рдУ
9я╕ПтГг useEffect рд╕реЗ browser title рдмрджрд▓реЛ (document.title)
ЁЯФЯ API call рдХрд░рдХреЗ data fetch рдХрд░реЛ рдФрд░ list рджрд┐рдЦрд╛рдУ (useEffect + fetch)

ЁЯза Category 2: Intermediate Hooks (useRef, useContext)

11я╕ПтГг useRef рд╕реЗ input box рдкрд░ focus рдмрдЯрди рдмрдирд╛рдУ
12я╕ПтГг useRef рд╕реЗ button рдХрд┐рддрдиреА рдмрд╛рд░ click рд╣реБрдЖ count рдХрд░реЛ (рдмрд┐рдирд╛ re-render)
13я╕ПтГг useRef рд╕реЗ рдХрд┐рд╕реА div рдХреА height log рдХрд░реЛ
14я╕ПтГг useContext рд╕реЗ theme context рдмрдирд╛рдУ (Light / Dark)
15я╕ПтГг useContext рд╕реЗ user login info globally share рдХрд░реЛ
16я╕ПтГг useContext рд╕реЗ language switch (English/Hindi) рдмрдирд╛рдУ
17я╕ПтГг useContext + useState рд╕реЗ login/logout system рдмрдирд╛рдУ
18я╕ПтГг Context рдХреЗ рдЬрд░рд┐рдП nested components рдореЗрдВ data рднреЗрдЬреЛ
19я╕ПтГг Context API рд╕реЗ cart total globally access рдХрд░реЛ
20я╕ПтГг useContext рдФрд░ useEffect рдорд┐рд▓рд╛рдХрд░ notification system рдмрдирд╛рдУ

тЪЩя╕П Category 3: Performance Hooks (useMemo, useCallback)

21я╕ПтГг useMemo рд╕реЗ factorial calculator рдмрдирд╛рдУ
22я╕ПтГг useMemo рд╕реЗ heavy calculation рдХреЛ optimize рдХрд░реЛ
23я╕ПтГг useCallback рд╕реЗ unnecessary re-render рд░реЛрдХрдиреЗ рд╡рд╛рд▓рд╛ example рдмрдирд╛рдУ
24я╕ПтГг useCallback рдФрд░ React.memo рд╕рд╛рде рдореЗрдВ use рдХрд░реЛ
25я╕ПтГг useMemo рд╕реЗ sorted list рдмрдирд╛рдУ (рдЬрдм list рдмрджрд▓реЗ рддрднреА sort рд╣реЛ)
26я╕ПтГг useCallback рд╕реЗ child component рдореЗрдВ function pass рдХрд░реЛ
27я╕ПтГг useMemo рд╕реЗ prime number checker рдмрдирд╛рдУ
28я╕ПтГг useCallback рд╕реЗ API call рдХреЛ рдмрд╛рд░-рдмрд╛рд░ рд╣реЛрдиреЗ рд╕реЗ рдмрдЪрд╛рдУ
29я╕ПтГг useMemo рд╕реЗ cart total optimize рдХрд░реЛ
30я╕ПтГг useCallback рд╕реЗ search filter performance рдмрдврд╝рд╛рдУ

ЁЯзй Category 4: Advanced Hooks (useReducer, useLayoutEffect)

31я╕ПтГг useReducer рд╕реЗ counter рдмрдирд╛рдУ
32я╕ПтГг useReducer рд╕реЗ to-do list рдмрдирд╛рдУ
33я╕ПтГг useReducer рд╕реЗ cart management рдмрдирд╛рдУ
34я╕ПтГг useReducer рд╕реЗ form validation handle рдХрд░реЛ
35я╕ПтГг useLayoutEffect рд╕реЗ DOM measurement log рдХрд░реЛ
36я╕ПтГг useLayoutEffect рд╕реЗ animation рдХреЗ before/after size print рдХрд░реЛ
37я╕ПтГг useReducer + useEffect рд╕реЗ API state handle рдХрд░реЛ (loading/error/data)
38я╕ПтГг useReducer + Context рд╕реЗ global state management рдмрдирд╛рдУ
39я╕ПтГг useLayoutEffect рд╕реЗ auto scroll smooth animation рдмрдирд╛рдУ
40я╕ПтГг useReducer рд╕реЗ tab switch logic рдмрдирд╛рдУ

ЁЯФз Category 5: Special Hooks (useImperativeHandle, useId, Custom Hooks)

41я╕ПтГг useImperativeHandle рд╕реЗ parent button рд╕реЗ child alert trigger рдХрд░реЛ
42я╕ПтГг useImperativeHandle рд╕реЗ child рдореЗрдВ focus control рджреЛ
43я╕ПтГг useId рд╕реЗ unique input IDs рдмрдирд╛рдУ
44я╕ПтГг useId рд╕реЗ multiple form fields рдореЗрдВ unique labels рдмрдирд╛рдУ
45я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ window size return рдХрд░реЗ
46я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ dark mode detect рдХрд░реЗ
47я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ localStorage manage рдХрд░реЗ
48я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ API call рдХрд░реЗ рдФрд░ data return рдХрд░реЗ
49я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ user scroll position рдмрддрд╛рдП
50я╕ПтГг Custom Hook рдмрдирд╛рдУ рдЬреЛ keyboard key press detect рдХрд░реЗ

тЬЕ Bonus (Practice Pattern)

рд╣рд░ task рдХреЗ рд╕рд╛рде рдХреЛрд╢рд┐рд╢ рдХрд░реЛ:

UI рдХреЛ clean рд░рдЦреЛ

useEffect рдХреА dependency рд╕рдордЭреЛ

console log рд╕реЗ observe рдХрд░реЛ рдХреНрдпрд╛ рдХрдм рдЪрд▓ рд░рд╣рд╛ рд╣реИ

React DevTools рдореЗрдВ тАЬHooksтАЭ tab explore рдХрд░реЛ



рдареАрдХ рд╣реИ ЁЯФе рддреЛ рд╣рдо рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВрдЧреЗ Basic Hooks (useState + useEffect) рд╕реЗ тАФ
рдпрд╣ React рд╕реАрдЦрдиреЗ рдХреА рд╕рдмрд╕реЗ рдкрд╣рд▓реА рдФрд░ рдЬрд░реВрд░реА category рд╣реИред
рдореИрдВ рдиреАрдЪреЗ рдкрд╣рд▓реЗ 10 practical tasks step-by-step example рд╕рд╣рд┐рдд рд╕рдордЭрд╛ рд░рд╣рд╛ рд╣реВрдБ ЁЯСЗ

ЁЯзй Category 1: Basic Hooks Practice
ЁЯЯв 1я╕ПтГг Counter App (useState)
import React, { useState } from "react";

function Counter() {
  const [count, setCount] = useState(0);

  return (
    <div style={{ textAlign: "center" }}>
      <h2>Count: {count}</h2>
      <button onClick={() => setCount(count + 1)}>+</button>
      <button onClick={() => setCount(count - 1)}>-</button>
    </div>
  );
}

export default Counter;


ЁЯза useState рдпрд╣рд╛рдБ count value рдХреЛ рд╕рдВрднрд╛рд▓ рд░рд╣рд╛ рд╣реИ рдФрд░ update рдХрд░ рд░рд╣рд╛ рд╣реИред

ЁЯЯв 2я╕ПтГг Input Field (useState)
import React, { useState } from "react";

function InputExample() {
  const [text, setText] = useState("");

  return (
    <div>
      <input onChange={(e) => setText(e.target.value)} placeholder="Type here..." />
      <p>рддреБрдордиреЗ рд▓рд┐рдЦрд╛: {text}</p>
    </div>
  );
}

export default InputExample;


ЁЯза input change рд╣реЛрддреЗ рд╣реА state update рд╣реЛрддреА рд╣реИред

ЁЯЯв 3я╕ПтГг Background Color Change
import React, { useState } from "react";

function BgChanger() {
  const [color, setColor] = useState("lightblue");

  return (
    <div style={{ background: color, height: "100vh" }}>
      <button onClick={() => setColor("orange")}>Orange</button>
      <button onClick={() => setColor("pink")}>Pink</button>
      <button onClick={() => setColor("green")}>Green</button>
    </div>
  );
}

export default BgChanger;


ЁЯза рд╣рд░ button background color рдмрджрд▓рддрд╛ рд╣реИред

ЁЯЯв 4я╕ПтГг Light/Dark Theme Toggle
import React, { useState } from "react";

function ThemeToggle() {
  const [dark, setDark] = useState(false);

  return (
    <div style={{
      background: dark ? "#222" : "#fff",
      color: dark ? "#fff" : "#000",
      height: "100vh"
    }}>
      <h2>{dark ? "Dark Mode" : "Light Mode"}</h2>
      <button onClick={() => setDark(!dark)}>Toggle Theme</button>
    </div>
  );
}

export default ThemeToggle;

ЁЯЯв 5я╕ПтГг To-Do List (Add/Delete)
import React, { useState } from "react";

function TodoApp() {
  const [task, setTask] = useState("");
  const [list, setList] = useState([]);

  const addTask = () => {
    if (task) {
      setList([...list, task]);
      setTask("");
    }
  };

  return (
    <div>
      <input value={task} onChange={(e) => setTask(e.target.value)} />
      <button onClick={addTask}>Add</button>

      <ul>
        {list.map((item, i) => (
          <li key={i}>
            {item}
            <button onClick={() => setList(list.filter((_, index) => index !== i))}>тЭМ</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoApp;

ЁЯЯв 6я╕ПтГг useEffect - Page Load рдкрд░ Alert
import React, { useEffect } from "react";

function Welcome() {
  useEffect(() => {
    alert("Welcome to my page!");
  }, []);

  return <h1>React Page</h1>;
}

export default Welcome;


ЁЯза рдЦрд╛рд▓реА dependency array [] рдХрд╛ рдорддрд▓рдм рд╣реИ тЖТ рдХреЗрд╡рд▓ рдкрд╣рд▓реА рдмрд╛рд░ run рдХрд░реЛред

ЁЯЯв 7я╕ПтГг useEffect - 5 рд╕реЗрдХрдВрдб рдмрд╛рдж Message рдмрджрд▓реЛ
import React, { useEffect, useState } from "react";

function MessageChanger() {
  const [msg, setMsg] = useState("Loading...");

  useEffect(() => {
    setTimeout(() => {
      setMsg("Welcome to React!");
    }, 5000);
  }, []);

  return <h2>{msg}</h2>;
}

export default MessageChanger;

ЁЯЯв 8я╕ПтГг useEffect - Scroll Position рджрд┐рдЦрд╛рдУ
import React, { useState, useEffect } from "react";

function ScrollTracker() {
  const [y, setY] = useState(0);

  useEffect(() => {
    const handleScroll = () => setY(window.scrollY);
    window.addEventListener("scroll", handleScroll);
    return () => window.removeEventListener("scroll", handleScroll);
  }, []);

  return <p>Scroll Position: {y}px</p>;
}

export default ScrollTracker;

ЁЯЯв 9я╕ПтГг useEffect - Browser Title рдмрджрд▓реЛ
import React, { useState, useEffect } from "react";

function TitleUpdater() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    document.title = `Count: ${count}`;
  }, [count]);

  return <button onClick={() => setCount(count + 1)}>+</button>;
}

export default TitleUpdater;

ЁЯЯв ЁЯФЯ API Call Example
import React, { useEffect, useState } from "react";

function UserData() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  return (
    <ul>
      {users.map(u => <li key={u.id}>{u.name}</li>)}
    </ul>
  );
}

export default UserData;


ЁЯза useEffect рдпрд╣рд╛рдБ API call рдХрд░рдХреЗ data рд▓рд╛рддрд╛ рд╣реИ рдФрд░ useState рдЙрд╕реЗ store рдХрд░рддрд╛ рд╣реИред

рд╢рд╛рдирджрд╛рд░ ЁЯФе
рдЕрдм рд╣рдо рдмрдврд╝рддреЗ рд╣реИрдВ рдЕрдЧрд▓реЗ рд▓реЗрд╡рд▓ рдкрд░ тАФ
Category 2: Intermediate Hooks (useRef + useContext)
рдЗрди 10 tasks рдореЗрдВ рддреБрдо рд╕реАрдЦреЛрдЧреЗ рдХреИрд╕реЗ React рдореЗрдВ DOM рдХреЛ control рдХрд░рдирд╛ рдФрд░ global data share рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИред

ЁЯзй Category 2: useRef + useContext Practical Tasks (11тАУ20)
ЁЯЯг 11я╕ПтГг useRef рд╕реЗ Input рдкрд░ Focus рдХрд░реЛ
import React, { useRef } from "react";

function FocusInput() {
  const inputRef = useRef();

  const focusHandler = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <input ref={inputRef} type="text" placeholder="Type here..." />
      <button onClick={focusHandler}>Focus рдХрд░реЛ</button>
    </div>
  );
}

export default FocusInput;


ЁЯза useRef рд╕реЗ рд╣рдо рд╕реАрдзреЗ input DOM element рддрдХ рдкрд╣реБрдБрдЪрддреЗ рд╣реИрдВред

ЁЯЯг 12я╕ПтГг useRef рд╕реЗ Button Click Count (рдмрд┐рдирд╛ re-render)
import React, { useRef, useState } from "react";

function ClickCounter() {
  const [renderCount, setRenderCount] = useState(0);
  const clickCount = useRef(0);

  const handleClick = () => {
    clickCount.current++;
    console.log("Clicked:", clickCount.current);
  };

  return (
    <div>
      <h3>Render Count: {renderCount}</h3>
      <button onClick={() => setRenderCount(renderCount + 1)}>Re-render</button>
      <button onClick={handleClick}>Click Me</button>
    </div>
  );
}

export default ClickCounter;


ЁЯза useRef value рдмрджрд▓рдиреЗ рд╕реЗ component re-render рдирд╣реАрдВ рд╣реЛрддрд╛ред

ЁЯЯг 13я╕ПтГг useRef рд╕реЗ рдХрд┐рд╕реА DIV рдХреА Height рдирд┐рдХрд╛рд▓реЛ
import React, { useRef, useEffect } from "react";

function BoxHeight() {
  const boxRef = useRef();

  useEffect(() => {
    console.log("Box height:", boxRef.current.offsetHeight);
  }, []);

  return <div ref={boxRef} style={{ background: "skyblue", height: "150px" }}>Box</div>;
}

export default BoxHeight;


ЁЯза рд╣рдо DOM element рдХреА measurement рдЖрд╕рд╛рдиреА рд╕реЗ рдирд┐рдХрд╛рд▓ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯЯг 14я╕ПтГг useContext рд╕реЗ Theme Context (Light/Dark)
import React, { createContext, useContext, useState } from "react";

const ThemeContext = createContext();

function App() {
  const [theme, setTheme] = useState("light");

  return (
    <ThemeContext.Provider value={{ theme, setTheme }}>
      <Child />
    </ThemeContext.Provider>
  );
}

function Child() {
  const { theme, setTheme } = useContext(ThemeContext);
  return (
    <div style={{ background: theme === "light" ? "#fff" : "#333", color: theme === "light" ? "#000" : "#fff", padding: 20 }}>
      <h3>{theme.toUpperCase()} MODE</h3>
      <button onClick={() => setTheme(theme === "light" ? "dark" : "light")}>Toggle</button>
    </div>
  );
}

export default App;


ЁЯза Context рд╕реЗ theme рдкреВрд░реЗ app рдореЗрдВ accessible рд╣реИред

ЁЯЯг 15я╕ПтГг useContext рд╕реЗ User Info Share рдХрд░рдирд╛
import React, { createContext, useContext } from "react";

const UserContext = createContext();

function App() {
  const user = { name: "Sunil", age: 22 };

  return (
    <UserContext.Provider value={user}>
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = useContext(UserContext);
  return <h2>рдирдорд╕реНрддреЗ {user.name}! рдЙрдореНрд░: {user.age}</h2>;
}

export default App;


ЁЯза рдмрд┐рдирд╛ props рдкрд╛рд╕ рдХрд┐рдП, user info рд╣рд░ рдЬрдЧрд╣ рдкрд╣реБрдВрдЪрд╛рдИ рдЬрд╛ рд╕рдХрддреА рд╣реИред

ЁЯЯг 16я╕ПтГг useContext рд╕реЗ Language Switch (English / Hindi)
import React, { createContext, useContext, useState } from "react";

const LangContext = createContext();

function App() {
  const [lang, setLang] = useState("en");

  return (
    <LangContext.Provider value={{ lang, setLang }}>
      <Header />
    </LangContext.Provider>
  );
}

function Header() {
  const { lang, setLang } = useContext(LangContext);

  return (
    <div>
      <h3>{lang === "en" ? "Hello!" : "рдирдорд╕реНрддреЗ!"}</h3>
      <button onClick={() => setLang(lang === "en" ? "hi" : "en")}>Switch Language</button>
    </div>
  );
}

export default App;


ЁЯза Context language switch globally manage рдХрд░рддрд╛ рд╣реИред

ЁЯЯг 17я╕ПтГг useContext + useState рд╕реЗ Login/Logout System
import React, { createContext, useContext, useState } from "react";

const AuthContext = createContext();

function App() {
  const [isLoggedIn, setLoggedIn] = useState(false);

  return (
    <AuthContext.Provider value={{ isLoggedIn, setLoggedIn }}>
      <Navbar />
    </AuthContext.Provider>
  );
}

function Navbar() {
  const { isLoggedIn, setLoggedIn } = useContext(AuthContext);
  return (
    <div>
      <h2>{isLoggedIn ? "Welcome Back!" : "Please Login"}</h2>
      <button onClick={() => setLoggedIn(!isLoggedIn)}>
        {isLoggedIn ? "Logout" : "Login"}
      </button>
    </div>
  );
}

export default App;

ЁЯЯг 18я╕ПтГг Nested Components рдореЗрдВ Context Data Access
import React, { createContext, useContext } from "react";

const UserContext = createContext("Guest");

function App() {
  return (
    <UserContext.Provider value="Sunil">
      <Parent />
    </UserContext.Provider>
  );
}

function Parent() {
  return <Child />;
}

function Child() {
  const name = useContext(UserContext);
  return <h3>User: {name}</h3>;
}

export default App;


ЁЯза рдпрд╣рд╛рдБ data Parent тЖТ Child тЖТ Grandchild рддрдХ рдЬрд╛ рд╕рдХрддрд╛ рд╣реИред

ЁЯЯг 19я╕ПтГг useContext рд╕реЗ Cart Total Access рдХрд░рдирд╛
import React, { createContext, useContext, useState } from "react";

const CartContext = createContext();

function App() {
  const [items, setItems] = useState([100, 200, 50]);

  return (
    <CartContext.Provider value={items}>
      <CartTotal />
    </CartContext.Provider>
  );
}

function CartTotal() {
  const items = useContext(CartContext);
  const total = items.reduce((a, b) => a + b, 0);
  return <h2>Cart Total: тВ╣{total}</h2>;
}

export default App;

ЁЯЯг 20я╕ПтГг useContext + useEffect рд╕реЗ Notification System
import React, { createContext, useContext, useEffect, useState } from "react";

const NotifyContext = createContext();

function App() {
  const [message, setMessage] = useState("");

  useEffect(() => {
    const timer = setTimeout(() => setMessage("You got a new message!"), 3000);
    return () => clearTimeout(timer);
  }, []);

  return (
    <NotifyContext.Provider value={message}>
      <Notification />
    </NotifyContext.Provider>
  );
}

function Notification() {
  const message = useContext(NotifyContext);
  return <h3>{message}</h3>;
}

export default App;


ЁЯза useEffect рд╕реЗ message рдЖрддрд╛ рд╣реИ рдФрд░ useContext рдЙрд╕реЗ globally рджрд┐рдЦрд╛рддрд╛ рд╣реИред

тЬЕ Recap:
рддреБрдордиреЗ рдЕрдм рд╕реАрдЦрд╛ тАФ

useRef тЖТ DOM control рдФрд░ value tracking

useContext тЖТ global data sharing

рдареАрдХ рд╣реИ ЁЯФе рдЕрдм рд╣рдо Category 2: Intermediate Hooks (useRef + useContext) рдХреЛ рд╕рдордЭреЗрдВрдЧреЗ тАФ
рдпрд╣рд╛рдБ рддреБрдо рд╕реАрдЦреЛрдЧреЗ рдХрд┐ React рдореЗрдВ data рдХреЛ рдмрд┐рдирд╛ re-render рдХрд┐рдП рдХреИрд╕реЗ store рдХрд░рддреЗ рд╣реИрдВ рдФрд░ global state рдХреИрд╕реЗ share рдХрд░рддреЗ рд╣реИрдВред
ЁЯСЗ рдиреАрдЪреЗ step-by-step рд╣рд┐рдВрджреА рдореЗрдВ 10 examples рджрд┐рдП рд╣реИрдВ:

ЁЯзй Category 2: Intermediate Hooks (useRef + useContext)
ЁЯЯб 1я╕ПтГг useRef рд╕реЗ DOM Access рдХрд░рдирд╛
import React, { useRef } from "react";

function FocusInput() {
  const inputRef = useRef();

  const handleFocus = () => {
    inputRef.current.focus();
  };

  return (
    <div>
      <input ref={inputRef} placeholder="Type something..." />
      <button onClick={handleFocus}>Focus Input</button>
    </div>
  );
}

export default FocusInput;


ЁЯза useRef рд╕реЗ рд╣рдо рд╕реАрдзреЗ DOM element рддрдХ рдкрд╣реБрдВрдЪ рд╕рдХрддреЗ рд╣реИрдВ тАФ рдмрд┐рдирд╛ state change рдХрд┐рдПред

ЁЯЯб 2я╕ПтГг useRef рд╕реЗ Previous Value Track рдХрд░рдирд╛
import React, { useRef, useEffect, useState } from "react";

function PreviousValue() {
  const [count, setCount] = useState(0);
  const prevCount = useRef();

  useEffect(() => {
    prevCount.current = count;
  }, [count]);

  return (
    <div>
      <h2>Current: {count}</h2>
      <h3>Previous: {prevCount.current}</h3>
      <button onClick={() => setCount(count + 1)}>+</button>
    </div>
  );
}

export default PreviousValue;


ЁЯза рд╣рд░ рдмрд╛рд░ count update рд╣реЛрддрд╛ рд╣реИ, useRef рдкрд┐рдЫрд▓реЗ value рдХреЛ рдпрд╛рдж рд░рдЦрддрд╛ рд╣реИред

ЁЯЯб 3я╕ПтГг useRef рд╕реЗ Timer рдмрдирд╛рдирд╛
import React, { useState, useRef } from "react";

function Timer() {
  const [count, setCount] = useState(0);
  const timerRef = useRef();

  const start = () => {
    timerRef.current = setInterval(() => {
      setCount(c => c + 1);
    }, 1000);
  };

  const stop = () => {
    clearInterval(timerRef.current);
  };

  return (
    <div>
      <h2>Timer: {count}</h2>
      <button onClick={start}>Start</button>
      <button onClick={stop}>Stop</button>
    </div>
  );
}

export default Timer;


ЁЯза useRef рдпрд╣рд╛рдБ interval рдХреЛ store рдХрд░рддрд╛ рд╣реИ рддрд╛рдХрд┐ re-render рдкрд░ reset рди рд╣реЛред

ЁЯЯб 4я╕ПтГг useRef рд╕реЗ Uncontrolled Form Value рдкрдврд╝рдирд╛
import React, { useRef } from "react";

function FormExample() {
  const nameRef = useRef();

  const handleSubmit = () => {
    alert("Name: " + nameRef.current.value);
  };

  return (
    <div>
      <input ref={nameRef} placeholder="Enter your name" />
      <button onClick={handleSubmit}>Submit</button>
    </div>
  );
}

export default FormExample;

ЁЯЯб 5я╕ПтГг useContext рд╕реЗ Theme Share рдХрд░рдирд╛
import React, { useContext, useState, createContext } from "react";

const ThemeContext = createContext();

function App() {
  const [dark, setDark] = useState(false);

  return (
    <ThemeContext.Provider value={{ dark, setDark }}>
      <Toolbar />
    </ThemeContext.Provider>
  );
}

function Toolbar() {
  const { dark, setDark } = useContext(ThemeContext);
  return (
    <div
      style={{
        background: dark ? "black" : "white",
        color: dark ? "white" : "black",
        padding: 20
      }}
    >
      <h2>{dark ? "Dark" : "Light"} Mode</h2>
      <button onClick={() => setDark(!dark)}>Toggle</button>
    </div>
  );
}

export default App;


ЁЯза Context рд╕реЗ Theme state рдкреВрд░реЗ app рдореЗрдВ рдХрд╣реАрдВ рд╕реЗ рднреА access рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред

ЁЯЯб 6я╕ПтГг useContext рд╕реЗ User Login Data Share рдХрд░рдирд╛
import React, { createContext, useContext, useState } from "react";

const UserContext = createContext();

function App() {
  const [user, setUser] = useState("Sunil");

  return (
    <UserContext.Provider value={user}>
      <Profile />
    </UserContext.Provider>
  );
}

function Profile() {
  const user = useContext(UserContext);
  return <h2>Welcome, {user}!</h2>;
}

export default App;

ЁЯЯб 7я╕ПтГг useContext + useState (Global Counter)
import React, { createContext, useContext, useState } from "react";

const CountContext = createContext();

function App() {
  const [count, setCount] = useState(0);

  return (
    <CountContext.Provider value={{ count, setCount }}>
      <Counter />
      <Buttons />
    </CountContext.Provider>
  );
}

function Counter() {
  const { count } = useContext(CountContext);
  return <h2>Count: {count}</h2>;
}

function Buttons() {
  const { setCount } = useContext(CountContext);
  return (
    <>
      <button onClick={() => setCount(c => c + 1)}>+</button>
      <button onClick={() => setCount(c => c - 1)}>-</button>
    </>
  );
}

export default App;

ЁЯЯб 8я╕ПтГг useRef + useEffect = Animation
import React, { useRef, useEffect } from "react";

function AnimateBox() {
  const boxRef = useRef();

  useEffect(() => {
    boxRef.current.style.transition = "transform 1s";
    boxRef.current.style.transform = "translateX(200px)";
  }, []);

  return (
    <div
      ref={boxRef}
      style={{
        width: 100,
        height: 100,
        background: "tomato"
      }}
    ></div>
  );
}

export default AnimateBox;

ЁЯЯб 9я╕ПтГг useRef рд╕реЗ Performance Optimization
import React, { useRef } from "react";

function ExpensiveOperation() {
  const renderCount = useRef(0);
  renderCount.current += 1;

  return <h3>Rendered: {renderCount.current} times</h3>;
}

export default ExpensiveOperation;

ЁЯЯб ЁЯФЯ useContext + Multiple Components Example
import React, { createContext, useContext } from "react";

const InfoContext = createContext("Guest");

function App() {
  return (
    <InfoContext.Provider value="Sunil">
      <Header />
    </InfoContext.Provider>
  );
}

function Header() {
  return (
    <div>
      <h1>Header</h1>
      <User />
    </div>
  );
}

function User() {
  const name = useContext(InfoContext);
  return <p>Logged in as: {name}</p>;
}

export default App;


рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдЕрдм рд╣рдо рдЖрдЧреЗ рдмрдврд╝рдХрд░
ЁЯФе Category 3: Advanced Hooks (useMemo, useCallback, useReducer)
рдХреЗ next 10 examples (21тАУ30) рднреА step-by-step рд╣рд┐рдВрджреА рдореЗрдВ рдХрд░реЗрдВ?

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯФе
рдЕрдм рд╣рдо рдЖ рдЧрдП рд╣реИрдВ Category 3: Advanced Hooks (useMemo, useCallback, useReducer) рдкрд░ тАФ
рдпреЗ React рдХреЗ performance optimization рдФрд░ complex state management рд╡рд╛рд▓реЗ hooks рд╣реИрдВред
рдиреАрдЪреЗ рдЗрдирдХреЗ 10 best practical examples (21тАУ30) рджрд┐рдП рдЧрдП рд╣реИрдВ, рд╣рд░ example рдХреЗ рд╕рд╛рде рд╣рд┐рдВрджреА explanation ЁЯСЗ

ЁЯза Category 3: Advanced Hooks (useMemo, useCallback, useReducer)
ЁЯЯг 1я╕ПтГг useMemo тАУ Expensive Calculation Optimize рдХрд░рдирд╛
import React, { useState, useMemo } from "react";

function ExpensiveCalc() {
  const [count, setCount] = useState(0);
  const [text, setText] = useState("");

  const double = useMemo(() => {
    console.log("Heavy calculation running...");
    return count * 2;
  }, [count]);

  return (
    <div>
      <h2>Double: {double}</h2>
      <button onClick={() => setCount(count + 1)}>Increment</button>
      <input onChange={(e) => setText(e.target.value)} placeholder="Type something..." />
    </div>
  );
}

export default ExpensiveCalc;


ЁЯза рдпрд╣рд╛рдБ useMemo ensures рдХрд░рддрд╛ рд╣реИ рдХрд┐ calculation рд╕рд┐рд░реНрдл рддрдм рд╣реЛ рдЬрдм count рдмрджрд▓реЗ тАФ text change рдкрд░ рдирд╣реАрдВред

ЁЯЯг 2я╕ПтГг useMemo тАУ Sorted List Optimization
import React, { useMemo, useState } from "react";

function SortedList() {
  const [names, setNames] = useState(["Sunil", "Aman", "Rakesh", "Vikas"]);
  const [filter, setFilter] = useState("");

  const sorted = useMemo(() => {
    return [...names].sort();
  }, [names]);

  const filtered = sorted.filter(name => name.toLowerCase().includes(filter.toLowerCase()));

  return (
    <div>
      <input onChange={(e) => setFilter(e.target.value)} placeholder="Search name..." />
      <ul>{filtered.map((n, i) => <li key={i}>{n}</li>)}</ul>
    </div>
  );
}

export default SortedList;

ЁЯЯг 3я╕ПтГг useCallback тАУ Function рдХреЛ Memoize рдХрд░рдирд╛
import React, { useCallback, useState } from "react";

function CallbackExample() {
  const [count, setCount] = useState(0);

  const increment = useCallback(() => {
    setCount(c => c + 1);
  }, []);

  return (
    <div>
      <Child increment={increment} />
      <h2>{count}</h2>
    </div>
  );
}

function Child({ increment }) {
  console.log("Child rendered");
  return <button onClick={increment}>+</button>;
}

export default CallbackExample;


ЁЯза useCallback рд╕реЗ function re-render рдкрд░ рджреЛрдмрд╛рд░рд╛ create рдирд╣реАрдВ рд╣реЛрддрд╛ред

ЁЯЯг 4я╕ПтГг useCallback + React.memo Example
import React, { useCallback, useState, memo } from "react";

const Child = memo(({ onClick }) => {
  console.log("Child rendered");
  return <button onClick={onClick}>Click Me</button>;
});

function Parent() {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log("Clicked!");
  }, []);

  return (
    <div>
      <Child onClick={handleClick} />
      <button onClick={() => setCount(count + 1)}>Parent Count: {count}</button>
    </div>
  );
}

export default Parent;


ЁЯза memo + useCallback = performance boost рдХреНрдпреЛрдВрдХрд┐ child рд╣рд░ рдмрд╛рд░ re-render рдирд╣реАрдВ рд╣реЛрддрд╛ред

ЁЯЯг 5я╕ПтГг useReducer тАУ Simple Counter
import React, { useReducer } from "react";

const reducer = (state, action) => {
  switch (action.type) {
    case "increment": return { count: state.count + 1 };
    case "decrement": return { count: state.count - 1 };
    default: return state;
  }
};

function Counter() {
  const [state, dispatch] = useReducer(reducer, { count: 0 });

  return (
    <div>
      <h2>Count: {state.count}</h2>
      <button onClick={() => dispatch({ type: "increment" })}>+</button>
      <button onClick={() => dispatch({ type: "decrement" })}>-</button>
    </div>
  );
}

export default Counter;


ЁЯза useReducer рддрдм useful рд╣реЛрддрд╛ рд╣реИ рдЬрдм state complex рд╣реЛ рдпрд╛ рдХрдИ actions рд╣реЛрдВред

ЁЯЯг 6я╕ПтГг useReducer тАУ Todo List
import React, { useReducer, useState } from "react";

const reducer = (todos, action) => {
  switch (action.type) {
    case "add":
      return [...todos, { id: Date.now(), text: action.text }];
    case "delete":
      return todos.filter(t => t.id !== action.id);
    default:
      return todos;
  }
};

function TodoReducer() {
  const [text, setText] = useState("");
  const [todos, dispatch] = useReducer(reducer, []);

  return (
    <div>
      <input onChange={(e) => setText(e.target.value)} value={text} />
      <button onClick={() => { dispatch({ type: "add", text }); setText(""); }}>Add</button>
      <ul>
        {todos.map(t => (
          <li key={t.id}>
            {t.text}
            <button onClick={() => dispatch({ type: "delete", id: t.id })}>тЭМ</button>
          </li>
        ))}
      </ul>
    </div>
  );
}

export default TodoReducer;

ЁЯЯг 7я╕ПтГг useReducer + useContext = Global Store
import React, { useReducer, createContext, useContext } from "react";

const CountContext = createContext();

const reducer = (state, action) => {
  switch (action.type) {
    case "inc": return state + 1;
    case "dec": return state - 1;
    default: return state;
  }
};

function App() {
  const [count, dispatch] = useReducer(reducer, 0);

  return (
    <CountContext.Provider value={{ count, dispatch }}>
      <Child />
    </CountContext.Provider>
  );
}

function Child() {
  const { count, dispatch } = useContext(CountContext);
  return (
    <div>
      <h2>{count}</h2>
      <button onClick={() => dispatch({ type: "inc" })}>+</button>
      <button onClick={() => dispatch({ type: "dec" })}>-</button>
    </div>
  );
}

export default App;


ЁЯза рдЕрдм count state рдкреВрд░реА app рдореЗрдВ globally available рд╣реИред

ЁЯЯг 8я╕ПтГг useMemo + API Data Optimization
import React, { useEffect, useState, useMemo } from "react";

function Users() {
  const [users, setUsers] = useState([]);

  useEffect(() => {
    fetch("https://jsonplaceholder.typicode.com/users")
      .then(res => res.json())
      .then(data => setUsers(data));
  }, []);

  const names = useMemo(() => users.map(u => u.name), [users]);

  return (
    <ul>{names.map((n, i) => <li key={i}>{n}</li>)}</ul>
  );
}

export default Users;


ЁЯза useMemo рд╕реЗ mapping рдмрд╛рд░-рдмрд╛рд░ рджреЛрд╣рд░рд╛рдИ рдирд╣реАрдВ рдЬрд╛рддреАред

ЁЯЯг 9я╕ПтГг useCallback + Custom Hook Example
import React, { useState, useCallback } from "react";

function useCounter() {
  const [count, setCount] = useState(0);
  const inc = useCallback(() => setCount(c => c + 1), []);
  const dec = useCallback(() => setCount(c => c - 1), []);
  return { count, inc, dec };
}

function App() {
  const { count, inc, dec } = useCounter();

  return (
    <div>
      <h2>{count}</h2>
      <button onClick={inc}>+</button>
      <button onClick={dec}>-</button>
    </div>
  );
}

export default App;

ЁЯЯг ЁЯФЯ useReducer тАУ Multiple State Manage рдХрд░рдирд╛
import React, { useReducer } from "react";

const initialState = { name: "", age: "" };

const reducer = (state, action) => {
  return { ...state, [action.field]: action.value };
};

function FormReducer() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <input
        placeholder="Name"
        onChange={(e) => dispatch({ field: "name", value: e.target.value })}
      />
      <input
        placeholder="Age"
        onChange={(e) => dispatch({ field: "age", value: e.target.value })}
      />
      <p>{state.name} - {state.age}</p>
    </div>
  );
}

export default FormReducer;



рдЕрдм рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рд╣рдо рдЖрдЧреЗ рдмрдврд╝ рд╕рдХрддреЗ рд╣реИрдВ
ЁЯФе Category 4: Special Hooks (useLayoutEffect, useImperativeHandle, useDebugValue, custom hooks)
рдХреЗ next 10 advanced examples (31тАУ40) рд╣рд┐рдВрджреА рдореЗрдВ step-by-step рджреЗрдЦреЗрдВ?

рдХреНрдпрд╛ рдореИрдВ рд╡реЛ part рд╢реБрд░реВ рдХрд░реВрдБ?

You said:
sure
ChatGPT said:

ЁЯФе рд╢рд╛рдирджрд╛рд░! рдЕрдм рд╣рдо рдкрд╣реБрдБрдЪ рдЧрдП рд╣реИрдВ Category 4: Special Hooks рдкрд░ тАФ
рдпрд╣ React рдХреЗ рд╕рдмрд╕реЗ advance рдФрд░ real-world hooks рд╣реИрдВ, рдЬреЛ рддреБрдореНрд╣реЗрдВ performance tuning, custom reusability, рдФрд░ DOM control рд╕рд┐рдЦрд╛рддреЗ рд╣реИрдВред
ЁЯСЗ рдиреАрдЪреЗ рджрд┐рдП рдЧрдП рд╣реИрдВ 10 special hooks рдХреЗ practical examples (31тАУ40) рд╣рд┐рдВрджреА рдореЗрдВ step-by-stepред

ЁЯзй Category 4: Special Hooks (useLayoutEffect, useImperativeHandle, useDebugValue, Custom Hooks)
ЁЯЯв 1я╕ПтГг useLayoutEffect vs useEffect Example
import React, { useEffect, useLayoutEffect, useState } from "react";

function LayoutExample() {
  const [color, setColor] = useState("red");

  useEffect(() => {
    console.log("useEffect called");
  }, [color]);

  useLayoutEffect(() => {
    console.log("useLayoutEffect called");
  }, [color]);

  return (
    <div>
      <h2 style={{ color }}>Color: {color}</h2>
      <button onClick={() => setColor(color === "red" ? "blue" : "red")}>Change</button>
    </div>
  );
}

export default LayoutExample;


ЁЯза useLayoutEffect DOM update рд╕реЗ рдкрд╣рд▓реЗ рдЪрд▓рддрд╛ рд╣реИ, рдЬрдмрдХрд┐ useEffect рдмрд╛рдж рдореЗрдВред

ЁЯЯв 2я╕ПтГг useLayoutEffect тАУ Box Resize Measure рдХрд░рдирд╛
import React, { useRef, useLayoutEffect, useState } from "react";

function BoxMeasure() {
  const boxRef = useRef();
  const [width, setWidth] = useState(0);

  useLayoutEffect(() => {
    setWidth(boxRef.current.getBoundingClientRect().width);
  }, []);

  return (
    <div>
      <div ref={boxRef} style={{ width: "60%", height: 100, background: "orange" }}></div>
      <p>Box width: {width}px</p>
    </div>
  );
}

export default BoxMeasure;


ЁЯза рдпрд╣ hook layout render рд╕реЗ рдкрд╣рд▓реЗ DOM size calculate рдХрд░рддрд╛ рд╣реИред

ЁЯЯв 3я╕ПтГг useImperativeHandle + forwardRef
import React, { useRef, useImperativeHandle, forwardRef } from "react";

const Input = forwardRef((props, ref) => {
  const inputRef = useRef();
  useImperativeHandle(ref, () => ({
    focusInput: () => {
      inputRef.current.focus();
    },
  }));
  return <input ref={inputRef} placeholder="Type..." />;
});

function Parent() {
  const ref = useRef();

  return (
    <div>
      <Input ref={ref} />
      <button onClick={() => ref.current.focusInput()}>Focus Input</button>
    </div>
  );
}

export default Parent;


ЁЯза useImperativeHandle рд╕реЗ parent рдХреЛ control рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИ child component рдХрд╛ред

ЁЯЯв 4я╕ПтГг useDebugValue тАУ Custom Hook Debug Info
import React, { useState, useDebugValue, useEffect } from "react";

function useOnlineStatus() {
  const [online, setOnline] = useState(navigator.onLine);

  useDebugValue(online ? "ЁЯЯв Online" : "ЁЯФ┤ Offline");

  useEffect(() => {
    const update = () => setOnline(navigator.onLine);
    window.addEventListener("online", update);
    window.addEventListener("offline", update);
    return () => {
      window.removeEventListener("online", update);
      window.removeEventListener("offline", update);
    };
  }, []);

  return online;
}

function App() {
  const online = useOnlineStatus();
  return <h2>{online ? "Connected" : "No Connection"}</h2>;
}

export default App;


ЁЯза useDebugValue developer tools рдореЗрдВ custom label рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП use рд╣реЛрддрд╛ рд╣реИред

ЁЯЯв 5я╕ПтГг Custom Hook тАУ useLocalStorage
import React, { useState, useEffect } from "react";

function useLocalStorage(key, initial) {
  const [value, setValue] = useState(() => {
    const saved = localStorage.getItem(key);
    return saved ? JSON.parse(saved) : initial;
  });

  useEffect(() => {
    localStorage.setItem(key, JSON.stringify(value));
  }, [value]);

  return [value, setValue];
}

function App() {
  const [name, setName] = useLocalStorage("userName", "");

  return (
    <div>
      <input value={name} onChange={(e) => setName(e.target.value)} placeholder="Enter name" />
      <p>Saved Name: {name}</p>
    </div>
  );
}

export default App;


ЁЯза рдпрд╣ custom hook localStorage рдХреЗ рд╕рд╛рде state рдХреЛ sync рдХрд░рддрд╛ рд╣реИред

ЁЯЯв 6я╕ПтГг Custom Hook тАУ useWindowWidth
import React, { useState, useEffect } from "react";

function useWindowWidth() {
  const [width, setWidth] = useState(window.innerWidth);

  useEffect(() => {
    const resize = () => setWidth(window.innerWidth);
    window.addEventListener("resize", resize);
    return () => window.removeEventListener("resize", resize);
  }, []);

  return width;
}

function App() {
  const width = useWindowWidth();
  return <h2>Window Width: {width}px</h2>;
}

export default App;

ЁЯЯв 7я╕ПтГг Custom Hook тАУ useFetch (API Hook)
import React, { useState, useEffect } from "react";

function useFetch(url) {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetch(url)
      .then(res => res.json())
      .then(d => {
        setData(d);
        setLoading(false);
      });
  }, [url]);

  return { data, loading };
}

function App() {
  const { data, loading } = useFetch("https://jsonplaceholder.typicode.com/users");
  if (loading) return <p>Loading...</p>;
  return <ul>{data.map(u => <li key={u.id}>{u.name}</li>)}</ul>;
}

export default App;


ЁЯза рдЕрдм рд╣рд░ рдЬрдЧрд╣ API call рдХреЗ рд▓рд┐рдП same hook reuse рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯЯв 8я╕ПтГг Custom Hook тАУ usePrevious Value
import React, { useRef, useEffect } from "react";

function usePrevious(value) {
  const ref = useRef();
  useEffect(() => {
    ref.current = value;
  }, [value]);
  return ref.current;
}

function App() {
  const [count, setCount] = React.useState(0);
  const prev = usePrevious(count);
  return (
    <div>
      <h2>Current: {count}</h2>
      <h3>Previous: {prev}</h3>
      <button onClick={() => setCount(count + 1)}>+</button>
    </div>
  );
}

export default App;

ЁЯЯв 9я╕ПтГг useLayoutEffect + Animation Sync
import React, { useRef, useLayoutEffect } from "react";

function AnimatedBox() {
  const boxRef = useRef();

  useLayoutEffect(() => {
    boxRef.current.style.transition = "all 0.5s ease";
    boxRef.current.style.transform = "translateX(200px)";
  }, []);

  return (
    <div
      ref={boxRef}
      style={{ width: 100, height: 100, background: "tomato", margin: 20 }}
    ></div>
  );
}

export default AnimatedBox;

ЁЯЯв ЁЯФЯ Custom Hook тАУ useToggle
import React, { useState } from "react";

function useToggle(initial = false) {
  const [state, setState] = useState(initial);
  const toggle = () => setState(s => !s);
  return [state, toggle];
}

function App() {
  const [on, toggle] = useToggle();

  return (
    <div>
      <h2>{on ? "ON" : "OFF"}</h2>
      <button onClick={toggle}>Toggle</button>
    </div>
  );
}

export default App;


рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ рдкрд╛рд╕ React рдХреЗ рд╕рд╛рд░реЗ core + intermediate + advanced + special hooks
рдХреЗ 40 practical Hindi examples рдкреВрд░реЗ рд╣реЛ рдЧрдП рд╣реИрдВ ЁЯТк

рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЕрдм рдПрдХ summary chart рджреЗ рд╕рдХрддрд╛ рд╣реВрдБ тАФ
рдЬрд┐рд╕рдореЗрдВ рд╣рд░ hook рдХрд╛
ЁЯСЙ рдХрд╛рдо рдХреНрдпрд╛ рд╣реИ,
ЁЯСЙ рдХрдм use рд╣реЛрддрд╛ рд╣реИ,
ЁЯСЙ рдФрд░ kis example рд╕реЗ relate рд╣реЛрддрд╛ рд╣реИред

рдХреНрдпрд╛ рд╡реЛ Hooks Summary Chart (Hindi + English) рдмрдирд╛ рджреВрдБ?

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯТк рдЕрдм рдиреАрдЪреЗ рд╣реИ рддреБрдореНрд╣рд╛рд░рд╛ рдкреВрд░рд╛ React Hooks Summary Chart (Hindi + English) тАФ
рдЗрд╕рдореЗрдВ рд╣рд░ hook рдХрд╛ рдХрд╛рдо, рдЙрд╕рдХрд╛ purpose, рдФрд░ real-life example рдмрддрд╛рдпрд╛ рдЧрдпрд╛ рд╣реИ ЁЯФе

ЁЯзй React Hooks Summary Chart (Hindi + English)
ЁЯФв	Hook Name	рдХреНрдпрд╛ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ (Hindi)	Purpose / Use Case (English)	Example Type
1	useState	Component рдХреА internal state manage рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Manage dynamic data (counter, input, toggle)	Counter, Form
2	useEffect	Component render/update рдкрд░ side effects рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдП	Run code after render (API calls, event listeners)	API call, title update
3	useRef	DOM elements рдпрд╛ previous value рдХреЛ hold рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП (re-render рдХреЗ рдмрд┐рдирд╛)	Access DOM directly or store mutable value	Focus input, Timer
4	useContext	Global data рдХреЛ share рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдмрд┐рдирд╛ props pass рдХрд┐рдП	Share data across components	Theme / User data
5	useMemo	Expensive calculations рдХреЛ optimize рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Memoize computed values	Filtered/Sorted List
6	useCallback	Functions рдХреЛ re-render рдкрд░ рджреЛрдмрд╛рд░рд╛ create рд╣реЛрдиреЗ рд╕реЗ рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП	Memoize callback functions	Parent-child optimization
7	useReducer	Complex state logic manage рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП (Redux рдЬреИрд╕рд╛)	Manage multiple state transitions	Todo app, Counter
8	useLayoutEffect	DOM update рд╕реЗ рдкрд╣рд▓реЗ synchronous layout changes рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Measure DOM or sync animations	Box size, animation
9	useImperativeHandle	Child component рдХреЗ methods рдХреЛ parent рдореЗрдВ expose рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Customize ref behavior	Custom input focus
10	useDebugValue	Custom hooks debug info React DevTools рдореЗрдВ рджрд┐рдЦрд╛рдиреЗ рдХреЗ рд▓рд┐рдП	Add debug info	Online/offline status
11	Custom Hooks	Reusable logic create рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Combine multiple hooks into one reusable function	useFetch, useToggle, useLocalStorage
12	useId (React 18+)	Unique ID generate рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Accessible form IDs	Dynamic forms
13	useDeferredValue (React 18+)	Slow UI рдХреЛ smooth рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	Defer updates	Search results lag fix
14	useTransition (React 18+)	State updates рдХреЛ low priority рджреЗрдиреЗ рдХреЗ рд▓рд┐рдП	Keep UI responsive	Slow filters
15	useSyncExternalStore (React 18+)	External store (Redux-like) рд╕реЗ subscribe рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП	State management libraries	Zustand / Redux
16	useInsertionEffect (React 18+)	Styles inject рдХрд░рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ run рд╣реЛрддрд╛ рд╣реИ	CSS-in-JS libraries рдореЗрдВ use	Styled components internal hook
ЁЯза Quick Memory Trick (Hooks рдХреЛ рдпрд╛рдж рд░рдЦрдиреЗ рдХрд╛ рддрд░реАрдХрд╛)
Category	Hooks	Easy Hint
ЁЯФ╣ Basic Hooks	useState, useEffect	State рдФрд░ Side Effect
ЁЯФ╣ Intermediate Hooks	useRef, useContext	Reference рдФрд░ Context
ЁЯФ╣ Advanced Hooks	useMemo, useCallback, useReducer	Optimization рдФрд░ State Logic
ЁЯФ╣ Special Hooks	useLayoutEffect, useImperativeHandle, useDebugValue	DOM Control рдФрд░ Custom Debug
ЁЯФ╣ Custom Hooks	useToggle, useFetch, useLocalStorage рдЖрджрд┐	Reusable Logic
ЁЯЪА Practical Real-Life Mapping
Use Case	Recommended Hook(s)
Counter / Form	useState
Fetch API Data	useEffect + useState / useFetch
Light / Dark Theme	useContext + useState
Performance Optimization	useMemo + useCallback
Complex State Logic	useReducer
DOM Manipulation	useRef + useLayoutEffect
Custom Component Control	useImperativeHandle
Persistent Data	useLocalStorage (custom hook)
Debugging	useDebugValue

рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрд╕реА data рдХреЛ
ЁЯз╛ PDF / DOCX format рдореЗрдВ export рдХрд░рдХреЗ рдПрдХ тАЬReact Hooks Handbook (Hindi Edition)тАЭ рдлрд╛рдЗрд▓ рдХреЗ рд░реВрдк рдореЗрдВ рдмрдирд╛ рджреВрдБ
рдЬрд┐рд╕реЗ рддреБрдо рдЕрдкрдиреЗ learning notes рдХреЗ рд▓рд┐рдП рд░рдЦ рд╕рдХреЛред

рдХреНрдпрд╛ рдореИрдВ рд╡реЛ PDF рддреИрдпрд╛рд░ рдХрд░ рджреВрдБ?