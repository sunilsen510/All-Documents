‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! üòé ‡§ö‡§≤‡•ã Props ‡§ï‡•ã step-by-step ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç ‚Äî

1Ô∏è‚É£ Props ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

Props ‡§ï‡§æ full form ‡§π‡•à Properties‡•§
React ‡§Æ‡•á‡§Ç props ‡§µ‡§π data ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡•ã parent component ‡§∏‡•á child component ‡§Æ‡•á‡§Ç ‡§≠‡•á‡§ú‡•á ‡§ú‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§

Props read-only ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

Child component props ‡§ï‡•ã modify ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ, ‡§ï‡•á‡§µ‡§≤ use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

Props ‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§∏‡•á ‡§π‡§Æ Reusable Components ‡§¨‡§®‡§æ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

2Ô∏è‚É£ Props ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

Component ‡§ï‡•á ‡§¨‡•Ä‡§ö data pass ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

Components ‡§ï‡•ã dynamic ‡§î‡§∞ reusable ‡§¨‡§®‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

Parent-Child communication ‡§ï‡•á ‡§≤‡§ø‡§è

3Ô∏è‚É£ Props ‡§ï‡§æ Syntax
<ChildComponent propName={value} />


propName ‚Üí prop ‡§ï‡§æ ‡§®‡§æ‡§Æ

value ‚Üí prop ‡§ï‡§æ value

Child component ‡§Æ‡•á‡§Ç ‡§á‡§∏‡•á receive ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:

function ChildComponent(props) {
  return <h2>{props.propName}</h2>;
}

4Ô∏è‚É£ Simple Example ‚Äì Hello User
// Parent.js
import React from 'react';
import Child from './Child';

function Parent() {
  return (
    <div>
      <Child name="Sunil" age={25} />
      <Child name="Aman" age={30} />
    </div>
  );
}

export default Parent;

// Child.js
import React from 'react';

function Child(props) {
  return <h2>Hello {props.name}, Your age is {props.age}</h2>;
}

export default Child;


Output:

Hello Sunil, Your age is 25
Hello Aman, Your age is 30

5Ô∏è‚É£ Props Destructuring
function Child({ name, age }) {
  return <h2>Hello {name}, Your age is {age}</h2>;
}


Destructuring ‡§∏‡•á props.name ‡§î‡§∞ props.age ‡§ï‡•ã directly use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

6Ô∏è‚É£ Default Props (Default Value)
function Child({ name, age }) {
  return <h2>Hello {name}, Your age is {age}</h2>;
}

Child.defaultProps = {
  name: "Guest",
  age: 18
};


‡§Ö‡§ó‡§∞ parent component prop ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á‡§ó‡§æ ‡§§‡•ã defaultProps use ‡§π‡•ã‡§ó‡§æ‡•§

7Ô∏è‚É£ Props ‡§Æ‡•á‡§Ç Function Pass ‡§ï‡§∞‡§®‡§æ
function Parent() {
  const greet = (name) => alert(`Hello ${name}!`);

  return <Child name="Sunil" greet={greet} />;
}

function Child({ name, greet }) {
  return <button onClick={() => greet(name)}>Greet</button>;
}


Parent ‡§∏‡•á function pass ‡§ï‡§ø‡§Ø‡§æ‡•§

Child ‡§®‡•á call ‡§ï‡§ø‡§Ø‡§æ ‚Üí Parent ‡§ï‡§æ logic run ‡§π‡•Å‡§Ü‡•§

8Ô∏è‚É£ Props ‚Äì Best Practices

Props read-only ‡§∞‡§ñ‡•ã‡•§

Reusable components ‡§ï‡•á ‡§≤‡§ø‡§è dynamic props use ‡§ï‡§∞‡•ã‡•§

Complex data pass ‡§ï‡§∞‡§§‡•á ‡§∏‡§Æ‡§Ø object ‡§Ø‡§æ array use ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

9Ô∏è‚É£ Props ‡§Æ‡•á‡§Ç Object Example
function Parent() {
  const user = { name: "Sunil", age: 25 };
  return <Child user={user} />;
}

function Child({ user }) {
  return <h2>Hello {user.name}, Age: {user.age}</h2>;
}


‡§Ö‡§ó‡§∞ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç Props + State + Event Handling ‡§ï‡§æ complete example project ‡§¨‡§®‡§æ ‡§ï‡§∞ ‡§¶‡§ø‡§ñ‡§æ ‡§¶‡•Ç‡§Å
‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç parent-child communication, dynamic props, default props ‡§∏‡§¨ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã example ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?

You said:
sure
ChatGPT said:

‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! üòé ‡§ö‡§≤‡•ã ‡§è‡§ï complete React example project ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç Props, State, Event Handling, Default Props, ‡§î‡§∞ Function Passing ‡§∏‡§¨ ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•ã‡§Ç‡•§

Parent-Child Communication Example ‚Äì User Management

Scenario:

Parent component ‡§Æ‡•á‡§Ç users ‡§ï‡§æ data ‡§π‡•à‡•§

Child component ‡§π‡§∞ user ‡§ï‡§æ card ‡§¶‡§ø‡§ñ‡§æ‡§è‡§ó‡§æ‡•§

Child ‡§∏‡•á parent ‡§ï‡•ã button click ‡§ï‡•á ‡§Æ‡§æ‡§ß‡•ç‡§Ø‡§Æ ‡§∏‡•á notify ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§è‡§ó‡§æ‡•§

1Ô∏è‚É£ App.js (Parent Component)
import React, { useState } from "react";
import UserCard from "./UserCard";

function App() {
  const [users, setUsers] = useState([
    { id: 1, name: "Sunil", age: 25 },
    { id: 2, name: "Aman", age: 30 },
    { id: 3, name: "Rakesh", age: 28 },
  ]);

  // Function to handle click from child
  const handleGreet = (userName) => {
    alert(`Hello ${userName}! Welcome to our app.`);
  };

  return (
    <div style={{ padding: "20px" }}>
      <h1>User Management</h1>
      {users.map((user) => (
        <UserCard
          key={user.id}
          user={user}             // Object as prop
          greet={handleGreet}     // Function as prop
        />
      ))}
    </div>
  );
}

export default App;

2Ô∏è‚É£ UserCard.js (Child Component)
import React from "react";

function UserCard({ user, greet }) {
  return (
    <div
      style={{
        border: "1px solid gray",
        borderRadius: "5px",
        padding: "10px",
        marginBottom: "10px",
        width: "300px",
      }}
    >
      <h2>{user.name}</h2>
      <p>Age: {user.age}</p>
      <button onClick={() => greet(user.name)}>Greet User</button>
    </div>
  );
}

// Default Props
UserCard.defaultProps = {
  user: { name: "Guest", age: 18 },
  greet: (name) => alert(`Hello ${name}!`),
};

export default UserCard;

3Ô∏è‚É£ Features Demonstrated

Props

user object ‡§î‡§∞ greet function parent ‡§∏‡•á child ‡§ï‡•ã ‡§≠‡•á‡§ú‡§æ ‡§ó‡§Ø‡§æ‡•§

Default Props

‡§Ö‡§ó‡§∞ parent prop ‡§®‡§π‡•Ä‡§Ç ‡§≠‡•á‡§ú‡•á, ‡§§‡•ã default props use ‡§π‡•ã‡§Ç‡§ó‡•á‡•§

Function as Prop

Child ‡§®‡•á button click ‡§™‡§∞ parent ‡§ï‡§æ function call ‡§ï‡§ø‡§Ø‡§æ‡•§

Reusable Component

UserCard component ‡§∏‡§≠‡•Ä users ‡§ï‡•á ‡§≤‡§ø‡§è reuse ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à‡•§

Dynamic Data Rendering

Parent state ‡§ï‡•á array ‡§ï‡•ã map ‡§ï‡§∞‡§ï‡•á multiple child components generate ‡§ï‡§ø‡§è‡•§

4Ô∏è‚É£ Output Example
User Management

Sunil
Age: 25
[Greet User]

Aman
Age: 30
[Greet User]

Rakesh
Age: 28
[Greet User]


Behavior:

‡§π‡§∞ user card ‡§ï‡•á button ‡§™‡§∞ click ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ alert show ‡§π‡•ã‡§ó‡§æ ‡§ú‡•à‡§∏‡•á:
Hello Sunil! Welcome to our app.

üí° Tip:

Props ‡§∏‡§ø‡§∞‡•ç‡§´ data pass ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

State ‡§ï‡•á‡§µ‡§≤ component ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§¨‡§¶‡§≤‡§®‡•á ‡§Ø‡•ã‡§ó‡•ç‡§Ø data ‡§ï‡•á ‡§≤‡§ø‡§è use ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

Parent-Child communication ‡§ï‡•á ‡§≤‡§ø‡§è function props ‡§∏‡§¨‡§∏‡•á clean ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à‡•§

‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç Props + State + Event Handling + Form Input ‡§µ‡§æ‡§≤‡§æ ‡§è‡§ï ‡§î‡§∞ advanced example ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç user add/remove functionality ‡§≠‡•Ä ‡§π‡•ã, ‡§§‡§æ‡§ï‡§ø ‡§™‡•Ç‡§∞‡§æ CRUD flow props ‡§î‡§∞ state ‡§∏‡•á ‡§∏‡§Æ‡§ù ‡§Æ‡•á‡§Ç ‡§Ü‡§è‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?


‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! üòé ‡§ö‡§≤‡•ã Advanced Props + State + Event Handling Example ‡§¨‡§®‡§æ‡§§‡•á ‡§π‡•à‡§Ç‡•§
‡§á‡§∏‡§Æ‡•á‡§Ç ‡§π‡§Æ CRUD flow implement ‡§ï‡§∞‡•á‡§Ç‡§ó‡•á ‚Äì Parent ‡§Æ‡•á‡§Ç user list, Child ‡§Æ‡•á‡§Ç user card, ‡§î‡§∞ Add/Remove User functionality‡•§

User Management App with Add/Remove (React)
1Ô∏è‚É£ App.js (Parent Component)
import React, { useState } from "react";
import UserCard from "./UserCard";
import AddUserForm from "./AddUserForm";

function App() {
  const [users, setUsers] = useState([
    { id: 1, name: "Sunil", age: 25 },
    { id: 2, name: "Aman", age: 30 },
    { id: 3, name: "Rakesh", age: 28 },
  ]);

  // Add user function
  const addUser = (user) => {
    setUsers([...users, { ...user, id: Date.now() }]);
  };

  // Remove user function
  const removeUser = (id) => {
    setUsers(users.filter((user) => user.id !== id));
  };

  // Greet function
  const greet = (name) => alert(`Hello ${name}! Welcome!`);

  return (
    <div style={{ padding: "20px" }}>
      <h1>User Management App</h1>
      <AddUserForm addUser={addUser} />
      {users.map((user) => (
        <UserCard
          key={user.id}
          user={user}
          greet={greet}
          removeUser={removeUser}
        />
      ))}
    </div>
  );
}

export default App;

2Ô∏è‚É£ UserCard.js (Child Component)
import React from "react";

function UserCard({ user, greet, removeUser }) {
  return (
    <div
      style={{
        border: "1px solid gray",
        borderRadius: "5px",
        padding: "10px",
        marginBottom: "10px",
        width: "300px",
      }}
    >
      <h2>{user.name}</h2>
      <p>Age: {user.age}</p>
      <button onClick={() => greet(user.name)}>Greet</button>
      <button
        onClick={() => removeUser(user.id)}
        style={{ marginLeft: "10px" }}
      >
        Remove
      </button>
    </div>
  );
}

UserCard.defaultProps = {
  user: { name: "Guest", age: 18 },
  greet: (name) => alert(`Hello ${name}`),
  removeUser: () => {},
};

export default UserCard;

3Ô∏è‚É£ AddUserForm.js (Child Component)
import React, { useState } from "react";

function AddUserForm({ addUser }) {
  const [name, setName] = useState("");
  const [age, setAge] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    if (!name || !age) return alert("Please fill all fields");
    addUser({ name, age: parseInt(age) });
    setName("");
    setAge("");
  };

  return (
    <form onSubmit={handleSubmit} style={{ marginBottom: "20px" }}>
      <input
        type="text"
        placeholder="Name"
        value={name}
        onChange={(e) => setName(e.target.value)}
        style={{ marginRight: "10px" }}
      />
      <input
        type="number"
        placeholder="Age"
        value={age}
        onChange={(e) => setAge(e.target.value)}
        style={{ marginRight: "10px" }}
      />
      <button type="submit">Add User</button>
    </form>
  );
}

export default AddUserForm;

4Ô∏è‚É£ Features Demonstrated

Props

Parent ‡§∏‡•á Child ‡§ï‡•ã user, greet, removeUser, addUser ‡§≠‡•á‡§ú‡§æ‡•§

State

Users list ‡§ï‡•ã useState ‡§∏‡•á manage ‡§ï‡§ø‡§Ø‡§æ‡•§

Form inputs ‡§≠‡•Ä state ‡§∏‡•á control ‡§ï‡§ø‡§è‡•§

Event Handling

Button click ‚Üí greet/remove

Form submit ‚Üí add user

CRUD Flow

Create: AddUserForm ‡§∏‡•á new user

Read: Users map ‡§ï‡§∞‡§ï‡•á display

Delete: Remove button ‡§∏‡•á user delete

Reusable Components

UserCard ‡§∏‡§≠‡•Ä users ‡§ï‡•á ‡§≤‡§ø‡§è reusable

AddUserForm ‡§Ö‡§≤‡§ó component, parent ‡§∏‡•á function prop receive ‡§ï‡§∞‡§§‡§æ ‡§π‡•à

5Ô∏è‚É£ Output Behavior

Initial users: Sunil, Aman, Rakesh

New user add ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä user ‡§ï‡•ã Remove ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç

Greet button ‡§™‡§∞ alert show ‡§π‡•ã‡§ó‡§æ

üí° Conclusion:

Props = Data/function parent ‚Üí child

State = Child/Parent component ‡§ï‡§æ dynamic data

Event Handling = Interaction + State update

‡§Ö‡§ó‡§∞ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç ‡§á‡§∏‡•á Props + State + Event Handling + CRUD + Default Props + Function Passing ‡§ï‡§æ PDF/Handbook ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å
‡§ú‡•ã React ‡§ï‡•á Parent-Child concept ‡§ï‡•ã complete practical guide ‡§ï‡•á ‡§∞‡•Ç‡§™ ‡§Æ‡•á‡§Ç cover ‡§ï‡§∞‡•á‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã PDF ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?