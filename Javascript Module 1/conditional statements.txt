बिलकुल! 😎 चलो JavaScript में Conditional Statements को हिंदी में पूरी तरह से समझते हैं – क्या हैं, क्यों, कब और कैसे use करते हैं, साथ में examples भी।

1️⃣ Conditional Statements क्या हैं?

Conditional Statements JavaScript में decision making के लिए use होते हैं।

मतलब: किसी condition के आधार पर different code execute करना।

अगर condition true है → एक block execute होगा, अन्यथा दूसरा।

2️⃣ Types of Conditional Statements in JS

if statement

if...else statement

if...else if...else statement

switch statement

ternary operator ( ? : )

3️⃣ if Statement

Syntax:

if(condition){
  // code to execute if condition true
}


Example:

let age = 18;

if(age >= 18){
  console.log("Adult");
}


Output: Adult

Condition false → nothing happens

4️⃣ if...else Statement

Syntax:

if(condition){
  // code if true
}else{
  // code if false
}


Example:

let age = 16;

if(age >= 18){
  console.log("Adult");
}else{
  console.log("Not Adult");
}


Output: Not Adult

5️⃣ if...else if...else Statement

Multiple conditions check करने के लिए

Syntax:

if(condition1){
  // code1
}else if(condition2){
  // code2
}else{
  // code3
}


Example:

let marks = 75;

if(marks >= 90){
  console.log("Grade A");
}else if(marks >= 75){
  console.log("Grade B");
}else if(marks >= 50){
  console.log("Grade C");
}else{
  console.log("Fail");
}


Output: Grade B

6️⃣ switch Statement

Multiple values के लिए clean way

case के basis पर block execute होता है

Syntax:

switch(expression){
  case value1:
    // code
    break;
  case value2:
    // code
    break;
  default:
    // code if none match
}


Example:

let day = 3;

switch(day){
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  default:
    console.log("Invalid day");
}


Output: Wednesday

7️⃣ Ternary Operator ( ? : )

Short form of if...else

Syntax:

condition ? codeIfTrue : codeIfFalse;


Example:

let age = 20;
let result = (age >= 18) ? "Adult" : "Not Adult";
console.log(result);


Output: Adult

8️⃣ Why use Conditional Statements?

Decision making → code flow control

Dynamic behavior → input के आधार पर response बदलना

Reduce repetitive code → one block executes based on condition

9️⃣ When & Where to use?

Form validation → check if user input is valid

User role based actions → admin / guest / user

Dynamic rendering → show/hide elements based on conditions

Game logic → score, level, player status

Project examples:

E-commerce → discount calculation

Banking → withdrawal limits check

React → conditional rendering of components

10️⃣ Example – Real Project Use Case

let userRole = "admin";

if(userRole === "admin"){
  console.log("Show admin panel");
}else if(userRole === "editor"){
  console.log("Show editor dashboard");
}else{
  console.log("Show user homepage");
}


Output: Show admin panel

Project में role-based rendering के लिए perfect

💡 Summary:

Statement Type	Use Case	Example
if	Single condition	if(age>=18){...}
if...else	True/False	if(age>=18){...} else {...}
if...else if...else	Multiple conditions	if(...){...} else if(...){...} else {...}
switch	Multiple exact values	switch(day){case 1: ...}
ternary	Short if-else	let result = (age>=18)? "Adult":"Not Adult"

✅ Best Practice:

Short, readable, maintainable code

Complex conditions → use functions to keep clean

अगर चाहो तो मैं JavaScript Conditional Statements Complete Hindi Guide + real project examples + visual diagram भी बना दूँ
जिससे har situation में conditional statement select करना आसान हो जाएगा।

क्या मैं वो बना दूँ?

You said:
sure
ChatGPT said:
Js Conditional Statements Hindi

JavaScript Conditional Statements Complete Guide (Hindi)

1️⃣ Conditional Statements क्या हैं?

Decision making के लिए use होते हैं

Condition true → एक block execute, false → दूसरा block

2️⃣ Types of Conditional Statements

if statement

if...else statement

if...else if...else statement

switch statement

ternary operator ( ? : )

3️⃣ if Statement
let age = 18;
if(age >= 18){
  console.log("Adult");
}

Output: Adult

Condition false → nothing happens

4️⃣ if...else Statement
let age = 16;
if(age >= 18){
  console.log("Adult");
}else{
  console.log("Not Adult");
}

Output: Not Adult

5️⃣ if...else if...else Statement
let marks = 75;
if(marks >= 90){
  console.log("Grade A");
}else if(marks >= 75){
  console.log("Grade B");
}else if(marks >= 50){
  console.log("Grade C");
}else{
  console.log("Fail");
}

Output: Grade B

6️⃣ switch Statement
let day = 3;
switch(day){
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  default:
    console.log("Invalid day");
}

Output: Wednesday

7️⃣ Ternary Operator ( ? : )
let age = 20;
let result = (age >= 18) ? "Adult" : "Not Adult";
console.log(result);

Output: Adult

Short form of if...else

8️⃣ Why use Conditional Statements?

Decision making → code flow control

Dynamic behavior → input के आधार पर response बदलना

Reduce repetitive code → one block executes based on condition

9️⃣ When & Where to use?

Form validation → check if user input is valid

User role based actions → admin / guest / user

Dynamic rendering → show/hide elements based on conditions

Game logic → score, level, player status

Project examples: E-commerce discounts, Banking withdrawal check, React conditional rendering

10️⃣ Real Project Example
let userRole = "admin";
if(userRole === "admin"){
  console.log("Show admin panel");
}else if(userRole === "editor"){
  console.log("Show editor dashboard");
}else{
  console.log("Show user homepage");
}

Output: Show admin panel

Role-based rendering in projects

Summary Table

| Statement Type      | Use Case              | Example                                     |
| ------------------- | --------------------- | ------------------------------------------- |
| if                  | Single condition      | if(age>=18){...}                            |
| if...else           | True/False            | if(age>=18){...} else {...}                 |
| if...else if...else | Multiple conditions   | if(...){...} else if(...){...} else {...}   |
| switch              | Multiple exact values | switch(day){case 1: ...}                    |
| ternary             | Short if-else         | let result = (age>=18)? "Adult":"Not Adult" |


✅ Best Practice:

Short, readable, maintainable code

Complex conditions → use functions to keep code clean

तुम्हारा JavaScript Conditional Statements Complete Guide (Hindi) तैयार है ✅
इसमें if, if...else, if...else if...else, switch, ternary operator के साथ examples, use cases, project-level usage सब step-by-step cover हैं।


बिलकुल! 😎 चलो JavaScript Conditional Statements को और आसान, structured और points में समझते हैं।
मैं आपको बताऊँगा कौनसी condition कहाँ use करनी चाहिए, साथ ही examples भी दूँगा।

1️⃣ if Statement

Use Case:

जब सिर्फ एक condition check करनी हो।

True होने पर code execute करना हो, अन्यथा कुछ नहीं करना हो।

Syntax:

if(condition){
  // code to execute if true
}


Example:

let age = 20;
if(age >= 18){
  console.log("Adult");
}
// Output: Adult


✅ Tip: Single decision → use if

2️⃣ if...else Statement

Use Case:

जब condition true/false दोनों के लिए code execute करना हो।

Syntax:

if(condition){
  // true block
}else{
  // false block
}


Example:

let age = 16;
if(age >= 18){
  console.log("Adult");
}else{
  console.log("Not Adult");
}
// Output: Not Adult


✅ Tip: Two-way decision → use if...else

3️⃣ if...else if...else Statement

Use Case:

जब multiple conditions check करनी हों।

Ek ke baad dusri condition check → multi-level decision making.

Syntax:

if(condition1){
  // block1
}else if(condition2){
  // block2
}else{
  // default block
}


Example:

let marks = 80;

if(marks >= 90){
  console.log("Grade A");
}else if(marks >= 75){
  console.log("Grade B");
}else if(marks >= 50){
  console.log("Grade C");
}else{
  console.log("Fail");
}
// Output: Grade B


✅ Tip: Multiple decisions → use if...else if...else

4️⃣ switch Statement

Use Case:

जब ek variable ke multiple exact values check करनी हों।

Multiple if...else ki jagah cleaner code

Syntax:

switch(expression){
  case value1:
    // code
    break;
  case value2:
    // code
    break;
  default:
    // code if none match
}


Example:

let day = 2;

switch(day){
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  default:
    console.log("Invalid day");
}
// Output: Tuesday


✅ Tip: Ek variable, multiple exact value check → switch
❌ Complex conditions → if...else better

5️⃣ Ternary Operator ( ? : )

Use Case:

Short if...else

Simple decision ke liye one line code

Syntax:

condition ? codeIfTrue : codeIfFalse;


Example:

let age = 19;
let result = (age >= 18) ? "Adult" : "Not Adult";
console.log(result);
// Output: Adult


✅ Tip: Short decision → ternary
❌ Complex logic → if...else better

6️⃣ Best Practices / Points to Remember

Single condition → if

if(score > 50){ console.log("Passed"); }


Two-way decision → if...else

if(score > 50){ console.log("Passed"); } else { console.log("Failed"); }


Multiple conditions → if...else if...else

if(score>=90){console.log("A");} else if(score>=75){console.log("B");} else {...}


One variable multiple exact values → switch

switch(day){ case 1:... case 2:... }


Simple single-line decision → ternary

let status = (age>=18)?"Adult":"Minor";


Nested conditions avoid करें → readability problem

Code clean & readable रखें → functions use करें

7️⃣ Real Project Examples

Example 1: Role-based Dashboard (if...else if...else)

let role = "editor";

if(role === "admin"){
  console.log("Show admin panel");
}else if(role === "editor"){
  console.log("Show editor dashboard");
}else{
  console.log("Show user homepage");
}
// Output: Show editor dashboard


Example 2: Discount Calculation (ternary)

let amount = 1200;
let discount = (amount > 1000) ? 100 : 0;
console.log(discount); // 100


Example 3: Day of Week (switch)

let day = 5;
switch(day){
  case 1: console.log("Monday"); break;
  case 5: console.log("Friday"); break;
  default: console.log("Other Day");
}
// Output: Friday


✅ Summary Table for Quick Recall

| Condition Type      | Use Case                            | Example                                   |
| ------------------- | ----------------------------------- | ----------------------------------------- |
| if                  | Single condition                    | if(age>18){...}                           |
| if...else           | True/False                          | if(age>18){...} else {...}                |
| if...else if...else | Multiple conditions                 | if(...){...} else if(...){...} else {...} |
| switch              | One variable, multiple exact values | switch(day){case 1:...}                   |
| ternary             | Short one-line decision             | let status = (age>18)?'Adult':'Minor'     |








बहुत बढ़िया 👍 चलिए अब सीखते हैं —

🧠 Conditional Statements in JavaScript (शर्त आधारित कथन)

👉 यानी conditions (शर्तों) के आधार पर कोड का निर्णय लेना।

💡 1. Conditional Statement क्या है?

जब हमें अपने प्रोग्राम में यह तय करना होता है कि

“कौन-सा code चले और कौन-सा नहीं”
तो हम Conditional Statements का इस्तेमाल करते हैं।

JavaScript में condition हमेशा true या false के आधार पर check होती है।

🔸 2. Conditional Statements के Types

| Type                  | Description                                                    |
| --------------------- | -------------------------------------------------------------- |
| `if`                  | जब condition true हो तो code चले                               |
| `if...else`           | जब condition true हो तो एक code, false हो तो दूसरा             |
| `if...else if...else` | कई conditions को handle करने के लिए                            |
| `switch`              | कई cases को handle करने के लिए (cleaner than multiple if-else) |

🧩 3. if Statement

Syntax:

if (condition) {
   // condition true होने पर ये code चलेगा
}


Example:

let age = 20;

if (age >= 18) {
   console.log("You are eligible to vote ✅");
}


🧠 Why use: जब कोई single condition check करनी हो।
📍 Where: Validation, eligibility check, etc.
⚙️ How: (condition) में boolean expression लिखा जाता है।

🧩 4. if...else Statement

Syntax:

if (condition) {
   // अगर condition true है
} else {
   // अगर condition false है
}


Example:

let age = 15;

if (age >= 18) {
   console.log("You can drive 🚗");
} else {
   console.log("You cannot drive ❌");
}


🧠 Why use: जब दो possibilities हों — true या false।
📍 Where: Login check, permission check, etc.

🧩 5. if...else if...else Statement

Syntax:

if (condition1) {
   // अगर condition1 true है
} else if (condition2) {
   // अगर condition2 true है
} else {
   // दोनों false हैं तो ये चलेगा
}


Example:

let marks = 75;

if (marks >= 90) {
   console.log("Grade: A+ 🏅");
} else if (marks >= 70) {
   console.log("Grade: A 👍");
} else if (marks >= 50) {
   console.log("Grade: B 🙂");
} else {
   console.log("Fail ❌");
}


🧠 Why use: जब multiple conditions हों।
📍 Where: Result, price range, performance rating, etc.

🧩 6. Nested if Statement

एक if के अंदर दूसरा if — यानी nested condition।

Example:

let age = 25;
let hasLicense = true;

if (age >= 18) {
   if (hasLicense) {
      console.log("You can drive 🚗");
   } else {
      console.log("Apply for license first 🚘");
   }
} else {
   console.log("You are underage ❌");
}


🧠 Why use: जब conditions depend करती हैं एक-दूसरे पर।

🧩 7. switch Statement

Syntax:

switch(expression) {
   case value1:
      // code block
      break;
   case value2:
      // code block
      break;
   default:
      // अगर ऊपर का कोई case match ना करे
}


Example:

let day = 3;

switch(day) {
   case 1:
      console.log("Monday");
      break;
   case 2:
      console.log("Tuesday");
      break;
   case 3:
      console.log("Wednesday");
      break;
   default:
      console.log("Invalid day");
}


🧠 Why use: जब कई fixed options में से किसी एक को choose करना हो।
📍 Where: Menus, choices, day/month mapping, etc.

⚙️ 8. Real-Life Practical Example
🔹 Example: Login System
let username = "sunil";
let password = "12345";

if (username === "sunil" && password === "12345") {
   console.log("Login Successful ✅");
} else {
   console.log("Invalid Credentials ❌");
}

🔹 Example: Light Theme / Dark Theme
let theme = "dark";

if (theme === "light") {
   console.log("Apply light theme 🌞");
} else {
   console.log("Apply dark theme 🌙");
}

🧾 9. Summary Table

| Statement      | Purpose              | Example                  |
| -------------- | -------------------- | ------------------------ |
| `if`           | Single condition     | `if(a > b)`              |
| `if...else`    | Two possibilities    | `if(age >= 18) else`     |
| `if...else if` | Multiple conditions  | `if(x==1) else if(x==2)` |
| `switch`       | Multiple fixed cases | `switch(day)`            |

🎯 10. कब, कहाँ और कैसे Use करें

| Situation         | Use         | Example          |
| ----------------- | ----------- | ---------------- |
| Simple check      | `if`        | `if(score>50)`   |
| Two options       | `if...else` | `if(login) else` |
| Multiple ranges   | `else if`   | `marks` grading  |
| Fixed value check | `switch`    | `switch(day)`    |

💡 Bonus: Short form (Ternary Operator)
let result = (age >= 18) ? "Adult" : "Minor";
console.log(result);


✅ Same as:

if (age >= 18) { console.log("Adult"); }
else { console.log("Minor"); }


बिलकुल! आइए JavaScript में Conditional Statements को हिंदी में विस्तार से समझते हैं, उदाहरण के साथ।

1. Conditional Statements क्या हैं?

Conditional statements आपको प्रोग्राम में फैसले लेने की सुविधा देते हैं।
साधारण शब्दों में:

“अगर यह सच है, तो यह करें; नहीं तो वह करें।”

ये ज़रूरी हैं क्योंकि अक्सर हमें प्रोग्राम का फ्लो बदलना पड़ता है, जैसे यूज़र का इनपुट या किसी स्थिति के आधार पर।

2. JavaScript में Conditional Statements के प्रकार
a) if Statement

इसका इस्तेमाल तब करते हैं जब आप कोई कोड सिर्फ तब चलाना चाहते हैं जब condition true हो।
Syntax:

if (condition) {
    // अगर condition true हो तो यह कोड चलेगा
}


Example:

let age = 18;

if (age >= 18) {
    console.log("आप एक वयस्क हैं।");
}


Output: आप एक वयस्क हैं।

b) if...else Statement

इसका उपयोग तब होता है जब आपके पास दो रास्ते हों: एक true के लिए, दूसरा false के लिए।
Syntax:

if (condition) {
    // true होने पर यह कोड चलेगा
} else {
    // false होने पर यह कोड चलेगा
}


Example:

let age = 16;

if (age >= 18) {
    console.log("आप वोट दे सकते हैं।");
} else {
    console.log("आप अभी वोट नहीं दे सकते।");
}


Output: आप अभी वोट नहीं दे सकते।

c) if...else if...else Statement

जब कई conditions हों, तब इसका इस्तेमाल करें।
Syntax:

if (condition1) {
    // code1
} else if (condition2) {
    // code2
} else {
    // code3
}


Example:

let marks = 75;

if (marks >= 90) {
    console.log("ग्रेड A");
} else if (marks >= 75) {
    console.log("ग्रेड B");
} else if (marks >= 50) {
    console.log("ग्रेड C");
} else {
    console.log("फेल");
}


Output: ग्रेड B

d) switch Statement

इसका इस्तेमाल तब करें जब आप एक value को multiple cases से compare करना चाहते हों।

यह कई if...else if की जगह cleaner और readable होता है।
Syntax:

switch(expression) {
    case value1:
        // code
        break;
    case value2:
        // code
        break;
    default:
        // अगर कोई case match नहीं होता
}


Example:

let day = 3;

switch(day) {
    case 1:
        console.log("सोमवार");
        break;
    case 2:
        console.log("मंगलवार");
        break;
    case 3:
        console.log("बुधवार");
        break;
    default:
        console.log("अमान्य दिन");
}


Output: बुधवार

Note: break statement जरूरी है ताकि एक case से दूसरे में न चला जाए।

e) Ternary Operator (Short form of if...else)

यह if...else का short version है, जो एक लाइन में लिख सकते हैं।
Syntax:

condition ? expressionIfTrue : expressionIfFalse;


Example:

let age = 20;
let canVote = (age >= 18) ? "हाँ" : "नहीं";
console.log(canVote);


Output: हाँ

3. Conditional Statements क्यों, कब और कहाँ इस्तेमाल करें

क्यों (Why)	                           कब (When)	                                                         कहाँ (Where)

निर्णय लेने के लिए	                          यूज़र इनपुट, variable की value, या प्रोग्राम की स्थिति के आधार पर	                 Frontend (UI changes), Backend (API responses), loops, functions
प्रोग्राम का flow नियंत्रित करने के लिए          	  विभिन्न संभावनाओं की जाँच करने के लिए	                                         Forms, games, authentication, calculations
अलग-अलग actions execute करने के लिए	      Error या validation handle करने के लिए	                                 Projects जैसे shopping cart, login system, data validation



| **क्यों (Why)**                            | **कब (When)**                                                     | **कहाँ (Where)**                                                 |
| --------------------------------------- | ----------------------------------------------------------------- | ---------------------------------------------------------------- |
| निर्णय लेने के लिए                                      | यूज़र इनपुट, variable की value, या प्रोग्राम की स्थिति के आधार पर               | Frontend (UI changes), Backend (API responses), loops, functions |
| प्रोग्राम का flow नियंत्रित करने के लिए | विभिन्न संभावनाओं की जाँच करने के लिए                             | Forms, games, authentication, calculations                       |
| अलग-अलग actions execute करने के लिए     | Error या validation handle करने के लिए                            | Projects जैसे shopping cart, login system, data validation       |

4. Tips और Best Practices

हमेशा braces {} का इस्तेमाल करें, भले ही code एक line का हो।

Conditions को सिंपल और readable रखें।

switch का इस्तेमाल fixed value comparisons के लिए करें।

Ternary operator short और simple conditions के लिए use करें, complex logic के लिए नहीं।

Deeply nested if statements से बचें; functions या switch का use करें।

अगर आप चाहो तो मैं एक पूरा cheat sheet बनाकर दूँ, जिसमें सभी conditional statements के real-world examples होंगे जैसे:

Login check

Form validation

Grading system
