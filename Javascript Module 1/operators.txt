рдмрд┐рд▓рдХреБрд▓ ЁЯФе
рдЪрд▓реЛ рдЕрдм рд╣рдо JavaScript Operators (рдСрдкрд░реЗрдЯрд░реНрд╕) рдХреЛ рдмрд╣реБрдд рд╣реА рдЖрд╕рд╛рди рд╣рд┐рдВрджреА рдореЗрдВ step-by-step рд╕рдордЭрддреЗ рд╣реИрдВ тАФ
рд╕рд╛рде рдореЗрдВ why, when, where рдФрд░ how to use рднреА рдЬрд╛рдиреЗрдВрдЧреЗред

ЁЯза Operators in JavaScript (рдСрдкрд░реЗрдЯрд░реНрд╕ рдХреНрдпрд╛ рд╣реЛрддреЗ рд╣реИрдВ?)

ЁЯСЙ Operator рд╡реЛ symbols рд╣реЛрддреЗ рд╣реИрдВ рдЬреЛ values рдпрд╛ variables рдкрд░ рдХреЛрдИ operation (рдХрд╛рдо) рдХрд░рддреЗ рд╣реИрдВред
рдЬреИрд╕реЗ тАФ рдЬреЛрдбрд╝рдирд╛, рдШрдЯрд╛рдирд╛, compare рдХрд░рдирд╛, value assign рдХрд░рдирд╛ рдЖрджрд┐ред

рдЙрджрд╛рд╣рд░рдг:

let a = 10;
let b = 5;
let sum = a + b;   // '+' рдПрдХ operator рд╣реИ


рдпрд╣рд╛рдБ + addition operator рд╣реИ рдЬреЛ a рдФрд░ b рдХреЛ рдЬреЛрдбрд╝ рд░рд╣рд╛ рд╣реИред

тЪЩя╕П Operators рдХреЗ Types

JavaScript рдореЗрдВ operators рдХрдИ рдкреНрд░рдХрд╛рд░ рдХреЗ рд╣реЛрддреЗ рд╣реИрдВ ЁЯСЗ

No.	Type	Example
1	Arithmetic Operators	+, -, *, /, %, **
2	Assignment Operators	=, +=, -=, *=, /=
3	Comparison Operators	==, ===, !=, !==, >, <, >=, <=
4	Logical Operators	&&, ||, !
5	String Operators	+, +=
6	Ternary Operator	condition ? value1 : value2
7	Type Operators	typeof, instanceof
8	Bitwise Operators	&, |, ^, ~, <<, >>

| No. | Type                 | Example                        |
| --- | -------------------- | ------------------------------ |
| 1   | Arithmetic Operators | +, -, *, /, %, **              |
| 2   | Assignment Operators | =, +=, -=, *=, /=              |
| 3   | Comparison Operators | ==, ===, !=, !==, >, <, >=, <= |
| 4   | Logical Operators    | &&, ||, !                      |
| 5   | String Operators     | +, +=                          |
| 6   | Ternary Operator     | `condition ? value1 : value2`  |
| 7   | Type Operators       | typeof, instanceof             |
| 8   | Bitwise Operators    | &, |, ^, ~, <<, >>             |

ЁЯзо 1я╕ПтГг Arithmetic Operators (рдЧрдгрд┐рддреАрдп рдСрдкрд░реЗрдЯрд░реНрд╕)

рдЗрдирд╕реЗ рд╣рдо рдЧрдгрд┐рддреАрдп рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВ тАФ рдЬреЛрдбрд╝рдирд╛, рдШрдЯрд╛рдирд╛, рдЧреБрдгрд╛, рднрд╛рдЧ рдЖрджрд┐ред

Operator	Meaning	Example	Result
+	рдЬреЛрдбрд╝рдирд╛	5 + 2	7
-	рдШрдЯрд╛рдирд╛	5 - 2	3
*	рдЧреБрдгрд╛	5 * 2	10
/	рднрд╛рдЧ	10 / 2	5
%	remainder	10 % 3	1
**	power	2 ** 3	8

| Operator | Meaning   | Example  | Result |
| -------- | --------- | -------- | ------ |
| `+`      | рдЬреЛрдбрд╝рдирд╛    | `5 + 2`  | `7`    |
| `-`      | рдШрдЯрд╛рдирд╛     | `5 - 2`  | `3`    |
| `*`      | рдЧреБрдгрд╛      | `5 * 2`  | `10`   |
| `/`      | рднрд╛рдЧ       | `10 / 2` | `5`    |
| `%`      | remainder | `10 % 3` | `1`    |
| `**`     | power     | `2 ** 3` | `8`    |

ЁЯФ╣ Example:
let a = 10;
let b = 3;
console.log(a + b);  // 13
console.log(a % b);  // 1


ЁЯза Why use: рдЬрдм рдХрд┐рд╕реА project рдореЗрдВ calculation рдХрд░рдиреА рд╣реЛ (billing, score, price, etc.)

тЬНя╕П 2я╕ПтГг Assignment Operators (рдорд╛рди рдЕрд╕рд╛рдЗрди рдХрд░рдиреЗ рд╡рд╛рд▓реЗ)

рдЗрдирд╕реЗ рд╣рдо рдХрд┐рд╕реА variable рдореЗрдВ value assign рдпрд╛ update рдХрд░рддреЗ рд╣реИрдВред

Operator	 Meaning	        Example	                Result
=	         assign	                x = 10	                10
+=	         рдЬреЛрдбрд╝рдХрд░ assign	        x += 5	                x = x + 5
-=	         рдШрдЯрд╛рдХрд░ assign	        x -= 5	                x = x - 5
*=	         рдЧреБрдгрд╛ рдХрд░ assign	        x *= 5	                x = x * 5
/=	         рднрд╛рдЧ рдХрд░ assign	        x /= 5	                x = x / 5


| Operator | Meaning        | Example  | Result      |
| -------- | -------------- | -------- | ----------- |
| `=`      | assign         | `x = 10` | 10          |
| `+=`     | рдЬреЛрдбрд╝рдХрд░ assign  | `x += 5` | `x = x + 5` |
| `-=`     | рдШрдЯрд╛рдХрд░ assign   | `x -= 5` | `x = x - 5` |
| `*=`     | рдЧреБрдгрд╛ рдХрд░ assign | `x *= 5` | `x = x * 5` |
| `/=`     | рднрд╛рдЧ рдХрд░ assign  | `x /= 5` | `x = x / 5` |

ЁЯФ╣ Example:
let x = 10;
x += 5; // x = x + 5
console.log(x); // 15


ЁЯза Why use: рдЬрдм рдЖрдкрдХреЛ рдХрд┐рд╕реА variable рдХреА value рдХреЛ update рдХрд░рдирд╛ рд╣реЛред

тЪЦя╕П 3я╕ПтГг Comparison Operators (рддреБрд▓рдирд╛ рдХрд░рдиреЗ рд╡рд╛рд▓реЗ)

рдЗрдирд╕реЗ рд╣рдо рджреЛ values рдХреА comparison (рддреБрд▓рдирд╛) рдХрд░рддреЗ рд╣реИрдВред
рдЗрдирдХрд╛ result рд╣рдореЗрд╢рд╛ true рдпрд╛ false рд╣реЛрддрд╛ рд╣реИред

Operator	Meaning	                        Example	        Result
==	        рдмрд░рд╛рдмрд░ (value check)	        5 == "5"	true
===	        рдмрд░рд╛рдмрд░ (value + type check)	5 === "5"	false
!=	        рдмрд░рд╛рдмрд░ рдирд╣реАрдВ	                        5 != "5"	false
!==	        рдмрд░рд╛рдмрд░ рдирд╣реАрдВ (type рд╕рд╣рд┐рдд)	        5 !== "5"	true
>	        рдмрдбрд╝рд╛	                        10 > 5	        true
<	        рдЫреЛрдЯрд╛	                        5 < 10	        true
>=	        рдмрдбрд╝рд╛ рдпрд╛ рдмрд░рд╛рдмрд░	                10 >= 10	true
<=	        рдЫреЛрдЯрд╛ рдпрд╛ рдмрд░рд╛рдмрд░	                5 <= 10	        true


| Operator | Meaning                    | Example     | Result |
| -------- | -------------------------- | ----------- | ------ |
| `==`     | рдмрд░рд╛рдмрд░ (value check)        | `5 == "5"`  | true   |
| `===`    | рдмрд░рд╛рдмрд░ (value + type check) | `5 === "5"` | false  |
| `!=`     | рдмрд░рд╛рдмрд░ рдирд╣реАрдВ                 | `5 != "5"`  | false  |
| `!==`    | рдмрд░рд╛рдмрд░ рдирд╣реАрдВ (type рд╕рд╣рд┐рдд)     | `5 !== "5"` | true   |
| `>`      | рдмрдбрд╝рд╛                       | `10 > 5`    | true   |
| `<`      | рдЫреЛрдЯрд╛                       | `5 < 10`    | true   |
| `>=`     | рдмрдбрд╝рд╛ рдпрд╛ рдмрд░рд╛рдмрд░              | `10 >= 10`  | true   |
| `<=`     | рдЫреЛрдЯрд╛ рдпрд╛ рдмрд░рд╛рдмрд░              | `5 <= 10`   | true   |

ЁЯФ╣ Example:
let age = 18;

if (age >= 18) {
  console.log("Eligible for vote");
} else {
  console.log("Not eligible");
}


ЁЯза Why use: рдЬрдм рдЖрдкрдХреЛ condition check рдХрд░рдиреА рд╣реЛред

ЁЯТб 4я╕ПтГг Logical Operators (рддрд╛рд░реНрдХрд┐рдХ рдСрдкрд░реЗрдЯрд░реНрд╕)

рдХрдИ conditions рдХреЛ рдПрдХ рд╕рд╛рде рдЬреЛрдбрд╝рдиреЗ рдпрд╛ рдЙрд▓рдЯрдиреЗ рдХреЗ рд▓рд┐рдП use рдХрд░рддреЗ рд╣реИрдВред

| Operator | Meaning | Example            | Result                 |
| -------- | ------- | ------------------ | ---------------------- |
| `&&`     | AND     | `x > 5 && x < 10`  | true рдЬрдм рджреЛрдиреЛрдВ true рд╣реЛрдВ |
| `||`     | OR      | `x > 5 \|\| x < 3` | true рдЬрдм рдХреЛрдИ рдПрдХ true рд╣реЛ |
| `!`      | NOT     | `!(x > 5)`         | рдЙрд▓реНрдЯрд╛ рдХрд░ рджреЗрддрд╛ рд╣реИ       |

ЁЯФ╣ Example:
let age = 20;
let hasID = true;

if (age >= 18 && hasID) {
  console.log("Access Granted");
}


ЁЯза Why use: рдЬрдм multiple conditions check рдХрд░рдиреА рд╣реЛрдВ (form validation, access control, etc.)

ЁЯз╡ 5я╕ПтГг String Operators

+ рдФрд░ += рд╕реЗ string рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ (concatenation)ред

ЁЯФ╣ Example:
let firstName = "Sunil";
let lastName = "Sen";
let fullName = firstName + " " + lastName;

console.log(fullName); // "Sunil Sen"


ЁЯза Why use: рдЬрдм рдЖрдкрдХреЛ message рдпрд╛ name combine рдХрд░рдирд╛ рд╣реЛред

ЁЯзй 6я╕ПтГг Ternary Operator (Short if-else)

ЁЯСЙ Syntax:

condition ? value_if_true : value_if_false;

ЁЯФ╣ Example:
let age = 18;
let result = (age >= 18) ? "Adult" : "Minor";
console.log(result); // Adult


ЁЯза Why use: рдЬрдм рдЫреЛрдЯреА condition рдХреЛ single line рдореЗрдВ рд▓рд┐рдЦрдирд╛ рд╣реЛред

ЁЯФН 7я╕ПтГг Type Operators

| Operator     | Use                    | Example                | Result     |
| ------------ | ---------------------- | ---------------------- | ---------- |
| `typeof`     | data type check рдХрд░рдирд╛   | `typeof "Hello"`       | `"string"` |
| `instanceof` | object рдХрд┐рд╕ class рдХрд╛ рд╣реИ | `arr instanceof Array` | `true`     |

ЁЯФ╣ Example:
let arr = [1, 2, 3];
console.log(typeof arr);        // object
console.log(arr instanceof Array); // true


ЁЯза Why use: рдЬрдм type рдпрд╛ object check рдХрд░рдирд╛ рд╣реЛ (debugging рдореЗрдВ useful)

тЪб 8я╕ПтГг Bitwise Operators (рдереЛрдбрд╝рд╛ advanced)

рдпреЗ binary (bits) рдкрд░ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВ
ЁЯСЙ Mostly system-level, encryption рдпрд╛ performance tasks рдореЗрдВред

| Operator | Meaning     | Example         |    |        |
| -------- | ----------- | --------------- | -- | ------ |
| `&`      | AND         | `5 & 1` тЖТ `1`   |    |        |
| `        | `           | OR              | `5 | 1`тЖТ`5` |
| `^`      | XOR         | `5 ^ 1` тЖТ `4`   |    |        |
| `~`      | NOT         | `~5` тЖТ `-6`     |    |        |
| `<<`     | Left shift  | `5 << 1` тЖТ `10` |    |        |
| `>>`     | Right shift | `5 >> 1` тЖТ `2`  |    |        |


ЁЯОп Where & When to Use

| Situation          | Operator Type | Example                |
| ------------------ | ------------- | ---------------------- |
| Calculation        | Arithmetic    | `+`, `-`, `*`, `/`     |
| Assign / Update    | Assignment    | `+=`, `-=`             |
| Compare Values     | Comparison    | `==`, `===`, `>`, `<`  |
| Combine Conditions | Logical       | `&&`, `\|\|`           |
| Combine Strings    | String        | `+`                    |
| Short Condition    | Ternary       | `?:`                   |
| Check Type         | Type Operator | `typeof`, `instanceof` |

ЁЯза Summary Table
| Type       | Symbol         | Example                   | Use                 |
| ---------- | -------------- | ------------------------- | ------------------- |
| Arithmetic | `+ - * / % **` | `a + b`                   | Calculation         |
| Assignment | `= += -= *=`   | `x += 5`                  | Value Update        |
| Comparison | `== === !=`    | `a == b`                  | Compare Values      |
| Logical    | `&& \|\| !`    | `a && b`                  | Multiple Conditions |
| String     | `+`            | `"Hi" + "JS"`             | Text Join           |
| Ternary    | `?:`           | `age > 18 ? "Yes" : "No"` | Short Condition     |
| Type       | `typeof`       | `typeof "Hi"`             | Type Check          |





рдЗрд╕рд╕реЗ рдЖрдк practical рддрд░реАрдХреЗ рд╕реЗ рдЖрд╕рд╛рдиреА рд╕реЗ рд╕реАрдЦ рд╕рдХрддреЗ рд╣реИрдВред

рдХреНрдпрд╛ рдореИрдВ рд╡реЛ cheat sheet рдмрдирд╛ рджреВрдБ?




