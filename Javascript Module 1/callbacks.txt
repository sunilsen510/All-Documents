рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ рд╕рд╡рд╛рд▓ ЁЯФе
рдЖрдЗрдП рдЕрдм JavaScript рдореЗрдВ Callbacks рдХреЛ step-by-step рд╣рд┐рдВрджреА рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ тАФ
рд╕рд╛рде рдореЗрдВ examples, use-cases (рдХрдм-рдХреНрдпреЛрдВ-рдХрд╣рд╛рдБ) рдФрд░ project рдореЗрдВ implement рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рднреА рдорд┐рд▓реЗрдЧрд╛ ЁЯСЗ

ЁЯза Callback рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?

Callback рдПрдХ рдРрд╕рд╛ function рд╣реЛрддрд╛ рд╣реИ рдЬрд┐рд╕реЗ рд╣рдо рдХрд┐рд╕реА рджреВрд╕рд░реЗ function рдХреЗ рдЕрдВрджрд░ argument рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ,
рдФрд░ рд╡реЛ function рдмрд╛рдж рдореЗрдВ рдЙрд╕реЗ call рдХрд░рддрд╛ рд╣реИ тАФ рдЬрдм рдЙрд╕рдХрд╛ main рдХрд╛рдо рдкреВрд░рд╛ рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯСЙ рдЖрд╕рд╛рди рднрд╛рд╖рд╛ рдореЗрдВ:

"Callback рд╡реЛ function рд╣реЛрддрд╛ рд╣реИ рдЬреЛ рдХрд┐рд╕реА рдХрд╛рдо рдХреЗ рдЦрддреНрдо рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж execute рд╣реЛрддрд╛ рд╣реИред"

ЁЯУШ Basic Example
function greet(name, callback) {
  console.log("Hello, " + name);
  callback(); // callback function рдХреЛ call рдХрд┐рдпрд╛
}

function sayBye() {
  console.log("Goodbye!");
}

greet("Sunil", sayBye);

ЁЯСЙ Output:
Hello, Sunil
Goodbye!


рдпрд╣рд╛рдБ sayBye function рдХреЛ рд╣рдордиреЗ callback рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд┐рдпрд╛ рд╣реИред
greet() function рдкрд╣рд▓реЗ тАЬHello, SunilтАЭ рджрд┐рдЦрд╛рддрд╛ рд╣реИ,
рдлрд┐рд░ callback (sayBye) рдХреЛ call рдХрд░рддрд╛ рд╣реИред

ЁЯОп Callback рдХреНрдпреЛрдВ Use рдХрд░рддреЗ рд╣реИрдВ?

рдХреНрдпреЛрдВрдХрд┐ JavaScript asynchronous рд╣реИ тАФ рдорддрд▓рдм рдХреБрдЫ рдХрд╛рдо (рдЬреИрд╕реЗ API call, timer, file read)
рддреБрд░рдВрдд complete рдирд╣реАрдВ рд╣реЛрддреЗред

Callback рдХреА рдорджрдж рд╕реЗ рд╣рдо рдХрд╣ рд╕рдХрддреЗ рд╣реИрдВ тАФ

"рдЬрдм рдХрд╛рдо рдкреВрд░рд╛ рд╣реЛ рдЬрд╛рдП, рддрдм рдпреЗ function рдЪрд▓рд╛рдирд╛ред"

Example:

рдЬрдм data server рд╕реЗ рдЖ рдЬрд╛рдП, рддрдм рджрд┐рдЦрд╛рдУред

рдЬрдм image load рд╣реЛ рдЬрд╛рдП, рддрдм message рджреЛред

рдЬрдм animation рдкреВрд░реА рд╣реЛ рдЬрд╛рдП, рддрдм рдЕрдЧрд▓реА animation рд╢реБрд░реВ рдХрд░реЛред

тП░ Callback рдХрдм рдФрд░ рдХрд╣рд╛рдБ Use рдХрд░рддреЗ рд╣реИрдВ?
| рдХрдм                                                                                        | рдХрд╣рд╛рдБ                                              |
| -----------------------------------------------------------  | ----------------------------------------------- |
| рдЬрдм рдХреЛрдИ task time рд▓реЗрддрд╛ рд╣реИ                                                          | API calls, file loading, timers                 |
| рдЬрдм рд╣рдореЗрдВ рдХрд┐рд╕реА function рдХрд╛ result рдЖрдиреЗ рдХреЗ рдмрд╛рдж рдХреБрдЫ рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ           | Data рджрд┐рдЦрд╛рдирд╛ рдпрд╛ рдЖрдЧреЗ process рдХрд░рдирд╛                 |
| рдЬрдм sequence рдореЗрдВ рдХрд╛рдо рдХрд░рдиреЗ рд╣реЛрдВ                                                      | рдкрд╣рд▓реЗ data рд▓рд╛рдирд╛, рдлрд┐рд░ process рдХрд░рдирд╛, рдлрд┐рд░ show рдХрд░рдирд╛ |

ЁЯзй Example 2 тАФ Delayed Callback (setTimeout рдХреЗ рд╕рд╛рде)
function fetchData(callback) {
  console.log("тП│ Data load рд╣реЛ рд░рд╣рд╛ рд╣реИ...");

  setTimeout(() => {
    console.log("тЬЕ Data loaded!");
    callback(); // data load рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж callback call
  }, 2000);
}

function showData() {
  console.log("ЁЯУж Data рджрд┐рдЦрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛!");
}

fetchData(showData);

ЁЯСЙ Output:
тП│ Data load рд╣реЛ рд░рд╣рд╛ рд╣реИ...
тЬЕ Data loaded!
ЁЯУж Data рджрд┐рдЦрд╛ рджрд┐рдпрд╛ рдЧрдпрд╛!


рдпрд╣рд╛рдБ fetchData() рдкрд╣рд▓реЗ data load рдХрд░рддрд╛ рд╣реИ (2 рд╕реЗрдХрдВрдб delay),
рдФрд░ рдЬрдм load рд╣реЛ рдЬрд╛рддрд╛ рд╣реИ рддрдм callback showData() call рд╣реЛрддрд╛ рд╣реИред

тЪЩя╕П Example 3 тАФ Callback with Parameters
function calculate(a, b, callback) {
  console.log("ЁЯФв Calculation рд╢реБрд░реВ...");
  let result = a + b;
  callback(result);
}

function displayResult(sum) {
  console.log("тЬЕ Result рд╣реИ:", sum);
}

calculate(10, 20, displayResult);

ЁЯСЙ Output:
ЁЯФв Calculation рд╢реБрд░реВ...
тЬЕ Result рд╣реИ: 30


рдпрд╣рд╛рдБ calculate() рдиреЗ sum рдирд┐рдХрд╛рд▓рд╛ рдФрд░ callback рдХреЛ result рднреЗрдЬ рджрд┐рдпрд╛ред

тЪая╕П Callback Hell (Problem)

рдЕрдЧрд░ multiple async tasks рдПрдХ рдХреЗ рдмрд╛рдж рдПрдХ рдХрд░рдиреЗ рд╣реЛрдВ
(рдЬреИрд╕реЗ data рд▓рд╛рдУ тЖТ process рдХрд░реЛ тЖТ show рдХрд░реЛ),
рддреЛ callback рдмрд╣реБрдд nested рд╣реЛ рдЬрд╛рддреЗ рд╣реИрдВ ЁЯСЗ

getData(function(a) {
  processData(a, function(b) {
    saveData(b, function(c) {
      showData(c, function() {
        console.log("All done!");
      });
    });
  });
});


ЁЯСЙ рдЗрд╕реЗ рд╣реА Callback Hell рдХрд╣рддреЗ рд╣реИрдВ тАФ code unreadable рдФрд░ messy рд╣реЛ рдЬрд╛рддрд╛ рд╣реИред
рдЗрд╕реА рд╡рдЬрд╣ рд╕реЗ рдмрд╛рдж рдореЗрдВ Promises рдФрд░ Async/Await рдЖрдПред

ЁЯза Difference Between Callback & Promise

| Feature        | Callback                                     | Promise                       |
| -------------- | -------------------------------------------- | ----------------------------- |
| рддрд░реАрдХрд╛                | Function рдХреЛ argument рдХреЗ рд░реВрдк рдореЗрдВ рдкрд╛рд╕ рдХрд░рддреЗ рд╣реИрдВ        | Promise object return рд╣реЛрддрд╛ рд╣реИ |
| Error handling | рдереЛрдбрд╝рд╛ complex                                  | рдЖрд╕рд╛рди (`.catch()` рд╕реЗ)          |
| Readability    | Nested & confusing                           | Clean & chainable             |
| Modern Use     | Old method                                   | Modern standard               |



ЁЯТ╝ Project рдореЗрдВ Callback рдХрд╛ Use рдХреИрд╕реЗ рдХрд░реЗрдВ?

рдорд╛рди рд▓реАрдЬрд┐рдП рдЖрдкрдХреЗ project рдореЗрдВ user theme select рдХрд░рддрд╛ рд╣реИ,
рдФрд░ рдЖрдк рдЪрд╛рд╣рддреЗ рд╣реИрдВ рдХрд┐:

рдкрд╣рд▓реЗ тАЬSaving Theme...тАЭ рджрд┐рдЦреЗ

рдлрд┐рд░ тАЬTheme Saved SuccessfullyтАЭ рджрд┐рдЦреЗ

рдЖрдк callback рд╕реЗ рдРрд╕рд╛ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ ЁЯСЗ

function saveTheme(theme, callback) {
  console.log(`тП│ "${theme}" theme save рд╣реЛ рд░рд╣реА рд╣реИ...`);

  setTimeout(() => {
    console.log(`тЬЕ "${theme}" theme save рд╣реЛ рдЧрдИ!`);
    callback(); // save рдХреЗ рдмрд╛рдж callback call
  }, 1500);
}

function showSuccess() {
  console.log("ЁЯОЙ Theme successfully applied!");
}

saveTheme("dark", showSuccess);

ЁЯСЙ Output:
тП│ "dark" theme save рд╣реЛ рд░рд╣реА рд╣реИ...
тЬЕ "dark" theme save рд╣реЛ рдЧрдИ!
ЁЯОЙ Theme successfully applied!

ЁЯзй Example 5 тАФ Inline Anonymous Callback Function

рдЖрдк callback рдХреЛ anonymous function рдХреЗ рд░реВрдк рдореЗрдВ рднреА рдкрд╛рд╕ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:

saveTheme("light", function() {
  console.log("ЁЯМИ Light theme applied successfully!");
});


рдЗрд╕рдореЗрдВ рдЕрд▓рдЧ рд╕реЗ callback function define рдХрд░рдиреЗ рдХреА рдЬрд╝рд░реВрд░рдд рдирд╣реАрдВред

ЁЯз╛ Summary (Callback Shortcut Notes)
| Concept           | Description                                      |
| ----------------- | ------------------------------------------------ |
| **Callback**      | Function рдЬреЛ рдХрд┐рд╕реА рджреВрд╕рд░реЗ function рдореЗрдВ pass рд╣реЛрддрд╛ рд╣реИ         |
| **Use рдХрдм рдХрд░реЗрдВ**    | рдЬрдм рдХреЛрдИ task asynchronous рд╣реЛ                                  |
| **Callback Hell** | Nested callbacks рдЬреЛ unreadable рд╣реЛ рдЬрд╛рдПрдБ                   |
| **Solution**      | Promises рдФрд░ Async/Await                          |

ЁЯзй Real Use Cases in Projects

| Project Task  | Callback рдХрд╣рд╛рдБ рдХрд╛рдо рдЖрдПрдЧрд╛                     |
| ------------- | ------------------------------------------ |
| Theme Toggle  | Theme save рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж message рджрд┐рдЦрд╛рдирд╛      |
| Form Submit   | Server рд╕реЗ response рдЖрдиреЗ рдкрд░ next step рд▓реЗрдирд╛   |
| Image Loading | Image load рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж animation рдЪрд╛рд▓реВ рдХрд░рдирд╛ |
| API Fetch     | Data рдЖрдиреЗ рдХреЗ рдмрд╛рдж UI update рдХрд░рдирд╛             |
| Animations    | рдПрдХ animation рдХреЗ рдмрд╛рдж рджреВрд╕рд░реА рдЪрд▓рд╛рдирд╛            |

рдЕрдЧрд░ рдЖрдк рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрд╕ theme toggle (sun/moon) project рдореЗрдВ
рдПрдХ callback version рдмрдирд╛ рджреВрдБ тАФ
рдЬрд┐рд╕рдореЗрдВ theme save рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж callback рд╕реЗ message рджрд┐рдЦреЗ (Promise version рдХреЗ рдмрд┐рдирд╛)ред

рдХреНрдпрд╛ рдореИрдВ рд╡реЛ рдмрдирд╛ рджреВрдБ?

You said:
mean callbacks kaha per aur kis particular point ya topics mai use krte hai wo explain kro 
ChatGPT said:

рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛ рд╕рд╡рд╛рд▓ ЁЯФе
рдХреНрдпреЛрдВрдХрд┐ рдпреЗ рд╕рдмрд╕реЗ important clarity рд╣реЛрддреА рд╣реИ тАФ
"Callback рдХреЛ practically рдХрд╣рд╛рдБ рдФрд░ рдХрд┐рд╕ рдЬрдЧрд╣ use рдХрд░рддреЗ рд╣реИрдВ?"
рдЖрдУ рдЗрд╕реЗ topic-wise + real project points рдореЗрдВ рд╕рдордЭрддреЗ рд╣реИрдВ ЁЯСЗ

ЁЯОп рдкрд╣рд▓реЗ рдПрдХ рд▓рд╛рдЗрди рдореЗрдВ рд╕рдордЭреЛ:

Callback рдХрд╛ use рд╣рдо тАЬрдЬрдм рдХреЛрдИ рдХрд╛рдо рдЦрддреНрдо рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж рджреВрд╕рд░рд╛ рдХрд╛рдо рдХрд░рдирд╛ рд╣реЛтАЭ рддрдм рдХрд░рддреЗ рд╣реИрдВред
рдпрд╛рдиреА asynchronous tasks рдореЗрдВ тАЬnext stepтАЭ define рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

ЁЯУЪ рдЕрдм Step-by-Step Topic-wise рд╕рдордЭреЛ ЁЯСЗ
1. setTimeout() / setInterval() рдореЗрдВ

рдЬрдм рд╣рдореЗрдВ рдХрд┐рд╕реА code рдХреЛ delay рдХреЗ рдмрд╛рдж рдЪрд▓рд╛рдирд╛ рд╣реЛрддрд╛ рд╣реИред

setTimeout(function() {
  console.log("тП░ 2 рд╕реЗрдХрдВрдб рдмрд╛рдж рдЪрд▓рд╛!");
}, 2000);


ЁЯСЙ рдпрд╣рд╛рдБ рдЬреЛ function рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рд╡рд╣реА callback рд╣реИред
рдХреНрдпреЛрдВрдХрд┐ JavaScript рдЙрд╕реЗ рдмрд╛рдж рдореЗрдВ call рдХрд░рддреА рд╣реИ (2 рд╕реЗрдХрдВрдб рдмрд╛рдж)ред

2. Event Handling (Click, Hover, Input, etc.)

рдЬрдм user рдХреЛрдИ event perform рдХрд░рддрд╛ рд╣реИ (рдЬреИрд╕реЗ button рдкрд░ click рдХрд░рдирд╛)ред

document.getElementById("btn").addEventListener("click", function() {
  console.log("ЁЯЦ▒я╕П Button clicked!");
});


ЁЯСЙ рдпрд╣рд╛рдБ рднреА callback function рд╣реИ тАФ
рдЬрдм тАЬclickтАЭ event trigger рд╣реЛрддрд╛ рд╣реИ, рддрдм рд╡реЛ callback execute рд╣реЛрддрд╛ рд╣реИред

тЬЕ Use point:
UI interaction рдХреЗ рдмрд╛рдж рдХреЛрдИ action perform рдХрд░рдирд╛ред

3. API Calls (fetch / XMLHttpRequest)

рдЬрдм data server рд╕реЗ рд▓рд╛рдирд╛ рд╣реЛ рдФрд░ рд╣рдореЗрдВ рддрдм рдХреБрдЫ рдХрд░рдирд╛ рд╣реИ рдЬрдм data рдЖ рдЬрд╛рдПред

function getUserData(callback) {
  console.log("ЁЯУб Fetching user data...");

  setTimeout(() => {
    let data = { name: "Sunil", age: 25 };
    console.log("тЬЕ Data received!");
    callback(data); // data рдЖрдиреЗ рдХреЗ рдмрд╛рдж callback call
  }, 2000);
}

getUserData(function(user) {
  console.log("ЁЯСд User Name:", user.name);
});


тЬЕ Use point:
Data рдЖрдиреЗ рдХреЗ рдмрд╛рдж UI update рдХрд░рдирд╛ рдпрд╛ рдЕрдЧрд▓рд╛ process рд╢реБрд░реВ рдХрд░рдирд╛ред

4. Animations рдпрд╛ Transitions рдХреЗ рдмрд╛рдж

рдЬрдм рдХреЛрдИ animation рдкреВрд░реА рд╣реЛ рдЬрд╛рдП, рддрдм рдЕрдЧрд▓рд╛ рдХрд╛рдо рдХрд░рдирд╛ рд╣реЛред

function animateBox(callback) {
  console.log("ЁЯОм Animation рд╢реБрд░реВ...");
  setTimeout(() => {
    console.log("тЬЕ Animation рдЦрддреНрдо!");
    callback(); // animation рдЦрддреНрдо рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж call
  }, 1000);
}

animateBox(() => console.log("ЁЯОЙ рдЕрдм рдЕрдЧрд▓реА animation рд╢реБрд░реВ рдХрд░реЛ!"));


тЬЕ Use point:
Multiple animations рдХреЛ sequence рдореЗрдВ рдЪрд▓рд╛рдиреЗ рдХреЗ рд▓рд┐рдПред

5. File Reading / Uploading

рдЬрдм file read рдпрд╛ upload complete рд╣реЛ рдЬрд╛рдПред

function uploadFile(callback) {
  console.log("ЁЯУд Uploading file...");
  setTimeout(() => {
    console.log("тЬЕ File Uploaded!");
    callback();
  }, 3000);
}

uploadFile(() => console.log("ЁЯУБ File successfully processed!"));


тЬЕ Use point:
File upload рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж notification рджрд┐рдЦрд╛рдирд╛ рдпрд╛ next API call рдХрд░рдирд╛ред

6. Database Operations (Node.js рдореЗрдВ)

рдЬрдм database query complete рд╣реЛ рдЬрд╛рдП рддрдм result process рдХрд░рдирд╛ред

db.query("SELECT * FROM users", function(err, result) {
  if (err) throw err;
  console.log("тЬЕ Data fetched:", result);
});


тЬЕ Use point:
Server-side code (Node.js) рдореЗрдВ database рд╕реЗ data рдЖрдиреЗ рдХреЗ рдмрд╛рдж рдЖрдЧреЗ рдХрд╛ рдХрд╛рдо рдХрд░рдирд╛ред

7. Image Loading

рдЬрдм image load рд╣реЛ рдЬрд╛рдП, рддрдм рдХреБрдЫ action рдХрд░рдирд╛ред

let img = new Image();
img.src = "photo.jpg";
img.onload = function() {
  console.log("ЁЯЦ╝я╕П Image loaded!");
};


тЬЕ Use point:
Image load рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж animation рдпрд╛ blur remove рдХрд░рдирд╛ред

8. Custom Asynchronous Tasks

рдЬрдм рдЖрдкрдХреЛ рдЦреБрдж рдХреЛрдИ asynchronous task рдмрдирд╛рдирд╛ рд╣реЛред

function doTask(callback) {
  console.log("ЁЯЫая╕П Task рд╢реБрд░реВ...");
  setTimeout(() => {
    console.log("тЬЕ Task complete!");
    callback();
  }, 2000);
}

doTask(() => console.log("ЁЯЪА Next step start!"));


тЬЕ Use point:
Custom operations (рдЬреИрд╕реЗ theme save, form validation, etc.) рдХреЗ рдмрд╛рдж рджреВрд╕рд░рд╛ function рдЪрд▓рд╛рдирд╛ред

9. Array Methods (forEach, map, filter)

рдЗрди methods рдореЗрдВ рднреА callback use рд╣реЛрддрд╛ рд╣реИред

let numbers = [1, 2, 3, 4];

numbers.forEach(function(num) {
  console.log(num * 2);
});


ЁЯСЙ рдпрд╣рд╛рдБ рдЬреЛ function рдкрд╛рд╕ рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИ, рд╡реЛ callback рд╣реИред

тЬЕ Use point:
рд╣рд░ item рдкрд░ рдХреБрдЫ logic apply рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

10. Theme Toggle Project рдореЗрдВ (рдЖрдкрдХреЗ рдХреЗрд╕ рдореЗрдВ)

рдЖрдкрдХрд╛ theme toggle project тАФ
рдЬрдм user тАЬdarkтАЭ рдпрд╛ тАЬlightтАЭ theme рдЪреБрдиреЗ, рддреЛ рдкрд╣рд▓реЗ theme apply рд╣реЛ
рдФрд░ рдЙрд╕рдХреЗ рдмрд╛рдж callback рд╕реЗ message show рд╣реЛред

function changeTheme(theme, callback) {
  document.body.className = theme;
  console.log(`ЁЯМЧ ${theme} theme applied!`);
  callback(); // theme apply рдХреЗ рдмрд╛рдж callback рдЪрд▓рд╛рдУ
}

changeTheme("dark", function() {
  console.log("ЁЯОЙ Theme changed successfully!");
});


тЬЕ Use point:
UI update рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж рдХреЛрдИ confirmation рдпрд╛ animation рджрд┐рдЦрд╛рдирд╛ред

ЁЯзй Summary Table (рдХрд╣рд╛рдБ рдФрд░ рдХреНрдпреЛрдВ Callback Use рдХрд░реЗрдВ)

| Category                 | Example                     | Callback рдХреНрдпреЛрдВ Use рдХрд░реЗрдВ              |
| ------------------------ | --------------------------- | ------------------------------------ |
| setTimeout / setInterval | Delay рдХреЗ рдмрд╛рдж function рдЪрд▓рд╛рдирд╛ | Task рдЦрддреНрдо рд╣реЛрдиреЗ рдкрд░ action             |
| Event Handling           | Click, hover events         | User interaction рдХреЗ рдмрд╛рдж рдХрд╛рдо          |
| API Calls                | fetch, axios                | Data рдЖрдиреЗ рдХреЗ рдмрд╛рдж process рдХрд░рдирд╛         |
| Animation                | Transition complete рд╣реЛрдиреЗ рдкрд░    | Sequence рдореЗрдВ animation рдЪрд▓рд╛рдирд╛         |
| File Upload              | Upload complete рд╣реЛрдиреЗ рдкрд░          | Success message рджрд┐рдЦрд╛рдирд╛               |
| Database Query           | Node.js рдореЗрдВ                            | Query complete рд╣реЛрдиреЗ рдкрд░ result рджрд┐рдЦрд╛рдирд╛ |
| Array Methods            | forEach, map, filter        | рд╣рд░ item рдкрд░ logic рдЪрд▓рд╛рдирд╛               |
| UI Tasks                 | Theme toggle, modal open    | Visual action рдХреЗ рдмрд╛рдж response рджреЗрдирд╛   |



рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рддреБрдореНрд╣рд╛рд░реЗ current theme toggle project рдореЗрдВ callback рдФрд░ promise рджреЛрдиреЛрдВ рдХрд╛ practical version code рдмрдирд╛ рд╕рдХрддрд╛ рд╣реВрдБ тАФ
рдЬрд┐рд╕рд╕реЗ рддреБрдо рджреЗрдЦ рд╕рдХреЛ рдХрд┐рд╕рдореЗрдВ рдХреНрдпрд╛ рдлрд░реНрдХ рд╣реИ рдФрд░ рдХрдм рдХреМрди рдмреЗрд╣рддрд░ рд╣реИред

рдХреНрдпрд╛ рдореИрдВ рд╡реЛ рдмрдирд╛ рджреВрдБ (callback + promise рджреЛрдиреЛрдВ version)?

You said:
sure
ChatGPT said:

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯФе
рдЪрд▓реЛ рдЕрдм рддреБрдореНрд╣рд╛рд░реЗ Theme Toggle Project (sun ЁЯМЮ / moon ЁЯМЩ) рдкрд░
Callback version рдФрд░ Promise version рджреЛрдиреЛрдВ practically implement рдХрд░рддреЗ рд╣реИрдВ тАФ
рддрд╛рдХрд┐ рддреБрдореНрд╣реЗрдВ рд╕рд╛рдлрд╝ рдкрддрд╛ рдЪрд▓реЗ рдХрд┐ рджреЛрдиреЛрдВ рдХрд╣рд╛рдБ рдХрд╛рдо рдЖрддреЗ рд╣реИрдВ рдФрд░ рдХреИрд╕реЗ рдлрд░реНрдХ рд╣реИ ЁЯСЗ

ЁЯзй 1я╕ПтГг Callback Version тАФ Simple Step-by-Step

ЁЯСЙ Concept:
рдЬрдм user theme рдмрджрд▓реЗ тЖТ
рдкрд╣рд▓реЗ theme apply рд╣реЛ тЖТ
рдлрд┐рд░ callback function success message рджрд┐рдЦрд╛рдПред

<!-- index.html -->
<div class="theme-toggle">
  <img id="light-icon" src="./images/sun.jpg" alt="Light Mode" width="50" height="50">
  <img id="dark-icon" src="./images/moon.jpg" alt="Dark Mode" width="50" height="50">
</div>

<script>
function applyTheme(theme, callback) {
  // Step 1: Theme change
  document.body.setAttribute("data-theme", theme);
  console.log(`ЁЯМЧ ${theme} theme applied`);

  // Step 2: Simulate async work (like saving user preference)
  setTimeout(() => {
    console.log("тЬЕ Theme saved in localStorage!");
    localStorage.setItem("theme", theme);
    callback(); // Step 3: Run callback
  }, 1000);
}

// Light mode button
document.getElementById("light-icon").addEventListener("click", () => {
  applyTheme("light", function() {
    console.log("ЁЯОЙ Light mode is active now!");
  });
});

// Dark mode button
document.getElementById("dark-icon").addEventListener("click", () => {
  applyTheme("dark", function() {
    console.log("ЁЯМЩ Dark mode is active now!");
  });
});
</script>

ЁЯза Explanation:

Callback рдпрд╣рд╛рдБ тАЬtheme apply рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж message рджрд┐рдЦрд╛рдиреЗтАЭ рдХрд╛ рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИред

рдЕрдЧрд░ рдмрд╛рдж рдореЗрдВ рдЖрдк рдЪрд╛рд╣реЛ рддреЛ рдЙрд╕реА callback рдореЗрдВ animation рдпрд╛ toast message рднреА рджрд┐рдЦрд╛ рд╕рдХрддреЗ рд╣реЛред

ЁЯзй 2я╕ПтГг Promise Version тАФ Modern & Cleaner Approach

ЁЯСЙ Concept:
Same рдХрд╛рдо, рд▓реЗрдХрд┐рди callback рдХреА рдЬрдЧрд╣ Promise return рдХрд░реЗрдВрдЧреЗ
рддрд╛рдХрд┐ .then() рдФрд░ .catch() рд╕реЗ рд╕рд╛рдлрд╝ code рд▓рд┐рдЦрд╛ рдЬрд╛ рд╕рдХреЗред

<!-- index.html -->
<div class="theme-toggle">
  <img id="light-icon" src="./images/sun.jpg" alt="Light Mode" width="50" height="50">
  <img id="dark-icon" src="./images/moon.jpg" alt="Dark Mode" width="50" height="50">
</div>

<script>
function applyThemePromise(theme) {
  console.log(`ЁЯМЧ ${theme} theme applying...`);

  return new Promise((resolve, reject) => {
    document.body.setAttribute("data-theme", theme);

    // Simulate async save
    setTimeout(() => {
      const success = true; // try changing to false to test reject
      if (success) {
        localStorage.setItem("theme", theme);
        resolve(`тЬЕ ${theme} theme applied successfully!`);
      } else {
        reject("тЭМ Failed to apply theme!");
      }
    }, 1000);
  });
}

document.getElementById("light-icon").addEventListener("click", () => {
  applyThemePromise("light")
    .then(message => console.log(message))
    .catch(error => console.error(error));
});

document.getElementById("dark-icon").addEventListener("click", () => {
  applyThemePromise("dark")
    .then(message => console.log(message))
    .catch(error => console.error(error));
});
</script>

ЁЯЖЪ Callback vs Promise (Quick Comparison in Project)


| Feature        | Callback Version         | Promise Version                 |
| -------------- | ------------------------ | ------------------------------- |
| Syntax         | Nested functions         | Clean `.then()` chaining        |
| Error Handling | Manual (inside callback) | `.catch()` рд╕реЗ рдЖрд╕рд╛рди              |
| Readability    | рдХрдо                       | рдЬрд╝реНрдпрд╛рджрд╛                         |
| Best For       | Small tasks              | Real projects / API calls       |
| Example        | Simple message рджрд┐рдЦрд╛рдирд╛    | API рд╕реЗ theme fetch рдпрд╛ save рдХрд░рдирд╛ |



тЬЕ Real-World Use (in Project)

| Scenario                           | Use Callback | Use Promise |
| ---------------------------------- | ------------ | ----------- |
| Theme change тЖТ success message     |   тЬЕ            | тЬЕ      |
| Theme change тЖТ server рд╕реЗ data рд▓рд╛рдирд╛   |   тЭМ            | тЬЕ      |
| Animation sequence                 |   тЬЕ            | тЭМ      |
| Multiple async tasks (API, DB)     |   тЭМ            | тЬЕ      |


рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдореИрдВ рдЗрд╕рдХрд╛ рддреАрд╕рд░рд╛ version рднреА рдмрдирд╛ рджреВрдБ тАФ
Async/Await version, рдЬреЛ Promises рдХреЛ рдФрд░ рднреА readable рдмрдирд╛ рджреЗрддрд╛ рд╣реИ (modern syntax рдореЗрдВ)ред
рдХреНрдпрд╛ рд╡реЛ рднреА рдмрдирд╛ рджреВрдБ?