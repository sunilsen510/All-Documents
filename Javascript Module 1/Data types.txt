Data Types explain in hindi with examples and why when and where and how to use it 


рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯСП
рдЕрдм рд╣рдо step-by-step рд╕реАрдЦреЗрдВрдЧреЗ тАФ

ЁЯза JavaScript Data Types (рдбреЗрдЯрд╛ рдЯрд╛рдЗрдкреНрд╕)

in Hindi with examples + why, when, where, how to use

ЁЯУШ 1. Data Type рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?

ЁЯСЙ Data Type рдХрд╛ рдорддрд▓рдм рд╣реИ тАФ
рдХрд┐рд╕реА variable рдореЗрдВ рдХреМрди-рд╕реА type рдХреА value store рдХреА рдЧрдИ рд╣реИред

рд╣рд░ value рдХрд╛ рдПрдХ тАЬtypeтАЭ рд╣реЛрддрд╛ рд╣реИ тАФ рдЬреИрд╕реЗ number, text, true/false, object, list рдЖрджрд┐ред

рдорддрд▓рдм:

Data Type рдпрд╣ рдмрддрд╛рддрд╛ рд╣реИ рдХрд┐ тАЬvalue рдХрд┐рд╕ рдкреНрд░рдХрд╛рд░ рдХреА рд╣реИ рдФрд░ рдЙрд╕ рдкрд░ рдХреМрди-рд╕реЗ operations рдХрд┐рдП рдЬрд╛ рд╕рдХрддреЗ рд╣реИрдВредтАЭ

ЁЯТб 2. рдХреНрдпреЛрдВ рдЬрд╝рд░реВрд░реА рд╣реИ (Why use Data Types)?

рдХреНрдпреЛрдВрдХрд┐ JavaScript рдХреЛ рдпрд╣ рдЬрд╛рдирдирд╛ рдЬрд░реВрд░реА рд╣реИ рдХрд┐ value рдХреЗ рд╕рд╛рде рдХреИрд╕реЗ behave рдХрд░рдирд╛ рд╣реИ:

| Reason               | Example               |
| ------------------   | --------------------- |
| тЬЕ Calculation рдХрд░рдирд╛  | Numbers рдЪрд╛рд╣рд┐рдП         |
| тЬЕ Text рджрд┐рдЦрд╛рдирд╛          | String рдЪрд╛рд╣рд┐рдП          |
| тЬЕ Decision рд▓реЗрдирд╛        | Boolean рдЪрд╛рд╣рд┐рдП         |
| тЬЕ Data Store рдХрд░рдирд╛    | Object рдпрд╛ Array рдЪрд╛рд╣рд┐рдП |


ЁЯУН 3. рдХрд╣рд╛рдБ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХрд░рддреЗ рд╣реИрдВ (Where)?

рдЬрдм рдЖрдк values store рдХрд░рддреЗ рд╣реЛ variables рдореЗрдВ

рдЬрдм functions, APIs, рдпрд╛ user input handle рдХрд░рддреЗ рд╣реЛ

рдЬрдм рдЖрдкрдХреЛ decide рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ рдХрд┐ рдХреМрди-рд╕рд╛ data рдХреИрд╕реЗ behave рдХрд░реЗрдЧрд╛

тЪЩя╕П 4. JavaScript рдореЗрдВ рджреЛ Category рд╣реЛрддреА рд╣реИрдВ:

| Category                            | Types                                                    |
| ----------------------------------- | -------------------------------------------------------- |
| **Primitive Types**                 | String, Number, Boolean, Null, Undefined, Symbol, BigInt |
| **Non-Primitive (Reference Types)** | Object, Array, Function                                  |


ЁЯзй 5. Primitive Data Types (Basics)
ЁЯЯв (A) String (Text)

Text рдпрд╛ characters store рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

let name = "Sunil";
let city = 'Delhi';
let message = `Hello ${name}`;


тЬЕ String рд╣рдореЗрд╢рд╛ quotes рдореЗрдВ рд╣реЛрддреА рд╣реИ ' ', " ", рдпрд╛ ` `

ЁЯУШ Use: рдЬрдм рдЖрдкрдХреЛ text рджрд┐рдЦрд╛рдирд╛ рд╣реЛ, messages рдпрд╛ user names handle рдХрд░рдиреЗ рд╣реЛрдВред

ЁЯФ╡ (B) Number

Numeric values (integer рдпрд╛ decimal) store рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

let age = 25;
let price = 99.99;
let temperature = -5;


тЬЕ Numbers рдкрд░ рдЖрдк +, -, *, / рдЬреИрд╕реЗ operations рдХрд░ рд╕рдХрддреЗ рд╣реЛред

ЁЯУШ Use: рдЬрдм calculation, math, рдпрд╛ counting рдХрд░рдиреА рд╣реЛред

ЁЯЯб (C) Boolean

True рдпрд╛ False value рд░рдЦрддрд╛ рд╣реИ (logical decision рдХреЗ рд▓рд┐рдП)ред

let isLoggedIn = true;
let isPaid = false;


ЁЯУШ Use: рдЬрдм рдЖрдкрдХреЛ condition check рдХрд░рдиреА рд╣реЛ
(рдЬреИрд╕реЗ login status, switch ON/OFF, etc.)

тЪк (D) Undefined

рдЬрдм variable declare рдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реЛ рд▓реЗрдХрд┐рди value assign рдирд╣реАрдВ рдХреА рдЧрдИред

let data;
console.log(data); // undefined


ЁЯУШ Use: рдЬрдм value рдЕрднреА рдЖрдиреЗ рд╡рд╛рд▓реА рд╣реЛ рдпрд╛ API рд╕реЗ load рд╣реЛрдиреА рд╣реЛред

тЪл (E) Null

рдЬрдм рдЖрдк рдЬрд╛рдирдмреВрдЭрдХрд░ variable рдХреЛ empty рд░рдЦрдирд╛ рдЪрд╛рд╣реЛред

let user = null; // рдЕрднреА рдХреЛрдИ user рдирд╣реАрдВ рд╣реИ


ЁЯУШ Use: рдЬрдм value future рдореЗрдВ assign рд╣реЛрдиреА рд╣реИред

ЁЯЯг (F) Symbol (ES6)

Unique identity рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП (Advanced use)

let id = Symbol("userID");


ЁЯУШ Use: рдЬрдм рдЖрдкрдХреЛ unique key рдЪрд╛рд╣рд┐рдП object рдореЗрдВ (mostly frameworks рдореЗрдВ)

ЁЯФ┤ (G) BigInt (ES2020)

рдмрд╣реБрдд рдмрдбрд╝реЗ numbers store рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП (рдЬреЛ normal Number рд╕реЗ рдмрд╛рд╣рд░ рд╣реЛрдВ)

let bigNumber = 123456789012345678901234567890n;


ЁЯУШ Use: рдЬрдм рдмрд╣реБрдд рдмрдбрд╝реЗ integers handle рдХрд░рдиреЗ рд╣реЛрдВ (like crypto, finance apps)

ЁЯз▒ 6. Non-Primitive Data Types
ЁЯФ╢ (A) Object

Key-value pairs рдореЗрдВ data store рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

let user = {
  name: "Ravi",
  age: 22,
  city: "Mumbai"
};


ЁЯУШ Use: рдЬрдм рдПрдХ рд╣реА entity рд╕реЗ рдЬреБрдбрд╝реА multiple information рд░рдЦрдиреА рд╣реЛред

ЁЯФ╖ (B) Array

Multiple values рдПрдХ list рдореЗрдВ store рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдПред

let fruits = ["Apple", "Banana", "Mango"];


ЁЯУШ Use: рдЬрдм similar values рдХреА list рд╣реЛ (items, IDs, etc.)

ЁЯЯй (C) Function

Reusable code block рдЬреЛ рдХреБрдЫ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИред

function greet() {
  console.log("Hello World!");
}
greet();


ЁЯУШ Use: рдЬрдм рдХреЛрдИ рдХрд╛рдо рдмрд╛рд░-рдмрд╛рд░ рдХрд░рдирд╛ рд╣реЛ (reusable logic)

ЁЯзо 7. typeof Operator

рдХрд┐рд╕реА value рдХрд╛ data type check рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:

let name = "Sunil";
console.log(typeof name); // string

let age = 25;
console.log(typeof age);  // number

let isAdmin = true;
console.log(typeof isAdmin); // boolean

ЁЯза 8. Example тАФ All Data Types in One Code
const name = "Sunil";       // string
const age = 24;             // number
const isStudent = true;     // boolean
let address;                // undefined
let score = null;           // null
const user = { id: 1, name: "Ravi" };  // object
const colors = ["red", "blue", "green"]; // array

ЁЯзй 9. Practical Real-Life Example
const user = {
  name: "Rakesh",
  age: 25,
  isAdmin: true,
  hobbies: ["Reading", "Coding", "Cricket"],
  address: { city: "Delhi", pin: 110001 }
};

console.log(`User: ${user.name}, City: ${user.address.city}`);


ЁЯЯв Output:

User: Rakesh, City: Delhi

ЁЯз╛ 10. Summary Table

| Type      | Example         | When to Use            |
| --------- | --------------- | ---------------------- |
| String    | `"Sunil"`       | Text рдпрд╛ message рдХреЗ рд▓рд┐рдП |
| Number    | `10`, `45.5`    | Calculation рдХреЗ рд▓рд┐рдП     |
| Boolean   | `true`, `false` | Condition рдХреЗ рд▓рд┐рдП       |
| Undefined | `let x;`        | Value рдЕрднреА рдирд╣реАрдВ рдорд┐рд▓реА    |
| Null      | `let x = null;` | Empty intentionally    |
| Object    | `{name:"Ravi"}` | Structured data        |
| Array     | `[1,2,3]`       | List data              |
| Function  | `function(){}`  | Reusable logic         |
| BigInt    | `123456789n`    | Large numbers          |
| Symbol    | `Symbol("id")`  | Unique key             |

ЁЯза 11. рдХреИрд╕реЗ Use рдХрд░реЗрдВ (How to Use)

рдкрд╣рд▓реЗ decide рдХрд░реЛ рдХрд┐ value text рд╣реИ рдпрд╛ number рдпрд╛ logical flagред

рдЙрд╕реА рдХреЗ рд╣рд┐рд╕рд╛рдм рд╕реЗ data type рдЪреБрдиреЛред

рд╣рдореЗрд╢рд╛ const рдпрд╛ let рд╕реЗ declare рдХрд░реЛред

Debug рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП typeof рд╕реЗ type check рдХрд░реЛред

ЁЯзн 12. Example: When to Use Which

| Situation            | Data Type | Example                           |
| -------------------- | --------- | --------------------------------- |
| User Name            | String    | `"Sunil"`                         |
| Age                  | Number    | `25`                              |
| Login Status         | Boolean   | `true`                            |
| Cart Items           | Array     | `["Shoes", "Watch"]`              |
| User Details         | Object    | `{name: "Sunil", city: "Bhopal"}` |
| API Response Pending | Null      | `null`                            |


рдЕрдЧрд░ рддреБрдо рдЪрд╛рд╣реЛ рддреЛ рдЕрдЧрд▓рд╛ topic рдореИрдВ рддреБрдореНрд╣реЗрдВ рд╕рдордЭрд╛рдКрдБ ЁЯСЗ
ЁЯТе тАЬType Conversion & Type CastingтАЭ тАФ
рдпрд╛рдирд┐ string тЖТ number, number тЖТ boolean practically рдХреИрд╕реЗ рдмрджрд▓рддреЗ рд╣реИрдВ
рдФрд░ рдХрд╣рд╛рдБ рдЬрд╝рд░реВрд░реА рд╣реЛрддрд╛ рд╣реИ?

рдХреНрдпрд╛ рдмрддрд╛рдКрдБ рд╡реЛ рдЕрдЧрд▓рд╛?


рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯСП рдЪрд▓рд┐рдП рдЕрдм рд╕реАрдЦрддреЗ рд╣реИрдВ тАФ

ЁЯза JavaScript Type Conversion & Type Casting

(рдЗрди рд╣рд┐рдиреНрджреА рдореЗрдВ рд╕рдордЭреЛ тАУ рдХреНрдпреЛрдВ, рдХрдм, рдХрд╣рд╛рдБ, рдФрд░ рдХреИрд╕реЗ use рдХрд░рддреЗ рд╣реИрдВ)

ЁЯФ╣ 1. Type Conversion / Type Casting рдХреНрдпрд╛ рд╣реИ?

ЁЯСЙ Type Conversion (Type Casting) рдХрд╛ рдорддрд▓рдм рд╣реИ тАФ
рдХрд┐рд╕реА value рдХреЗ data type рдХреЛ рдПрдХ type рд╕реЗ рджреВрд╕рд░реЗ type рдореЗрдВ рдмрджрд▓рдирд╛ред

рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП:

"25" (string) тЮЭ 25 (number)

1 тЮЭ true

false тЮЭ "false"

ЁЯФ╕ 2. Type Conversion рдХреЗ рджреЛ рдкреНрд░рдХрд╛рд░ рд╣реЛрддреЗ рд╣реИрдВ

| рдкреНрд░рдХрд╛рд░                  | рдорддрд▓рдм                                                 |
| ----------------------- | ---------------------------------------------------- |
| **Implicit Conversion** | рдЬрдм JavaScript рдЦреБрдж type рдмрджрд▓ рджреЗрддреА рд╣реИ (auto conversion) |
| **Explicit Conversion** | рдЬрдм рдЖрдк рдЦреБрдж type рдмрджрд▓рддреЗ рд╣реЛ (manual conversion)          |

ЁЯзй 3. Implicit Conversion (Automatic)

JavaScript рдЬрдм expression рдореЗрдВ рдЕрд▓рдЧ-рдЕрд▓рдЧ type рдорд┐рд▓рддреЗ рд╣реИрдВ,
рддреЛ рдЦреБрдж рд╣реА type рдмрджрд▓ рджреЗрддреА рд╣реИред

ЁЯФ╣ Example 1:
let result = "5" + 10;
console.log(result); // "510"


тЮбя╕П JS рдиреЗ number 10 рдХреЛ string "10" рдореЗрдВ рдмрджрд▓ рджрд┐рдпрд╛ред
рдХреНрдпреЛрдВрдХрд┐ тАЬ+тАЭ operator string рдХреЗ рд╕рд╛рде concatenate рдХрд░рддрд╛ рд╣реИред

ЁЯФ╣ Example 2:
let result = "5" - 2;
console.log(result); // 3


тЮбя╕П JS рдиреЗ "5" рдХреЛ number рдореЗрдВ рдмрджрд▓рдХрд░ calculation рдХрд┐рдпрд╛ред

ЁЯФ╣ Example 3:
console.log("10" * "2"); // 20
console.log("10" / "2"); // 5


тЮбя╕П Multiplication рдФрд░ division рдореЗрдВ рд╣рдореЗрд╢рд╛ number conversion рд╣реЛрддрд╛ рд╣реИред

ЁЯза 4. Explicit Conversion (Manual Conversion)

рдЖрдк рдЦреБрдж type рдмрджрд▓рддреЗ рд╣реЛ тАФ
рдЗрд╕рдХреЗ рд▓рд┐рдП built-in functions рд╣реЛрддреЗ рд╣реИрдВ:

| Convert To | Method      |
| ---------- | ----------- |
| Number     | `Number()`  |
| String     | `String()`  |
| Boolean    | `Boolean()` |

ЁЯФ╣ (A) String тЖТ Number
let num = Number("123");
console.log(num); // 123
console.log(typeof num); // number


ЁЯУШ Use: рдЬрдм user input string рдореЗрдВ рдЖрддрд╛ рд╣реИ, рдФрд░ рдЖрдкрдХреЛ calculation рдХрд░рдиреА рд╣реИред

ЁЯСЙ Example:

let a = prompt("Enter first number:");
let b = prompt("Enter second number:");
let sum = Number(a) + Number(b);
console.log(sum);

ЁЯФ╣ (B) Number тЖТ String
let str = String(123);
console.log(str); // "123"
console.log(typeof str); // string


ЁЯУШ Use: рдЬрдм рдЖрдкрдХреЛ text рдореЗрдВ рджрд┐рдЦрд╛рдирд╛ рд╣реЛ (UI рдпрд╛ message рдореЗрдВ)ред

ЁЯФ╣ (C) Boolean тЖТ Number
console.log(Number(true));  // 1
console.log(Number(false)); // 0


ЁЯУШ Use: рдЬрдм true/false рдХреЛ binary рдпрд╛ logic рдореЗрдВ use рдХрд░рдирд╛ рд╣реЛред

ЁЯФ╣ (D) Number тЖТ Boolean
console.log(Boolean(1)); // true
console.log(Boolean(0)); // false


ЁЯУШ Use: рдЬрдм number рдХреЛ condition рдореЗрдВ check рдХрд░рдирд╛ рд╣реЛред

ЁЯФ╣ (E) String тЖТ Boolean
console.log(Boolean("Hello")); // true
console.log(Boolean(""));      // false


ЁЯУШ Rule:

Non-empty string тЖТ true

Empty string тЖТ false

тЪЩя╕П 5. Truthy рдФрд░ Falsy Values

JavaScript рдореЗрдВ рд╣рд░ value Boolean рдореЗрдВ рдмрджрд▓ рд╕рдХрддреА рд╣реИред
рдХреБрдЫ values Falsy рд╣реЛрддреА рд╣реИрдВ (рдЬреЛ false рдорд╛рдиреА рдЬрд╛рддреА рд╣реИрдВ):

| Falsy Values        |
| ------------------- |
| `0`                 |
| `""` (empty string) |
| `null`              |
| `undefined`         |
| `NaN`               |
| `false`             |

рдмрд╛рдХреА рд╕рдм values Truthy рд╣реЛрддреА рд╣реИрдВ (true рдорд╛рдиреА рдЬрд╛рддреА рд╣реИрдВ)ред

ЁЯФ╣ Example:
if ("Hello") {
  console.log("This is True");
}

if (0) {
  console.log("This will never print");
}

ЁЯФв 6. parseInt() & parseFloat()

рдХрднреА-рдХрднреА string рдореЗрдВ number mixed рд╣реЛрддрд╛ рд╣реИ (рдЬреИрд╕реЗ "123px"),
рддреЛ Number() рдХрд╛рдо рдирд╣реАрдВ рдХрд░реЗрдЧрд╛, рддрдм рд╣рдо parseInt() рдпрд╛ parseFloat() use рдХрд░рддреЗ рд╣реИрдВред

console.log(parseInt("123px"));   // 123
console.log(parseFloat("12.34kg")); // 12.34

ЁЯТб 7. Real-Life Example

ЁЯСЙ Suppose user рдиреЗ form рдореЗрдВ number input рдХрд┐рдпрд╛ рд▓реЗрдХрд┐рди string рдореЗрдВ рдЖрдпрд╛:

let price = "500";
let quantity = "3";

let total = Number(price) * Number(quantity);
console.log("Total Price:", total);


ЁЯЯв Output:

Total Price: 1500

ЁЯз╛ 8. Summary Table

| Conversion            | Function           | Example  | Result  |
| --------------------- | ------------------ | -------- | ------- |
| String тЖТ Number       | `Number("25")`     | `"25"`   | `25`    |
| Number тЖТ String       | `String(25)`       | `25`     | `"25"`  |
| Boolean тЖТ Number      | `Number(true)`     | `true`   | `1`     |
| Number тЖТ Boolean      | `Boolean(0)`       | `0`      | `false` |
| String тЖТ Boolean      | `Boolean("Hi")`    | `"Hi"`   | `true`  |
| Mixed String тЖТ Number | `parseInt("50px")` | `"50px"` | `50`    |

ЁЯза 9. рдХрдм Use рдХрд░реЗрдВ (When to Use)

| Situation                 | Conversion Needed      | Example                      |
| ------------------------- | ---------------------- | ---------------------------- |
| User input string рдореЗрдВ рдЖрдпрд╛ | String тЖТ Number        | `Number("10")`               |
| UI рдореЗрдВ show рдХрд░рдирд╛          | Number тЖТ String        | `String(100)`                |
| Condition check рдХрд░рдирд╛      | Value тЖТ Boolean        | `Boolean(value)`             |
| API рд╕реЗ mixed data рдорд┐рд▓рд╛    | Manual clean & convert | `parseInt()`, `parseFloat()` |

ЁЯЪА 10. Practical Project Example
let userInput = prompt("Enter your age:");

if (Number(userInput) >= 18) {
  console.log("You are eligible to vote тЬЕ");
} else {
  console.log("You are not eligible тЭМ");
}
