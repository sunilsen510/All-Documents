рдмрд┐рд▓рдХреБрд▓ ЁЯФе рдЪрд▓рд┐рдП Promises in JavaScript рдХреЛ step by step Hindi рдореЗрдВ рдЕрдЪреНрдЫреЗ рд╕реЗ рд╕рдордЭрддреЗ рд╣реИрдВ тАФ
рд╕рд╛рде рдореЗрдВ examples, use-cases рдФрд░ рдЖрдкрдХреЗ project рдореЗрдВ рдЗрд╕реЗ implement рдХрд░рдиреЗ рдХрд╛ рддрд░реАрдХрд╛ рднреА рдорд┐рд▓реЗрдЧрд╛ ЁЯСЗ

ЁЯза Promise рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ?

JavaScript рдореЗрдВ Promise рдПрдХ рдРрд╕рд╛ object рд╣реЛрддрд╛ рд╣реИ рдЬреЛ future рдореЗрдВ рдХрд┐рд╕реА asynchronous рдХрд╛рдо рдХреЗ complete рд╣реЛрдиреЗ рдпрд╛ fail рд╣реЛрдиреЗ рдХрд╛ result рдмрддрд╛рддрд╛ рд╣реИред

ЁЯСЙ рдЖрд╕рд╛рди рд╢рдмреНрджреЛрдВ рдореЗрдВ тАФ
"Promise рдХрд╣рддрд╛ рд╣реИ рдХрд┐ рдореИрдВ рддреБрдореНрд╣рд╛рд░рд╛ рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реВрдБ (рдЬреИрд╕реЗ server рд╕реЗ data рд▓рд╛рдирд╛), рдереЛрдбрд╝рд╛ time рд▓рдЧреЗрдЧрд╛,
рдХрд╛рдо рд╣реЛ рдЬрд╛рдиреЗ рдХреЗ рдмрд╛рдж рдореИрдВ рдмрддрд╛рдКрдБрдЧрд╛ рдХрд┐ success рд╣реБрдЖ рдпрд╛ error рдЖрдпрд╛ред"

тЪЩя╕П Asynchronous рдорддрд▓рдм рдХреНрдпрд╛?

Asynchronous рдХрд╛ рдорддрд▓рдм рд╣реИ тАФ
рдХрд╛рдо background рдореЗрдВ рдЪрд▓рддрд╛ рд╣реИ, рдФрд░ JavaScript рдмрд╛рдХреА рдХреЛрдб рдХреЛ block рдирд╣реАрдВ рдХрд░рддреАред

рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП:

API рд╕реЗ data рд▓рд╛рдирд╛

Files рдкрдврд╝рдирд╛

Server рд╕реЗ request рднреЗрдЬрдирд╛

рдпреЗ рд╕рд╛рд░реЗ рдХрд╛рдо time рд▓реЗрддреЗ рд╣реИрдВ, рдЗрд╕рд▓рд┐рдП рдЗрдиреНрд╣реЗрдВ promises рдХреЗ рдЬрд╝рд░рд┐рдП handle рдХрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред

ЁЯТб Promise рдХреНрдпреЛрдВ use рдХрд░рддреЗ рд╣реИрдВ?

Callback Hell рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд▓рд┐рдП
рдкрд╣рд▓реЗ asynchronous code рд▓рд┐рдЦрдиреЗ рдХреЗ рд▓рд┐рдП callback function use рдХрд░рддреЗ рдереЗ, рдЬреЛ nested рд╣реЛ рдЬрд╛рддрд╛ рдерд╛:

getData(function(data){
  processData(data, function(result){
    showResult(result);
  });
});


рдпреЗ рдмрд╣реБрдд messy рд╣реЛрддрд╛ рдерд╛ред

Promises code рдХреЛ clean, readable рдФрд░ manageable рдмрдирд╛рддреЗ рд╣реИрдВред

Error handling рдЖрд╕рд╛рди рд╣реЛ рдЬрд╛рддреА рд╣реИ (.catch() method рд╕реЗ)ред

тП░ Promise рдХрдм рдФрд░ рдХрд╣рд╛рдБ use рд╣реЛрддрд╛ рд╣реИ?

рдЬрдм рднреА рдХреЛрдИ task рддреБрд░рдВрдд result рдирд╣реАрдВ рджреЗрддрд╛ (рдереЛрдбрд╝рд╛ wait рдХрд░рдирд╛ рдкрдбрд╝рддрд╛ рд╣реИ), рд╡рд╣рд╛рдБ promise use рд╣реЛрддрд╛ рд╣реИ:

Server/API рд╕реЗ data fetch рдХрд░рдиреЗ рдореЗрдВ

File upload/download рдореЗрдВ

Animation рдпрд╛ timer рдореЗрдВ

User input рдпрд╛ async calculation рдореЗрдВ

ЁЯзй Promise рдХрд╛ Structure
let promise = new Promise((resolve, reject) => {
  // рдХреЛрдИ async рдХрд╛рдо
  let success = true;

  if (success) {
    resolve("рдХрд╛рдо рд╕рдлрд▓ рд╣реБрдЖ!");
  } else {
    reject("рдХреБрдЫ рдЧрд▓рддреА рд╣реЛ рдЧрдИ!");
  }
});

рдЕрдм рдЗрд╕ promise рдХреЛ handle рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП:
promise
  .then((result) => console.log("тЬЕ Success:", result))
  .catch((error) => console.log("тЭМ Error:", error))
  .finally(() => console.log("ЁЯОп Promise рдкреВрд░рд╛ рд╣реБрдЖ"));

ЁЯзк Example 1 тАФ Basic Promise
let dataPromise = new Promise((resolve, reject) => {
  setTimeout(() => {
    let data = { name: "Sunil", age: 25 };
    if (data) resolve(data);
    else reject("Data рдирд╣реАрдВ рдорд┐рд▓рд╛!");
  }, 2000);
});

console.log("тП│ Data loading...");

dataPromise
  .then((result) => console.log("тЬЕ Data:", result))
  .catch((err) => console.log("тЭМ Error:", err))
  .finally(() => console.log("ЁЯОп Operation complete"));


Output:

тП│ Data loading...
тЬЕ Data: { name: "Sunil", age: 25 }
ЁЯОп Operation complete

ЁЯМР Example 2 тАФ Real Use (API рд╕реЗ Data Fetch рдХрд░рдирд╛)
fetch("https://jsonplaceholder.typicode.com/posts")
  .then((response) => response.json()) // response рдХреЛ JSON рдореЗрдВ рдмрджрд▓рд╛
  .then((data) => console.log("ЁЯУж Data:", data))
  .catch((error) => console.log("тЭМ Error:", error));


рдпрд╣рд╛рдБ fetch() рдЦреБрдж рдПрдХ Promise return рдХрд░рддрд╛ рд╣реИред

тЪЩя╕П Promise рдХреЗ 3 States

Pending тЖТ Promise рдЕрднреА рдЪрд▓ рд░рд╣рд╛ рд╣реИ

Resolved (Fulfilled) тЖТ рдХрд╛рдо рдкреВрд░рд╛ рд╣реЛ рдЧрдпрд╛

Rejected тЖТ Error рдпрд╛ failure рдЖрдпрд╛

рдПрдХ рдмрд╛рд░ resolve рдпрд╛ reject рд╣реЛрдиреЗ рдХреЗ рдмрд╛рдж Promise рдХреА state рджреЛрдмрд╛рд░рд╛ рдирд╣реАрдВ рдмрджрд▓рддреАред

ЁЯзн Async / Await (Promises рдХрд╛ Modern рддрд░реАрдХрд╛)

async/await Promises рдХреЛ рдФрд░ рднреА readable рдмрдирд╛рддрд╛ рд╣реИ:

async function getData() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/posts");
    const data = await response.json();
    console.log("тЬЕ Data loaded:", data);
  } catch (error) {
    console.log("тЭМ Error:", error);
  }
}

getData();

ЁЯЪА рдЕрдкрдиреЗ Project рдореЗрдВ Promise рдХреИрд╕реЗ Use рдХрд░реЗрдВ?

рдЖрдкрдХреЗ project рдореЗрдВ (рдЬреИрд╕реЗ рдЖрдкрдиреЗ theme toggle рдмрдирд╛рдпрд╛ рд╣реИ), рдЖрдк Promise рдХреЛ use рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:

ЁЯФ╕ Example: Theme Save Simulation (Promise рдХреЗ рд╕рд╛рде)
function saveThemePreference(theme) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (theme) {
        resolve(`Theme '${theme}' рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрд╡ рд╣реЛ рдЧрдИ!`);
      } else {
        reject("тЭМ Theme select рдирд╣реАрдВ рдХреА рдЧрдИ!");
      }
    }, 1500);
  });
}

// рдЬрдм user theme toggle рдХрд░реЗ:
const currentTheme = "dark"; // рдорд╛рди рд▓реЛ user рдиреЗ dark select рдХрд┐рдпрд╛

console.log("тП│ Theme save рд╣реЛ рд░рд╣реА рд╣реИ...");

saveThemePreference(currentTheme)
  .then((msg) => console.log(msg))
  .catch((err) => console.log(err))
  .finally(() => console.log("ЁЯОп Save process complete"));

ЁЯФ╣ Promise рдХрд╣рд╛рдБ Implement рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ?

рдЖрдкрдХреЗ project рдореЗрдВ рдЖрдк Promises рдХрд╛ use рдЗрди рдЬрдЧрд╣реЛрдВ рдкрд░ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВ:

рдХрд╛рдо	Promise рдХрд╣рд╛рдБ рдХрд╛рдо рдЖрдПрдЧрд╛
| рдХрд╛рдо             | Promise рдХрд╣рд╛рдБ рдХрд╛рдо рдЖрдПрдЧрд╛                       |
| --------------- | ------------------------------------------- |
| Theme toggle    | User рдХреА choice рдХреЛ async рддрд░реАрдХреЗ рд╕реЗ save рдХрд░рдирд╛  |
| Image loading   | Page рдкрд░ images load рд╣реЛрдиреЗ рдХрд╛ wait рдХрд░рдирд╛       |
| API call        | Data рд▓рд╛рдиреЗ рдпрд╛ рднреЗрдЬрдиреЗ рдореЗрдВ                      |
| Animation delay | рдХрд┐рд╕реА action рдХреЗ рдмрд╛рдж delay рджреЗрдирд╛               |
| Form submit     | Server рдХреЛ data рднреЗрдЬрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ loading рджрд┐рдЦрд╛рдирд╛ |

рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдореИрдВ рдЖрдкрдХреЗ current project (theme toggle рд╡рд╛рд▓рд╛) рдореЗрдВ
Promise рдЬреЛрдбрд╝рдХрд░ рдПрдХ loading animation + save confirmation рд╡рд╛рд▓рд╛ real example рдмрдирд╛ рджреВрдБ?
рддрд╛рдХрд┐ рдЖрдк practically рджреЗрдЦ рд╕рдХреЗрдВ рдХреИрд╕реЗ implement рдХрд░рдирд╛ рд╣реИ?

You said:
mujhe aur example se samjhao ise 


рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯСН рдЪрд▓рд┐рдП рдЕрдм Promises рдХреЛ рдФрд░ рдЧрд╣рд░рд╛рдИ рд╕реЗ рд╕рдордЭрддреЗ рд╣реИрдВ тАФ
рдЗрд╕ рдмрд╛рд░ рдореИрдВ рдЖрдкрдХреЛ 5 real-world practical examples рджреВрдБрдЧрд╛ рддрд╛рдХрд┐ concept рдкреВрд░реА рддрд░рд╣ clear рд╣реЛ рдЬрд╛рдП рдФрд░ рдЖрдк рдЕрдкрдиреЗ project рдореЗрдВ confidently use рдХрд░ рд╕рдХреЛред

ЁЯМ▒ Example 1: Simple Promise (Success & Fail рджреЛрдиреЛрдВ)
let myPromise = new Promise((resolve, reject) => {
  let isSuccess = true; // рдЗрд╕реЗ false рдХрд░реЛ рдФрд░ рджреЗрдЦреЛ рдХреНрдпрд╛ рд╣реЛрддрд╛ рд╣реИ

  if (isSuccess) {
    resolve("ЁЯОЙ Promise рдкреВрд░рд╛ рд╣реБрдЖ тАФ рд╕рдм рдареАрдХ рдЪрд▓рд╛!");
  } else {
    reject("тЭМ Promise fail рд╣реЛ рдЧрдпрд╛ тАФ рдХреБрдЫ рдЧрдбрд╝рдмрдбрд╝ рд╣реИ!");
  }
});

myPromise
  .then((message) => console.log(message))
  .catch((error) => console.log(error));

ЁЯСЙ Explanation:

рдЕрдЧрд░ isSuccess = true рд╣реИ тЖТ resolve() рдЪрд▓реЗрдЧрд╛ тЖТ .then() рд╡рд╛рд▓рд╛ code run рд╣реЛрдЧрд╛

рдЕрдЧрд░ isSuccess = false рд╣реИ тЖТ reject() рдЪрд▓реЗрдЧрд╛ тЖТ .catch() рд╡рд╛рд▓рд╛ code run рд╣реЛрдЧрд╛

тП│ Example 2: Delayed Task (Async Simulation)
let loadingData = new Promise((resolve, reject) => {
  console.log("ЁЯУж Data рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...");

  setTimeout(() => {
    let success = true;
    if (success) {
      resolve("тЬЕ Data рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛!");
    } else {
      reject("тЭМ Data рд▓реЛрдб рдирд╣реАрдВ рд╣реЛ рд╕рдХрд╛!");
    }
  }, 2000);
});

loadingData
  .then((msg) => console.log(msg))
  .catch((err) => console.log(err))
  .finally(() => console.log("ЁЯОп Loading process complete"));

ЁЯСЙ Output:
ЁЯУж Data рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...
тЬЕ Data рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд▓реЛрдб рд╣реЛ рдЧрдпрд╛!
ЁЯОп Loading process complete


рдпрд╣рд╛рдБ рд╣рдордиреЗ setTimeout() рдХрд╛ use рдХрд░рдХреЗ asynchronous delay simulate рдХрд┐рдпрд╛ рд╣реИред

ЁЯТ╗ Example 3: User Login Simulation (Real-Life Logic)
function userLogin(username, password) {
  return new Promise((resolve, reject) => {
    console.log("ЁЯФР Login рд╣реЛ рд░рд╣рд╛ рд╣реИ...");

    setTimeout(() => {
      if (username === "sunil" && password === "12345") {
        resolve("тЬЕ Login successful!");
      } else {
        reject("тЭМ Invalid username or password!");
      }
    }, 1500);
  });
}

// Call the function
userLogin("sunil", "12345")
  .then((msg) => console.log(msg))
  .catch((err) => console.log(err));

ЁЯСЙ Use Case:

рдЖрдкрдХреЗ project рдореЗрдВ рдЬрдм user login рдХрд░реЗ, рддреЛ рдЖрдк backend рд╕реЗ data fetch рд╣реЛрдиреЗ рддрдХ loading рджрд┐рдЦрд╛ рд╕рдХрддреЗ рд╣реИрдВ,
рдФрд░ рдлрд┐рд░ promise resolve рд╣реЛрдиреЗ рдкрд░ message рджрд┐рдЦрд╛ рд╕рдХрддреЗ рд╣реИрдВред

ЁЯза Example 4: Multiple Promises (Chaining)

рдХрдИ рдмрд╛рд░ рд╣рдореЗрдВ рдПрдХ рдХрд╛рдо рдХреЗ рдмрд╛рдж рджреВрд╕рд░рд╛ рдХрд╛рдо рдХрд░рдирд╛ рд╣реЛрддрд╛ рд╣реИ тАФ
рдЙрджрд╛рд╣рд░рдг рдХреЗ рд▓рд┐рдП:
1я╕ПтГг User login рдХрд░реЗ
2я╕ПтГг рдлрд┐рд░ user data рд▓рд╛рдпрд╛ рдЬрд╛рдП
3я╕ПтГг рдлрд┐рд░ profile рджрд┐рдЦреЗ

function loginUser() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("тЬЕ User logged in");
    }, 1000);
  });
}

function fetchUserData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("ЁЯУж User data fetched");
    }, 1500);
  });
}

function showDashboard() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("ЁЯПа Dashboard displayed");
    }, 1000);
  });
}

// Chaining
loginUser()
  .then((msg) => {
    console.log(msg);
    return fetchUserData();
  })
  .then((msg) => {
    console.log(msg);
    return showDashboard();
  })
  .then((msg) => console.log(msg))
  .finally(() => console.log("ЁЯОп All tasks done!"));

ЁЯСЙ Output:
тЬЕ User logged in
ЁЯУж User data fetched
ЁЯПа Dashboard displayed
ЁЯОп All tasks done!

тЪЩя╕П Example 5: Promise + Async/Await (Modern Syntax)

Async/await syntax рд╕реЗ promises рдФрд░ readable рдмрди рдЬрд╛рддреЗ рд╣реИрдВ ЁЯСЗ

function getWeather() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const weather = "тШАя╕П Sunny";
      if (weather) {
        resolve(weather);
      } else {
        reject("ЁЯМзя╕П Weather info unavailable!");
      }
    }, 1000);
  });
}

async function showWeather() {
  console.log("тП│ рдореМрд╕рдо рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЛрдб рд╣реЛ рд░рд╣реА рд╣реИ...");
  try {
    const result = await getWeather();
    console.log("тЬЕ рдЖрдЬ рдХрд╛ рдореМрд╕рдо:", result);
  } catch (error) {
    console.log(error);
  } finally {
    console.log("ЁЯОп Process complete");
  }
}

showWeather();

ЁЯФз рдЕрдм рдЗрд╕реЗ рдЕрдкрдиреЗ Project рдореЗрдВ рдХреИрд╕реЗ Implement рдХрд░реЗрдВ?

рдЖрдкрдХреЗ project рдореЗрдВ рдЕрдЧрд░ рдЖрдкрдиреЗ theme toggle (sun/moon) рдмрдирд╛рдпрд╛ рд╣реИ,
рддреЛ рд╣рдо рдЙрд╕рдореЗрдВ Promise рд╕реЗ loading simulation рдпрд╛ save confirmation рдЬреЛрдбрд╝ рд╕рдХрддреЗ рд╣реИрдВ ЁЯСЗ

function saveTheme(theme) {
  return new Promise((resolve, reject) => {
    console.log(`тП│ "${theme}" theme save рд╣реЛ рд░рд╣реА рд╣реИ...`);
    setTimeout(() => {
      if (theme === "light" || theme === "dark") {
        resolve(`тЬЕ "${theme}" theme рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ save рд╣реЛ рдЧрдИ!`);
      } else {
        reject("тЭМ Invalid theme selected!");
      }
    }, 1500);
  });
}

async function handleThemeChange(theme) {
  try {
    const result = await saveTheme(theme);
    console.log(result);
  } catch (error) {
    console.log(error);
  } finally {
    console.log("ЁЯОп Theme change process complete");
  }
}

// рдЬрдм user theme рдмрджрд▓реЗ:
handleThemeChange("dark");

ЁЯз╛ Summary (Promise рдпрд╛рдж рд░рдЦрдиреЗ рдХрд╛ Shortcut)

| Concept         | Description                     |
| --------------- | ------------------------------- |
| **Promise**     | Future result рдХрд╛ representation |
| **resolve()**   | рдХрд╛рдо рд╕рдлрд▓ рд╣реБрдЖ                     |
| **reject()**    | рдХрд╛рдо fail рд╣реБрдЖ                    |
| **then()**      | Success case handle             |
| **catch()**     | Error case handle               |
| **finally()**   | рд╣рд░ рд╣рд╛рд▓ рдореЗрдВ run рд╣реЛрддрд╛ рд╣реИ          |
| **async/await** | Promise рдХрд╛ рдЖрд╕рд╛рди readable рддрд░реАрдХрд╛  |


What is a Promise?

A Promise in JavaScript is an object that represents the eventual completion (or failure) of an asynchronous operation.

In simple words:
ЁЯСЙ A Promise says тАФ тАЬIтАЩll do something for you (like fetching data), but it may take time. Once IтАЩm done, IтАЩll let you know if it was successful or not.тАЭ

ЁЯФД Why We Use Promises

Because JavaScript is asynchronous тАФ it executes some tasks (like API calls, file reads, or timers) in the background.
Earlier, we used callbacks for this тАФ but they caused callback hell (nested and messy code).

тЬЕ Promises make async code easier to read, cleaner, and avoid callback hell.

тП░ When & Where to Use Promises

You use Promises when you deal with asynchronous operations, such as:

Fetching data from an API (e.g., fetch())

Reading/writing files (Node.js)

Setting timers or animations

Waiting for user input or response

Basically тАФ whenever the result is not immediate.

ЁЯТб Syntax of Promise
let promise = new Promise((resolve, reject) => {
  // async operation
  let success = true;

  if (success) {
    resolve("Operation Successful!");
  } else {
    reject("Something went wrong!");
  }
});

тЪЩя╕П Using Promises тАФ Example
let dataPromise = new Promise((resolve, reject) => {
  let dataLoaded = true; // imagine this is data from a server

  setTimeout(() => {
    if (dataLoaded) {
      resolve("Data fetched successfully!");
    } else {
      reject("Failed to fetch data!");
    }
  }, 2000);
});

// Handle the result
dataPromise
  .then((message) => {
    console.log("тЬЕ Success:", message);
  })
  .catch((error) => {
    console.log("тЭМ Error:", error);
  })
  .finally(() => {
    console.log("Promise Completed");
  });

Output:
тЬЕ Success: Data fetched successfully!
Promise Completed

ЁЯзй Example with fetch() (real-world use)
fetch("https://jsonplaceholder.typicode.com/posts")
  .then((response) => response.json()) // convert response to JSON
  .then((data) => {
    console.log("Posts:", data);
  })
  .catch((error) => {
    console.error("Error fetching data:", error);
  });


ЁЯСЙ Here:

fetch() returns a Promise

then() runs when the data is fetched

catch() runs if thereтАЩs a network or data error

ЁЯЪА How to Use Promises in Your Project

LetтАЩs say your project needs to:

Load data from an API or local JSON file

Show a loading spinner while waiting

Display data when loaded

Example:
function getUserData() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const user = { name: "Sunil", age: 25 };
      if (user) resolve(user);
      else reject("No user found!");
    }, 1500);
  });
}

console.log("Loading user data...");

getUserData()
  .then((user) => {
    console.log("User data loaded:", user);
  })
  .catch((error) => {
    console.error("Error:", error);
  });

ЁЯзн How Promises Work Internally

A Promise has three states:

ЁЯХУ Pending тАФ The operation is still running.

тЬЕ Resolved (Fulfilled) тАФ The operation succeeded.

тЭМ Rejected тАФ The operation failed.

Once resolved or rejected, the state doesnтАЩt change again.

ЁЯФБ Shortcut: Async / Await (Modern Way)

Async/await is just a cleaner way to use Promises.

async function getData() {
  try {
    const response = await fetch("https://jsonplaceholder.typicode.com/posts");
    const data = await response.json();
    console.log(data);
  } catch (error) {
    console.error("Error:", error);
  }
}

getData();

ЁЯТ╝ In Your Project (Implementation Ideas)

You can use Promises in your project for:

Theme toggle тЖТ simulate saving user preference asynchronously

Loading fonts or images before showing UI

Fetching data from APIs (users, posts, etc.)

Simulating loading animations with setTimeout

Example (theme save simulation):

function saveThemePreference(theme) {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      if (theme) {
        resolve(`Theme '${theme}' saved successfully!`);
      } else {
        reject("No theme selected!");
      }
    }, 1000);
  });
}

saveThemePreference("dark")
  .then((msg) => console.log(msg))
  .catch((err) => console.error(err));


Would you like me to show how to add a real Promise-based loading effect (like fetching user data or simulating an API) in your existing project (the one with the theme toggle)?
I can write that code next тАФ complete with animation or тАЬLoadingтАжтАЭ message before the data appears.

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯФе
рдЕрдм рд╣рдо рдЖрдкрдХреЗ theme toggle project (sun/moon images рд╡рд╛рд▓рд╛) рдореЗрдВ Promise + Loading Spinner + Save Confirmation Message рдЬреЛрдбрд╝реЗрдВрдЧреЗ рддрд╛рдХрд┐ рдЖрдк practically рджреЗрдЦ рд╕рдХреЛ рдХрд┐ Promises real project рдореЗрдВ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддреЗ рд╣реИрдВред

ЁЯОп Final Output (Concept)

рдЬрдм user:

тШАя╕П Light рдпрд╛ ЁЯМЩ Dark icon рдкрд░ click рдХрд░реЗрдЧрд╛ тАФ
рддрдм:

Loading spinner рджрд┐рдЦреЗрдЧрд╛

Promise рд╕реЗ simulate рд╣реЛрдЧрд╛ рдХрд┐ theme тАЬsaveтАЭ рд╣реЛ рд░рд╣реА рд╣реИ

рдлрд┐рд░ message рджрд┐рдЦреЗрдЧрд╛ тАФ "Dark Theme Saved Successfully!"

ЁЯТ╗ Complete Code
ЁЯзй HTML
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Theme Toggle with Promise</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>

  <div class="container">
    <h1>Theme Toggle Project</h1>

    <div class="theme-toggle">
      <img id="light-icon" src="./images/sun.jpg" alt="Light Mode" title="Light Mode">
      <img id="dark-icon" src="./images/moon.jpg" alt="Dark Mode" title="Dark Mode">
    </div>

    <div id="message"></div>
    <div id="loader" class="loader"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>

ЁЯОи CSS (style.css)
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Manrope', sans-serif;
}

body {
  transition: background-color 0.5s ease, color 0.5s ease;
}

.container {
  text-align: center;
  margin-top: 80px;
}

.theme-toggle img {
  width: 50px;
  height: 50px;
  cursor: pointer;
  margin: 10px;
  transition: transform 0.3s ease;
}

.theme-toggle img:hover {
  transform: scale(1.1);
}

/* Loader style */
.loader {
  display: none;
  margin: 20px auto;
  border: 6px solid #f3f3f3;
  border-top: 6px solid #333;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

#message {
  margin-top: 15px;
  font-size: 18px;
  font-weight: 600;
}

body.light {
  background-color: #fefefe;
  color: #111;
}

body.dark {
  background-color: #111;
  color: #fefefe;
}

тЪЩя╕П JavaScript (script.js)
const lightIcon = document.getElementById("light-icon");
const darkIcon = document.getElementById("dark-icon");
const loader = document.getElementById("loader");
const message = document.getElementById("message");

// Promise function тАФ theme save simulation
function saveTheme(theme) {
  return new Promise((resolve, reject) => {
    loader.style.display = "block";
    message.textContent = `Saving ${theme} theme...`;

    setTimeout(() => {
      if (theme === "light" || theme === "dark") {
        resolve(`тЬЕ ${theme.toUpperCase()} Theme Saved Successfully!`);
      } else {
        reject("тЭМ Invalid Theme!");
      }
    }, 1500);
  });
}

// Handle theme change
async function handleThemeChange(theme) {
  try {
    const result = await saveTheme(theme);
    document.body.className = theme; // apply theme
    message.textContent = result;
  } catch (error) {
    message.textContent = error;
  } finally {
    loader.style.display = "none";
  }
}

// Event listeners
lightIcon.addEventListener("click", () => handleThemeChange("light"));
darkIcon.addEventListener("click", () => handleThemeChange("dark"));

ЁЯза рдХреИрд╕реЗ рдХрд╛рдо рдХрд░реЗрдЧрд╛

рдЬрдм user тШАя╕П рдпрд╛ ЁЯМЩ icon рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдЧрд╛:
тЖТ Promise рд╢реБрд░реВ рд╣реЛрдЧреА (loader рджрд┐рдЦреЗрдЧрд╛)ред

setTimeout() рд╕реЗ async delay simulate рд╣реЛрдЧрд╛ред

Promise resolve рд╣реЛрдЧреА рддреЛ success message рджрд┐рдЦреЗрдЧрд╛ред

Theme apply рд╣реЛрдЧреА (body.className = theme)

Loader рдЫреБрдк рдЬрд╛рдПрдЧрд╛ред

тЬЕ Output Flow Example
User clicked on Dark Icon:
тП│ Saving dark theme...
тЬЕ DARK Theme Saved Successfully!
ЁЯОи Background turns dark


рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдореИрдВ рдЗрд╕рдореЗрдВ LocalStorage рднреА рдЬреЛрдбрд╝ рджреВрдБ
рддрд╛рдХрд┐ reload рдХрд░рдиреЗ рдкрд░ рднреА selected theme (light/dark) рдпрд╛рдж рд░рд╣реЗ рдФрд░ auto apply рд╣реЛ рдЬрд╛рдП?
(рдпреЗ рднреА Promise рдХреЗ рд╕рд╛рде perfectly рдХрд╛рдо рдХрд░реЗрдЧрд╛)

You said:
sure
ChatGPT said:

рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛ ЁЯФе рдЕрдм рд╣рдо рдЖрдкрдХреЗ theme toggle project (sun/moon рд╡рд╛рд▓рд╛) рдореЗрдВ
LocalStorage + Promise + Auto Theme Restore feature рдЬреЛрдбрд╝реЗрдВрдЧреЗ ЁЯТб

рдЗрд╕рд╕реЗ рд╣реЛрдЧрд╛ рдпреЗ:

рдЬрдм user theme рдмрджрд▓реЗрдЧрд╛ тЖТ Promise рд╕реЗ тАЬSavingтАжтАЭ animation рджрд┐рдЦреЗрдЧреА

Theme background change рд╣реЛрдЧрд╛

LocalStorage рдореЗрдВ theme save рд╣реЛрдЧреА

рдЕрдЧрд▓реА рдмрд╛рд░ page reload рдХрд░рдиреЗ рдкрд░ рд╡рд╣реА theme рдЕрдкрдиреЗ-рдЖрдк apply рд╣реЛрдЧреА ЁЯОп

ЁЯТ╗ Final Code (Full Working Example)
ЁЯзй HTML
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Theme Toggle with Promise + LocalStorage</title>
  <link rel="stylesheet" href="style.css" />
</head>
<body>

  <div class="container">
    <h1>Theme Toggle Project</h1>

    <div class="theme-toggle">
      <img id="light-icon" src="./images/sun.jpg" alt="Light Mode" title="Light Mode">
      <img id="dark-icon" src="./images/moon.jpg" alt="Dark Mode" title="Dark Mode">
    </div>

    <div id="message"></div>
    <div id="loader" class="loader"></div>
  </div>

  <script src="script.js"></script>
</body>
</html>

ЁЯОи CSS (style.css)
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: 'Manrope', sans-serif;
}

body {
  transition: background-color 0.5s ease, color 0.5s ease;
}

.container {
  text-align: center;
  margin-top: 80px;
}

.theme-toggle img {
  width: 50px;
  height: 50px;
  cursor: pointer;
  margin: 10px;
  transition: transform 0.3s ease;
}

.theme-toggle img:hover {
  transform: scale(1.1);
}

/* Loader style */
.loader {
  display: none;
  margin: 20px auto;
  border: 6px solid #f3f3f3;
  border-top: 6px solid #333;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

#message {
  margin-top: 15px;
  font-size: 18px;
  font-weight: 600;
}

body.light {
  background-color: #fefefe;
  color: #111;
}

body.dark {
  background-color: #111;
  color: #fefefe;
}

тЪЩя╕П JavaScript (script.js)
const lightIcon = document.getElementById("light-icon");
const darkIcon = document.getElementById("dark-icon");
const loader = document.getElementById("loader");
const message = document.getElementById("message");

// Promise function тАФ theme save simulation
function saveTheme(theme) {
  return new Promise((resolve, reject) => {
    loader.style.display = "block";
    message.textContent = `тП│ "${theme}" theme save рд╣реЛ рд░рд╣реА рд╣реИ...`;

    setTimeout(() => {
      if (theme === "light" || theme === "dark") {
        // LocalStorage рдореЗрдВ theme save рдХрд░реЗрдВ
        localStorage.setItem("selectedTheme", theme);
        resolve(`тЬЕ "${theme.toUpperCase()}" Theme рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ save рд╣реЛ рдЧрдИ!`);
      } else {
        reject("тЭМ Invalid Theme Selected!");
      }
    }, 1200);
  });
}

// Handle theme change
async function handleThemeChange(theme) {
  try {
    const result = await saveTheme(theme);
    document.body.className = theme; // apply theme
    message.textContent = result;
  } catch (error) {
    message.textContent = error;
  } finally {
    loader.style.display = "none";
  }
}

// Theme restore on page load
function applySavedTheme() {
  const savedTheme = localStorage.getItem("selectedTheme");
  if (savedTheme) {
    document.body.className = savedTheme;
    message.textContent = `ЁЯМИ "${savedTheme}" theme auto applied from LocalStorage!`;
  } else {
    message.textContent = "ЁЯМУ Default Light Theme Applied";
  }
}

// Event listeners
lightIcon.addEventListener("click", () => handleThemeChange("light"));
darkIcon.addEventListener("click", () => handleThemeChange("dark"));

// On page load
applySavedTheme();

ЁЯза рдХреИрд╕реЗ рдХрд╛рдо рдХрд░реЗрдЧрд╛:

рдЬрдм user тШАя╕П рдпрд╛ ЁЯМЩ рдкрд░ click рдХрд░реЗрдЧрд╛:

Promise рд╢реБрд░реВ рд╣реЛрдЧреА (loader рдШреВрдореЗрдЧрд╛)

Message: "dark theme save рд╣реЛ рд░рд╣реА рд╣реИ..."

1.2 рд╕реЗрдХрдВрдб рдмрд╛рдж Promise resolve тЖТ "DARK Theme рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ save рд╣реЛ рдЧрдИ!"

Theme background change рд╣реЛрдЧрд╛

LocalStorage рдореЗрдВ theme save рд╣реЛ рдЬрд╛рдПрдЧреА

рдЕрдЧрд▓реА рдмрд╛рд░ рдЬрдм рдЖрдк page reload рдХрд░реЛрдЧреЗ тЖТ

Script LocalStorage рд╕реЗ theme check рдХрд░реЗрдЧрд╛

Automatically рд╡рд╣реА theme apply рд╣реЛ рдЬрд╛рдПрдЧреА

ЁЯз╛ Example Output Flow:
User clicked on ЁЯМЩ:
тП│ "dark" theme save рд╣реЛ рд░рд╣реА рд╣реИ...
тЬЕ "DARK" Theme рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ save рд╣реЛ рдЧрдИ!

Page reload рдХрд┐рдпрд╛:
ЁЯМИ "dark" theme auto applied from LocalStorage!


рдХреНрдпрд╛ рдЖрдк рдЪрд╛рд╣реЗрдВрдЧреЗ рдХрд┐ рдореИрдВ рдЗрд╕рдореЗрдВ рдПрдХ custom animated toast notification рднреА add рдХрд░ рджреВрдБ
(рдЬреИрд╕реЗ рдиреАрдЪреЗ fade-in message рджрд┐рдЦреЗ тАЬDark Theme Saved!тАЭ Promise resolve рд╣реЛрддреЗ рд╣реА)?
рд╡реЛ рднреА рдмрд╣реБрдд realistic project feel рджреЗрдЧрд╛ ЁЯТл
