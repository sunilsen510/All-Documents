üòé ‡§ö‡§≤‡•ã JavaScript ‡§Æ‡•á‡§Ç var ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç ‚Äì ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à, syntax, examples, ‡§ï‡•ç‡§Ø‡•ã‡§Ç, ‡§ï‡§¨ ‡§î‡§∞ ‡§ï‡§π‡§æ‡§Å use ‡§ï‡§∞‡•á‡§Ç‡•§

1Ô∏è‚É£ var ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

var JavaScript ‡§Æ‡•á‡§Ç old way ‡§∏‡•á variable declare ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ ‡§π‡•à‡•§

Function scoped ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Üí ‡§Æ‡§§‡§≤‡§¨ variable ‡§ï‡•á‡§µ‡§≤ function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ accessible ‡§π‡•à‡•§

Reassignable ‡§î‡§∞ redeclarable ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Üí value ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‡§î‡§∞ same name ‡§∏‡•á declare ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

Hoisting possible ‡§π‡•à ‚Üí declare ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§≠‡•Ä variable accessible ‡§π‡•ã‡§§‡§æ ‡§π‡•à, ‡§≤‡•á‡§ï‡§ø‡§® value undefined ‡§π‡•ã‡§§‡•Ä ‡§π‡•à‡•§

2Ô∏è‚É£ Syntax
var variableName = value;


Example:

var name = "Sunil";
console.log(name); // Sunil

name = "Aman"; // ‚úÖ Reassign allowed
console.log(name); // Aman

var name = "Rakesh"; // ‚úÖ Redeclare allowed
console.log(name); // Rakesh

3Ô∏è‚É£ Scope of var

var function scoped ‡§π‡•à‡•§

Agar function ke bahar declare kiya ‚Üí global variable ‡§¨‡§® ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

if(true){
  var age = 25;
}
console.log(age); // 25, block ke bahar bhi accessible

function testVar() {
  var score = 100;
  console.log(score); // 100
}
testVar();
console.log(score); // ‚ùå Error, function scope


Block {} ka var pe koi effect nahi ‚Üí dikkat ho sakti hai ‚Üí modern JS me avoid ‡§ï‡§∞‡•á‡§Ç

4Ô∏è‚É£ Hoisting with var

var variables hoisted ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

Declare ‡§ï‡§∞‡§®‡•á ‡§∏‡•á ‡§™‡§π‡§≤‡•á use ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ value undefined ‡§Ü‡§§‡•Ä ‡§π‡•à‡•§

console.log(x); // undefined
var x = 10;
console.log(x); // 10


Compare with let / const ‚Üí ReferenceError if access before declaration

5Ô∏è‚É£ Reassign vs Redeclare
var count = 10;
count = 20; // ‚úÖ Reassign allowed

var count = 30; // ‚úÖ Redeclare allowed


‚úÖ Reassign allowed

‚úÖ Redeclare allowed

‡§ß‡•ç‡§Ø‡§æ‡§®: Same scope ‡§Æ‡•á‡§Ç redeclare ‡§ï‡§∞‡§®‡•á ‡§∏‡•á bugs ‡§Ü ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç ‚Üí modern JS me avoid ‡§ï‡§∞‡•á‡§Ç

6Ô∏è‚É£ Why var use ‡§ï‡§∞‡§§‡•á ‡§•‡•á / ‡§ï‡•ç‡§Ø‡•ã‡§Ç ‡§Ö‡§¨ avoid ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç
Advantages (‡§™‡•Å‡§∞‡§æ‡§®‡•á code ‡§Æ‡•á‡§Ç):

Simple, old browsers compatible

Function level scope simple for beginners

Disadvantages (modern JS ‡§Æ‡•á‡§Ç):

Block scope ‡§®‡§π‡•Ä‡§Ç ‚Üí accidental global variable

Redeclare allowed ‚Üí bugs & confusion

Hoisting ‚Üí unpredictable behavior

Modern JS: mostly let ‡§î‡§∞ const use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç

7Ô∏è‚É£ Project-level Usage of var

| Scenario                 | Example                               | Use/Why                       |
| ------------------------ | ------------------------------------- | ----------------------------- |
| Legacy projects          | `var x = 10;`                         | Old browsers support          |
| Function-scoped variable | `function test(){ var score = 100; }` | Limited scope inside function |
| Avoid global pollution   | Modern JS me avoid ‡§ï‡§∞‡•á‡§Ç                        | Use `let`/`const` instead     |


Example:

function calculateTotal(){
  var total = 0; // function scoped
  for(var i=0; i<5; i++){
    total += i;
  }
  console.log(total); // 10
}
calculateTotal();
console.log(i); // 5, because var is not block scoped (bug potential)


Loop ‡§Æ‡•á‡§Ç var ‚Üí i globally accessible ‡§π‡•ã ‡§ó‡§Ø‡§æ ‚Üí unexpected behavior

Loops ‡§Æ‡•á‡§Ç modern JS ‚Üí let use ‡§ï‡§∞‡•á‡§Ç

8Ô∏è‚É£ Var vs Let vs Const Quick Comparison

| Feature   | var             | let       | const     |
| --------- | -------------   | -------   | -------   |
| Scope     | Function        | Block     | Block     |
| Reassign  | ‚úÖ             | ‚úÖ        | ‚ùå       |
| Redeclare | ‚úÖ             | ‚ùå        | ‚ùå       |
| Hoisting  | ‚úÖ (undefined) | ‚úÖ (TDZ)  | ‚úÖ (TDZ) |


üí° Summary:

var = old way, function scoped, reassignable & redeclarable

Avoid in modern projects ‚Üí use let / const

Use: legacy code, old browser support, simple function-scoped variables

Why avoid now: block safety missing, accidental global variables, hoisting bugs
