loops explain in hindi and why when where and how to use it with all types of examples in explain in details 


‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! üòÑ
‡§Ü‡§ì JavaScript Loops ‡§ï‡•ã ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç ‚Äì ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç, ‡§ï‡•ç‡§Ø‡•ã‡§Ç, ‡§ï‡§¨, ‡§ï‡§π‡§æ‡§Å ‡§î‡§∞ ‡§ï‡•à‡§∏‡•á use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç, ‡§∏‡§æ‡§• ‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä types ‡§ï‡•á examples ‡•§

üåÄ 1Ô∏è‚É£ Loops ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

Loop ‡§è‡§ï ‡§ê‡§∏‡§æ code structure ‡§π‡•à ‡§ú‡•ã same code block ‡§ï‡•ã multiple times execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

‡§Ü‡§∏‡§æ‡§® ‡§≠‡§æ‡§∑‡§æ ‡§Æ‡•á‡§Ç:

Loops ‚Üí Repetition / ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ execute ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§§‡§∞‡•Ä‡§ï‡§æ

‡§ú‡§¨ ‡§π‡§Æ‡•á‡§Ç same action multiple times ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã ‚Üí Loops use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç

üß† 2Ô∏è‚É£ Loops ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

| ‡§ï‡§æ‡§∞‡§£                        | Explanation                                       |
| ------------------   | ------------------------------------------------- |
| ‚úÖ Repetition Avoid | ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ same code ‡§≤‡§ø‡§ñ‡§®‡•á ‡§∏‡•á ‡§¨‡§ö‡§§‡•á ‡§π‡•à‡§Ç               |
| ‚úÖ Automation       | Large data sets ‡§Ø‡§æ arrays ‡§™‡§∞ operations ‡§ï‡§∞‡§®‡§æ ‡§Ü‡§∏‡§æ‡§® |
| ‚úÖ Dynamic Behavior | User input ‡§Ø‡§æ arrays ‡§ï‡•á size ‡§ï‡•á ‡§π‡§ø‡§∏‡§æ‡§¨ ‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡§æ |
| ‚úÖ Efficient        | Code readable ‡§î‡§∞ maintainable ‡§¨‡§®‡§§‡§æ ‡§π‡•à             |

‚è∞ 3Ô∏è‚É£ Loops ‡§ï‡§¨ use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç?

‡§ú‡§¨ array ‡§Æ‡•á‡§Ç iterate ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã

‡§ú‡§¨ user-defined count ‡§§‡§ï action repeat ‡§ï‡§∞‡§®‡§æ ‡§π‡•ã

‡§ú‡§¨ dynamic calculation ‡§ï‡§∞‡§®‡•Ä ‡§π‡•ã (sum, total, factorial)

‡§ú‡§¨ DOM elements ‡§™‡§∞ batch operation ‡§ï‡§∞‡§®‡•Ä ‡§π‡•ã

üß© 4Ô∏è‚É£ Loops ‡§ï‡§π‡§æ‡§Å use ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç? (Real Projects)

| Project     | Loop Use Case                                       |
| ----------- | --------------------------------------------------- |
| E-commerce  | Products array display, Cart total calculation      |
| Todo App    | Loop through tasks array, completed tasks count     |
| Quiz App    | Loop through questions, check answers               |
| Student App | Loop through students, calculate average            |
| Library App | Loop through books array to display available books |
	
üîπ 5Ô∏è‚É£ Types of Loops in JS
5.1 for loop
for(let i=1; i<=5; i++){
  console.log("Hello JS", i);
}


Explanation: i = counter variable

i=1 ‚Üí start, i<=5 ‚Üí condition, i++ ‚Üí increment

Executes 5 times (1 to 5)

Array Example:

let fruits = ["Apple","Banana","Mango"];
for(let i=0; i<fruits.length; i++){
  console.log(fruits[i]);
}


Use in Projects:

Display products dynamically

Show tasks in Todo App

5.2 while loop
let i = 1;
while(i <= 5){
  console.log("Hello while", i);
  i++;
}


Explanation: Condition check ‚Üí execute block ‚Üí increment

Loops until condition false

Array Example:

let tasks = ["Task1","Task2","Task3"];
let index = 0;
while(index < tasks.length){
  console.log(tasks[index]);
  index++;
}


Use in Projects:

Dynamic iteration when initial value unknown

Server requests / polling

5.3 do...while loop
let i = 1;
do{
  console.log("Hello do-while", i);
  i++;
} while(i <= 5);


Difference from while:

Block at least once execute ‡§π‡•ã‡§ó‡§æ, ‡§´‡§ø‡§∞ condition check ‡§π‡•ã‡§ó‡•Ä

Array Example:

let numbers = [10,20,30];
let j = 0;
do{
  console.log(numbers[j]);
  j++;
} while(j < numbers.length);


Use in Projects:

User input validation (‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¨‡§æ‡§∞ prompt ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ)

5.4 for...of loop (ES6)
let fruits = ["Apple","Banana","Mango"];
for(let fruit of fruits){
  console.log(fruit);
}


Use in Projects:

Arrays iterate ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ modern, readable ‡§§‡§∞‡•Ä‡§ï‡§æ

Object Array Example:

let products = [
  {id:1, name:"Laptop", price:50000},
  {id:2, name:"Phone", price:20000}
];

for(let product of products){
  console.log(product.name, product.price);
}

5.5 for...in loop (Objects)
let product = {name:"Laptop", price:50000, category:"Electronics"};

for(let key in product){
  console.log(key, ":", product[key]);
}


Explanation:

Loop through object properties

Use in Projects:

Dynamic rendering of object keys

Form data processing

üß† 6Ô∏è‚É£ Nested Loops
for(let i=1; i<=3; i++){
  for(let j=1; j<=3; j++){
    console.log(`i=${i}, j=${j}`);
  }
}


Use in Projects:

Multi-dimensional arrays

Grid, Table, Calendar, Matrix

E-commerce ‚Üí Product variants (size √ó color)

üß© 7Ô∏è‚É£ Loops with Arrays & Objects (Practical Example)

E-commerce Example:

let cart = [
  {id:1, name:"Laptop", price:50000, qty:2},
  {id:2, name:"Phone", price:20000, qty:1}
];

let total = 0;
for(let item of cart){
  total += item.price * item.qty;
}
console.log("Cart Total:", total); // 120000


Todo App Example:

let tasks = [
  {title:"Learn JS", completed:true},
  {title:"Practice CSS", completed:false}
];

for(let task of tasks){
  if(task.completed){
    console.log(task.title, "‚úÖ Done");
  }
}

üß† 8Ô∏è‚É£ When and Where to use Loops in Projects
 
| Situation                           | Loop Type    | Example                          |
| ----------------------------------- | ------------ | -------------------------------- |
| Fixed iteration                     | for loop     | Display 10 featured products     |
| Unknown iteration / while condition | while loop   | User input until correct value   |
| At least once execution             | do...while   | Prompt user for name             |
| Array iteration                     | for...of     | Loop through products array      |
| Object properties                   | for...in     | Loop through product object keys |
| Nested / Grid                       | Nested loops | Product variants / Table rows    |

üîë 9Ô∏è‚É£ Summary

Loops = Repetition ‚Üí Avoid writing same code multiple times

Array + Loops = Dynamic UI

Object + for...in = Dynamic data handling

Nested Loops = Multi-dimensional data

Modern Loops = for...of for arrays, for...in for objects

üí° Pro Tip:

Always check loop conditions, var / let scope

Avoid infinite loops (while(true) without break)

Loops + Functions + Objects = Real-world projects backbone

‡§Ö‡§ó‡§∞ ‡§§‡•Å‡§Æ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç Loops + Arrays + Objects + Functions ‡§ï‡§æ Real-World E-commerce Example ‡§¨‡§®‡§æ ‡§ï‡•á step-by-step explain ‡§ï‡§∞ ‡§¶‡•Ç‡§Å,
‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç loops ‡§ï‡•á ‡§∏‡§≠‡•Ä types ‡§ï‡§æ use clear ho jaaye‡•§

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ø‡•á example bana doon?

You said:
sure
ChatGPT said:

Perfect! üòÑ
Chalo, mai tumhare liye Real-World E-commerce Example with Loops, Arrays, Objects, and Functions step-by-step bana ke explain karta hoon, jisme sabhi loop types ka use clear ho.

üõí E-commerce Example: Loops + Arrays + Objects + Functions
1Ô∏è‚É£ Products Array of Objects
let products = [
  {id: 1, name: "Laptop", price: 50000, category: "Electronics"},
  {id: 2, name: "Phone", price: 20000, category: "Electronics"},
  {id: 3, name: "Shoes", price: 3000, category: "Fashion"},
  {id: 4, name: "Watch", price: 1500, category: "Accessories"}
];


Object ‚Üí Each product info

Array ‚Üí Store all products

2Ô∏è‚É£ Display Products using for loop
console.log("Available Products:");
for(let i=0; i<products.length; i++){
  console.log(`${products[i].id}: ${products[i].name} - ‚Çπ${products[i].price}`);
}


Use:

Fixed iteration ‚Üí Display all products

3Ô∏è‚É£ Add to Cart using for...of loop
let cart = [];

function addToCart(productId, qty){
  for(let product of products){
    if(product.id === productId){
      cart.push({...product, qty: qty}); // Object + spread
      console.log(`${product.name} added to cart (Qty: ${qty})`);
      break;
    }
  }
}

addToCart(1, 2); // Laptop
addToCart(3, 1); // Shoes


Use:

Array iteration for dynamic data

4Ô∏è‚É£ Calculate Cart Total using for...of loop
let total = 0;
for(let item of cart){
  total += item.price * item.qty;
}
console.log("Cart Total: ‚Çπ", total);


Use:

Loops + Array + Objects ‚Üí Calculation logic

5Ô∏è‚É£ Display Cart Items using for...in loop (Object Properties)
console.log("Cart Items Details:");
for(let i=0; i<cart.length; i++){
  for(let key in cart[i]){
    console.log(key, ":", cart[i][key]);
  }
  console.log("------");
}


Use:

Dynamically access object properties

Works even if properties change

6Ô∏è‚É£ Filter Products by Category using while loop
function filterByCategory(category){
  let filtered = [];
  let i = 0;
  while(i < products.length){
    if(products[i].category === category){
      filtered.push(products[i]);
    }
    i++;
  }
  return filtered;
}

console.log("Electronics:", filterByCategory("Electronics"));


Use:

Condition-based iteration

Dynamic filtering

7Ô∏è‚É£ Search Product using do...while loop
let searchQuery = "Shoes";
let found = false;
let j = 0;
do{
  if(products[j].name.toLowerCase() === searchQuery.toLowerCase()){
    console.log("Found Product:", products[j]);
    found = true;
    break;
  }
  j++;
} while(j < products.length);

if(!found) console.log("Product not found!");


Use:

At least once search ‚Üí do...while perfect

8Ô∏è‚É£ Nested Loops Example (Product Variants)
let sizes = ["S", "M", "L"];
let colors = ["Red", "Blue"];

console.log("Product Variants:");
for(let size of sizes){
  for(let color of colors){
    console.log(`Size: ${size}, Color: ${color}`);
  }
}


Use:

Multi-dimensional iteration

Product variant combinations

‚úÖ Summary

| Loop Type  | Example Use                          |
| ---------- | ------------------------------------ |
| for        | Display products array               |
| while      | Filter products by category          |
| do...while | Search product dynamically           |
| for...of   | Add to cart, calculate total         |
| for...in   | Access object properties dynamically |
| Nested     | Product variant combinations         |

üí° Key Takeaways for Projects:

Products / Cart / Tasks ‚Üí Arrays of Objects

Loops ‚Üí Iterate dynamically

Functions ‚Üí Reusable actions (add, remove, filter, calculate)

Nested Loops ‚Üí Multi-dimensional data

Dynamic rendering + calculation ‚Üí Real-world project backbone

Agar chaho, mai tumhare liye one-page visual cheat sheet bana doon jisme Loops + Arrays + Objects + Functions ka flow + real-world project example ekdum beginner-friendly ready ho, jisse reference ke liye use kar sako.

Kya mai ye cheat sheet bana doon?

You said:
sure
ChatGPT said:

Perfect! üòÑ
Chalo, mai tumhare liye one-page Visual Cheat Sheet ready karta hoon, jisme Loops + Arrays + Objects + Functions ka flow aur Real-World E-commerce Examples sab clear dikhe.

üìã JavaScript Loops + Arrays + Objects + Functions Cheat Sheet (Beginner-Friendly)
1Ô∏è‚É£ Arrays + Objects
// Array of Objects ‚Üí Products
let products = [
  {id:1, name:"Laptop", price:50000, category:"Electronics"},
  {id:2, name:"Phone", price:20000, category:"Electronics"},
  {id:3, name:"Shoes", price:3000, category:"Fashion"}
];

// Cart ‚Üí Array of Objects
let cart = [];


‚úÖ Objects ‚Üí Single item info
‚úÖ Arrays ‚Üí Collection of items

2Ô∏è‚É£ Functions (Actions)
function addToCart(productId, qty){
  for(let product of products){
    if(product.id === productId){
      cart.push({...product, qty});
      console.log(`${product.name} added`);
      break;
    }
  }
}

function calculateTotal(){
  let total = 0;
  for(let item of cart){
    total += item.price * item.qty;
  }
  return total;
}


Functions ‚Üí Reusable logic

Loops inside functions ‚Üí iterate dynamically

3Ô∏è‚É£ Loops Types & Use

| Loop Type        | Syntax                            | Example Use                          |
| ---------------- | --------------------------------- | ------------------------------------ |
| **for**          | `for(let i=0; i<arr.length; i++)` | Display products array               |
| **while**        | `while(condition)`                | Filter products dynamically          |
| **do...while**   | `do { } while(condition)`         | Search product at least once         |
| **for...of**     | `for(let item of array)`          | Add to cart, calculate total         |
| **for...in**     | `for(let key in object)`          | Access object properties dynamically |
| **Nested loops** | `for() { for() {} }`              | Product variant combinations         |

4Ô∏è‚É£ Real-World E-commerce Flow
Products Array ‚Üí Loop ‚Üí Render on UI
    |
User clicks "Add to Cart"
    |
addToCart(productId, qty) ‚Üí cart[] updated
    |
calculateTotal() ‚Üí display cart total
    |
Optional: Filter/Search ‚Üí while / do-while
    |
Nested Loops ‚Üí Product Variants (size √ó color)

5Ô∏è‚É£ Practical Examples (Cheat)

Add Product to Cart

addToCart(1, 2); // Laptop x2
addToCart(3, 1); // Shoes x1


Calculate Cart Total

console.log("Cart Total:", calculateTotal());


Filter Products (while loop)

let filtered = [];
let i = 0;
while(i < products.length){
  if(products[i].category === "Electronics") filtered.push(products[i]);
  i++;
}
console.log(filtered);


Search Product (do...while)

let j=0, found=false;
do{
  if(products[j].name==="Shoes"){ found=true; break; }
  j++;
} while(j < products.length);
console.log(found ? "Found" : "Not Found");


Nested Loop Example

let sizes=["S","M"], colors=["Red","Blue"];
for(let size of sizes){
  for(let color of colors){
    console.log(`Size: ${size}, Color: ${color}`);
  }
}

6Ô∏è‚É£ Key Takeaways

Array + Object ‚Üí Data structure

Loops ‚Üí Dynamic iteration

Functions ‚Üí Reusable actions

Nested Loops ‚Üí Multi-dimensional data

All together = Real-world Project Backbone

üí° Pro Tip for Projects:

Product List ‚Üí Array of Objects

Cart ‚Üí Array of Objects + Loops for total

Filter/Search ‚Üí while / do...while

UI Rendering ‚Üí Loops

Variants ‚Üí Nested Loops

Agar chaho, mai is **cheat sheet ka ek full visual diagram bhi bana doon, jisme Loops, Arrays, Objects, Functions + E-commerce Flow sab ek page me color-coded aur flow arrows ke saath ready ho jaye, jisse beginner ke liye ekdum visual learning tool ban jaye.

Kya mai ye visual diagram bana doon?





‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§Ö‡§¨ ‡§Ö‡§ó‡§≤‡§æ topic ‚ÄúLoops in JavaScript (for, while, do-while, for...of, for...in)‚Äù
‡§ï‡•ã ‡§á‡§∏‡•Ä ‡§§‡§∞‡§π ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç examples ‡§î‡§∞ real-life use cases ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Æ‡§ù‡§æ‡§ä‡§Å?
ChatGPT said:

‡§¨‡§ø‡§≤‡§ï‡•Å‡§≤! ‡§π‡§Æ ‡§Ö‡§ó‡§≤‡§æ topic ‚ÄúLoops in JavaScript‚Äù ‡§á‡§∏‡•Ä ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç examples ‡§î‡§∞ real-life use cases ‡§ï‡•á ‡§∏‡§æ‡§• ‡§∏‡§Æ‡§ù ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

1. Loops ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à‡§Ç?

Loops ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡•ã‡§° ‡§ï‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ execute ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à‡•§

‡§â‡§¶‡§æ‡§π‡§∞‡§£: ‡§Ö‡§ó‡§∞ ‡§π‡§Æ‡•á‡§Ç 1 ‡§∏‡•á 10 ‡§§‡§ï ‡§ï‡•á numbers print ‡§ï‡§∞‡§®‡•á ‡§π‡•à‡§Ç, ‡§§‡•ã ‡§π‡§Æ ‡§π‡§∞ number ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ö‡§≤‡§ó ‡§∏‡•á code ‡§®‡§π‡•Ä‡§Ç ‡§≤‡§ø‡§ñ‡•á‡§Ç‡§ó‡•á‡•§ Loop ‡§á‡§∏‡•á automatically handle ‡§ï‡§∞ ‡§¶‡•á‡§ó‡§æ‡•§

Loops ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§∞‡•Ç‡§™ ‡§∏‡•á 4 ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç:

for

while

do...while

for...of ‡§î‡§∞ for...in

2. for Loop

‡§∏‡§¨‡§∏‡•á common loop‡•§

‡§ú‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§™‡§§‡§æ ‡§π‡•ã ‡§ï‡§ø ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ loop ‡§ö‡§≤‡•á‡§ó‡§æ‡•§
Syntax:

for (initialization; condition; increment/decrement) {
    // code to run
}


Example:

for (let i = 1; i <= 5; i++) {
    console.log(i);
}


Output: 1 2 3 4 5

Real-life use case:

‡§ï‡§ø‡§∏‡•Ä shopping cart ‡§Æ‡•á‡§Ç products ‡§ï‡•ã list ‡§ï‡§∞‡§®‡§æ

‡§ï‡§ø‡§∏‡•Ä table ‡§ï‡•á numbers print ‡§ï‡§∞‡§®‡§æ

3. while Loop

‡§§‡§¨ use ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ condition true ‡§π‡•ã‡§®‡•á ‡§§‡§ï loop ‡§ö‡§≤‡§æ‡§®‡§æ ‡§π‡•ã‡•§
Syntax:

while (condition) {
    // code to run
}


Example:

let i = 1;
while (i <= 5) {
    console.log(i);
    i++;
}


Output: 1 2 3 4 5

Real-life use case:

‡§ú‡§¨ user input valid ‡§® ‡§π‡•ã ‡§§‡§¨ ‡§§‡§ï prompt ‡§ï‡§∞‡§®‡§æ

‡§ï‡§ø‡§∏‡•Ä process ‡§ï‡•ã ‡§§‡§¨ ‡§§‡§ï ‡§ö‡§≤‡§æ‡§®‡§æ ‡§ú‡§¨ ‡§§‡§ï resource available ‡§π‡•ã

4. do...while Loop

‡§Ø‡§π loop ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¨‡§æ‡§∞ code ‡§ï‡•ã execute ‡§ï‡§∞‡§§‡§æ ‡§π‡•à, ‡§´‡§ø‡§∞ condition check ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
Syntax:

do {
    // code to run
} while (condition);


Example:

let i = 1;
do {
    console.log(i);
    i++;
} while (i <= 5);


Output: 1 2 3 4 5

Real-life use case:

Menu-driven programs ‡§Æ‡•á‡§Ç user ‡§ï‡•ã ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¨‡§æ‡§∞ option ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ

Form submission validation

5. for...of Loop

Arrays ‡§Ø‡§æ iterable objects ‡§ï‡•á values ‡§™‡§∞ loop ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
Syntax:

for (let value of iterable) {
    // code
}


Example:

let fruits = ["‡§∏‡•á‡§¨", "‡§ï‡•á‡§≤‡§æ", "‡§Ü‡§Æ"];

for (let fruit of fruits) {
    console.log(fruit);
}


Output: ‡§∏‡•á‡§¨ ‡§ï‡•á‡§≤‡§æ ‡§Ü‡§Æ

Real-life use case:

Array ‡§Ø‡§æ string ‡§ï‡•á ‡§∏‡§≠‡•Ä items ‡§™‡§∞ ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§®‡§æ

‡§ï‡§ø‡§∏‡•Ä list ‡§ï‡•á ‡§∏‡§≠‡•Ä users ‡§ï‡•á ‡§®‡§æ‡§Æ print ‡§ï‡§∞‡§®‡§æ

6. for...in Loop

Object ‡§ï‡•á keys ‡§™‡§∞ loop ‡§ö‡§≤‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§
Syntax:

for (let key in object) {
    // code
}


Example:

let student = {name: "‡§∞‡§æ‡§Æ", age: 20, grade: "A"};

for (let key in student) {
    console.log(key + ": " + student[key]);
}


Output:

name: ‡§∞‡§æ‡§Æ
age: 20
grade: A


Real-life use case:

‡§ï‡§ø‡§∏‡•Ä object ‡§ï‡•á ‡§∏‡§≠‡•Ä properties ‡§ï‡•ã iterate ‡§ï‡§∞‡§®‡§æ

Form ‡§Ø‡§æ database records ‡§ï‡•á ‡§∏‡§≠‡•Ä fields read ‡§ï‡§∞‡§®‡§æ

7. Loops ‡§ï‡•á Tips

Infinite loop ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç; condition ‡§∏‡§π‡•Ä ‡§∏‡•á set ‡§ï‡§∞‡•á‡§Ç‡•§

Arrays ‡§î‡§∞ objects ‡§Æ‡•á‡§Ç data process ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è for...of ‡§î‡§∞ for...in ‡§ï‡§æ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§

Nested loops (loops ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ loops) ‡§§‡§¨ use ‡§ï‡§∞‡•á‡§Ç ‡§ú‡§¨ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã‡•§

Loops ‡§Æ‡•á‡§Ç break ‡§î‡§∞ continue ‡§ï‡§æ use flow control ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§∞‡•á‡§Ç‡•§



‡§†‡•Ä‡§ï ‡§π‡•à! ‡§Ø‡§π‡§æ‡§Å ‡§Æ‡•à‡§Ç‡§®‡•á JavaScript Loops ‡§ï‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä Cheat Sheet ‡§§‡•à‡§Ø‡§æ‡§∞ ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à, ‡§ú‡§ø‡§∏‡§Æ‡•á‡§Ç ‡§∏‡§≠‡•Ä ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞ ‡§ï‡•á loops, syntax, examples ‡§î‡§∞ real-world use cases ‡§∂‡§æ‡§Æ‡§ø‡§≤ ‡§π‡•à‡§Ç‡•§

JavaScript Loops Cheat Sheet (‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç)
1. for Loop

Purpose: ‡§ú‡§¨ ‡§Ü‡§™‡§ï‡•ã ‡§™‡§§‡§æ ‡§π‡•ã ‡§ï‡§ø loop ‡§ï‡§ø‡§§‡§®‡•Ä ‡§¨‡§æ‡§∞ ‡§ö‡§≤‡•á‡§ó‡§æ‡•§

Syntax:

for (initialization; condition; increment/decrement) {
    // code to run
}


Example:

for (let i = 1; i <= 5; i++) {
    console.log(i);
}


Output: 1 2 3 4 5

Real-life use case:

‡§ï‡§ø‡§∏‡•Ä shopping cart ‡§Æ‡•á‡§Ç products list ‡§ï‡§∞‡§®‡§æ

Table ‡§ï‡•á numbers print ‡§ï‡§∞‡§®‡§æ

2. while Loop

Purpose: ‡§ú‡§¨ condition true ‡§π‡•ã‡§®‡•á ‡§§‡§ï loop ‡§ö‡§≤‡§æ‡§®‡§æ ‡§π‡•ã‡•§

Syntax:

while (condition) {
    // code to run
}


Example:

let i = 1;
while (i <= 5) {
    console.log(i);
    i++;
}


Output: 1 2 3 4 5

Real-life use case:

Valid user input ‡§Ü‡§®‡•á ‡§§‡§ï prompt ‡§ï‡§∞‡§®‡§æ

‡§ï‡§ø‡§∏‡•Ä process ‡§ï‡•ã ‡§§‡§¨ ‡§§‡§ï ‡§ö‡§≤‡§æ‡§®‡§æ ‡§ú‡§¨ ‡§§‡§ï resource available ‡§π‡•ã

3. do...while Loop

Purpose: ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¨‡§æ‡§∞ code run ‡§ï‡§∞‡§®‡§æ, ‡§´‡§ø‡§∞ condition check ‡§ï‡§∞‡§®‡§æ‡•§

Syntax:

do {
    // code to run
} while (condition);


Example:

let i = 1;
do {
    console.log(i);
    i++;
} while (i <= 5);


Output: 1 2 3 4 5

Real-life use case:

Menu-driven programs ‡§Æ‡•á‡§Ç user ‡§ï‡•ã ‡§ï‡§Æ ‡§∏‡•á ‡§ï‡§Æ ‡§è‡§ï ‡§¨‡§æ‡§∞ option ‡§¶‡§ø‡§ñ‡§æ‡§®‡§æ

Form submission validation

4. for...of Loop

Purpose: Arrays ‡§Ø‡§æ iterable objects ‡§ï‡•á values ‡§™‡§∞ loop ‡§ö‡§≤‡§æ‡§®‡§æ‡•§

Syntax:

for (let value of iterable) {
    // code
}


Example:

let fruits = ["‡§∏‡•á‡§¨", "‡§ï‡•á‡§≤‡§æ", "‡§Ü‡§Æ"];

for (let fruit of fruits) {
    console.log(fruit);
}


Output: ‡§∏‡•á‡§¨ ‡§ï‡•á‡§≤‡§æ ‡§Ü‡§Æ

Real-life use case:

Array ‡§Ø‡§æ string ‡§ï‡•á ‡§∏‡§≠‡•Ä items process ‡§ï‡§∞‡§®‡§æ

‡§ï‡§ø‡§∏‡•Ä list ‡§ï‡•á ‡§∏‡§≠‡•Ä users ‡§ï‡•á ‡§®‡§æ‡§Æ print ‡§ï‡§∞‡§®‡§æ

5. for...in Loop

Purpose: Object ‡§ï‡•á keys ‡§™‡§∞ loop ‡§ö‡§≤‡§æ‡§®‡§æ‡•§

Syntax:

for (let key in object) {
    // code
}


Example:

let student = {name: "‡§∞‡§æ‡§Æ", age: 20, grade: "A"};

for (let key in student) {
    console.log(key + ": " + student[key]);
}


Output:

name: ‡§∞‡§æ‡§Æ
age: 20
grade: A


Real-life use case:

Object ‡§ï‡•á ‡§∏‡§≠‡•Ä properties iterate ‡§ï‡§∞‡§®‡§æ

Form ‡§Ø‡§æ database records ‡§ï‡•á ‡§∏‡§≠‡•Ä fields read ‡§ï‡§∞‡§®‡§æ

6. Loop Control Statements

break: Loop ‡§ï‡•ã ‡§§‡•Å‡§∞‡§Ç‡§§ ‡§∞‡•ã‡§ï ‡§¶‡•á‡§§‡§æ ‡§π‡•à‡•§

for (let i = 1; i <= 10; i++) {
    if (i === 5) break;
    console.log(i);
}
// Output: 1 2 3 4


continue: Current iteration skip ‡§ï‡§∞‡§§‡§æ ‡§π‡•à ‡§î‡§∞ next iteration ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§

for (let i = 1; i <= 5; i++) {
    if (i === 3) continue;
    console.log(i);
}
// Output: 1 2 4 5

7. Nested Loops

Loop ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ loop‡•§
Example: Multiplication Table

for (let i = 1; i <= 3; i++) {
    for (let j = 1; j <= 3; j++) {
        console.log(`${i} x ${j} = ${i*j}`);
    }
}


Real-life use case:

Grid ‡§Ø‡§æ table data print ‡§ï‡§∞‡§®‡§æ

Multi-dimensional arrays process ‡§ï‡§∞‡§®‡§æ

8. Tips & Best Practices

Infinite loops ‡§∏‡•á ‡§¨‡§ö‡•á‡§Ç; condition ‡§∏‡§π‡•Ä set ‡§ï‡§∞‡•á‡§Ç‡•§

Arrays ‡§Æ‡•á‡§Ç for...of, objects ‡§Æ‡•á‡§Ç for...in ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§

Nested loops ‡§ï‡•á‡§µ‡§≤ ‡§ú‡§∞‡•Ç‡§∞‡•Ä ‡§π‡•ã‡§®‡•á ‡§™‡§∞ ‡§á‡§∏‡•ç‡§§‡•á‡§Æ‡§æ‡§≤ ‡§ï‡§∞‡•á‡§Ç‡•§

break ‡§î‡§∞ continue ‡§∏‡•á loop control manage ‡§ï‡§∞‡•á‡§Ç‡•§

‡§Ö‡§ó‡§∞ ‡§Ü‡§™ ‡§ö‡§æ‡§π‡•ã ‡§§‡•ã ‡§Æ‡•à‡§Ç Loops ‡§ï‡•á ‡§∏‡§≠‡•Ä examples ‡§ï‡•ã ‡§è‡§ï real-life mini project ‡§ï‡•á ‡§∏‡§æ‡§• ‡§¶‡§ø‡§ñ‡§æ‡§ä‡§Å, ‡§§‡§æ‡§ï‡§ø ‡§Ü‡§™ practical ‡§§‡§∞‡•Ä‡§ï‡•á ‡§∏‡•á loops ‡§∏‡•Ä‡§ñ ‡§∏‡§ï‡•á‡§Ç, ‡§ú‡•à‡§∏‡•á:

Shopping cart

Quiz game

Student grading system

‡§ï‡•ç‡§Ø‡§æ ‡§Æ‡•à‡§Ç ‡§µ‡•ã mini project ‡§¨‡§®‡§æ ‡§¶‡•Ç‡§Å?