üòé ‡§ö‡§≤‡•ã JavaScript ‡§ï‡§æ let ‡§™‡•Ç‡§∞‡•Ä ‡§§‡§∞‡§π ‡§∏‡•á ‡§∏‡§Æ‡§ù‡§§‡•á ‡§π‡•à‡§Ç ‚Äì ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à, syntax, examples, ‡§ï‡§¨ ‡§î‡§∞ ‡§ï‡•ç‡§Ø‡•ã‡§Ç use ‡§ï‡§∞‡§§‡•á ‡§π‡•à‡§Ç‡•§

1Ô∏è‚É£ let ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?

let ‡§è‡§ï variable declaration keyword ‡§π‡•à‡•§

‡§á‡§∏‡•á ES6 (2015) ‡§Æ‡•á‡§Ç introduce ‡§ï‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§

let block scoped ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Üí ‡§Æ‡§§‡§≤‡§¨ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§â‡§∏‡•Ä block, loop ‡§Ø‡§æ function ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ accessible‡•§

Reassignable ‡§π‡•ã‡§§‡§æ ‡§π‡•à ‚Üí value ‡§¨‡§¶‡§≤ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç‡•§

Redeclare ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ ‡§â‡§∏‡•Ä scope ‡§Æ‡•á‡§Ç‡•§

2Ô∏è‚É£ Syntax
let variableName = value;


Example:

let name = "Sunil";
console.log(name); // Sunil

name = "Aman"; // ‚úÖ Reassign allowed
console.log(name); // Aman

// let name = "Rakesh"; // ‚ùå Error: redeclare not allowed in same scope

3Ô∏è‚É£ Scope of let

let block scoped ‡§π‡•ã‡§§‡§æ ‡§π‡•à, function ‡§Ø‡§æ curly braces {} ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ valid ‡§π‡•ã‡§§‡§æ ‡§π‡•à‡•§

if(true){
  let age = 25;
  console.log(age); // 25
}
console.log(age); // ‚ùå Error, outside block accessible nahi


Compare with var:

if(true){
  var x = 10;
}
console.log(x); // 10 (function scoped)

4Ô∏è‚É£ Loops ‡§Æ‡•á‡§Ç let

Loops ‡§Æ‡•á‡§Ç iteration variable declare ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è best practice

for(let i = 0; i < 5; i++){
  console.log(i); // 0,1,2,3,4
}
console.log(i); // ‚ùå Error, i block scoped


var use ‡§ï‡§∞‡§®‡•á ‡§™‡§∞ i globally accessible ‡§π‡•ã ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‚Üí problem ho sakti hai

5Ô∏è‚É£ Reassign vs Redeclare
let count = 10;
count = 20; // ‚úÖ Reassign allowed

// let count = 30; // ‚ùå Redeclare in same scope not allowed


‚úÖ Reassign allowed

‚ùå Redeclare same scope mein not allowed

6Ô∏è‚É£ Why use let?

Block scoped ‚Üí safer than var

Reassignable ‚Üí dynamic value store kar sakte hain

Modern JS best practice ‚Üí avoid using var

Loops and conditional blocks ‚Üí temporary variables ke liye perfect

Avoid accidental redeclaration ‚Üí var me error nahi aata, let safer hai

7Ô∏è‚É£ Project-level Usage of let
| Scenario              | Example                      | Why `let`?                           |
| --------------------- | ---------------------------- | ------------------------------------ |
| Loop index            | `for(let i=0;i<10;i++)`      | Block scope, outside accessible nahi |
| Dynamic variable      | `let count = 0; count += 1;` | Value change hoti rahe               |
| Temporary calculation | `let sum = a + b;`           | Scope limited, safe                  |

Example:

let score = 0;

if(userLoggedIn){
  let bonus = 10; // temporary value
  score += bonus;
}

console.log(score); // score accessible
// console.log(bonus); // ‚ùå Error, bonus block scoped

8Ô∏è‚É£ Key Differences between let and const

| Feature        | let                        | const                                     |
| -------------- | -------------------------- | ----------------------------------------- |
| Scope          | Block scoped               | Block scoped                              |
| Reassign       | ‚úÖ allowed                  | ‚ùå not allowed                             |
| Redeclare      | ‚ùå not allowed              | ‚ùå not allowed                             |
| Arrays/Objects | Reference reassign allowed | Reference not allowed, but modify allowed |

üí° Summary:

let = block scoped, reassignable, modern variable

Use: temporary variables, loops, dynamic values

Avoid: unnecessary global variables

Why: safer than var, predictable scoping, modern JS best practice

